/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 12:25:15 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockPartial;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateMidnight_Basics;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestInterval_Constructors;
import org.joda.time.TestLocalDate_Basics;
import org.joda.time.TestMonthDay_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.joda.time.TestTimeOfDay_Basics;
import org.joda.time.TestYearMonthDay_Basics;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Partial_ESTest extends Partial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)testBasePartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial1 = partial0.with(dateTimeFieldType0, (-1183));
      boolean boolean0 = partial1.isMatch((ReadablePartial) testBasePartial_MockPartial0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)testBasePartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial1 = partial0.with(dateTimeFieldType0, (-1183));
      boolean boolean0 = partial1.isMatch((ReadableInstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      PeriodType periodType0 = PeriodType.months();
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0, periodType0);
      Partial partial1 = partial0.minus(period0);
      assertNotSame(partial1, partial0);
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics((String) null);
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      ISOChronology iSOChronology0 = (ISOChronology)testMutableDateTime_Basics_MockInstant0.getChronology();
      Partial partial0 = new Partial(dateTimeFieldType0, 44, (Chronology) iSOChronology0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-824));
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("GMT+2", locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)testBasePartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial1 = partial0.with(dateTimeFieldType0, (-1187));
      Partial partial2 = partial1.withField(dateTimeFieldType0, 1);
      assertNotSame(partial2, partial1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Partial partial0 = new Partial();
      Period period0 = Period.months(1060);
      Partial partial1 = partial0.withPeriodAdded(period0, 9);
      assertNotSame(partial1, partial0);
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      int int0 = partial0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)testBasePartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial1 = partial0.with(dateTimeFieldType0, (-1187));
      Partial.Property partial_Property0 = partial1.property(dateTimeFieldType0);
      assertEquals(-1187, partial_Property0.get());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Partial partial0 = new Partial();
      Duration duration0 = Duration.standardDays(824L);
      Hours hours0 = duration0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      Partial partial1 = partial0.minus(days0);
      assertNotSame(partial1, partial0);
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)testBasePartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Period period0 = new Period((long) (-4187), (Chronology) iSOChronology0);
      Partial partial1 = partial0.with(dateTimeFieldType0, (-1183));
      Partial partial2 = partial1.minus(period0);
      assertNotSame(partial2, partial1);
      assertTrue(partial2.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Partial partial0 = new Partial();
      int[] intArray0 = partial0.getValues();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      TestInterval_Constructors testInterval_Constructors0 = new TestInterval_Constructors("");
      TestInterval_Constructors.MockInterval testInterval_Constructors_MockInterval0 = testInterval_Constructors0.new MockInterval();
      ISOChronology iSOChronology0 = (ISOChronology)testInterval_Constructors_MockInterval0.getChronology();
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
      assertFalse(dateTimeFieldTypeArray1.equals((Object)dateTimeFieldTypeArray0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      DateTimeFieldType dateTimeFieldType0 = partial0.getFieldType(0);
      assertEquals("year", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      DateTimeField dateTimeField0 = partial0.getField(0, (Chronology) null);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("Cbwnzf0Y^x");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      CopticChronology copticChronology0 = (CopticChronology)testLocalDate_Basics_MockInstant0.getChronology();
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(copticChronology0, (DateTimeFieldType[]) null, intArray0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      // Undeclared exception!
      try { 
        partial0.without(dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        partial0.withFieldAdded((DurationFieldType) null, (-998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'null' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Partial partial0 = new Partial();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      // Undeclared exception!
      try { 
        partial0.withFieldAddWrapped(durationFieldType0, 2804);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyears' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuryOfEra' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        partial0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuryOfEra' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics((String) null);
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      CopticChronology copticChronology0 = (CopticChronology)testLocalDate_Basics_MockInstant0.getChronology();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[9];
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.getField(0, (Chronology) copticChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Partial partial0 = new Partial();
      Instant instant0 = new Instant((long) (-1814));
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      // Undeclared exception!
      try { 
        partial0.getField((-1814), (Chronology) iSOChronology0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = 91;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 91 for hourOfHalfday must not be larger than 11
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[0];
      Partial partial0 = null;
      try {
        partial0 = new Partial((Partial) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("minuteOfHour");
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      ISOChronology iSOChronology0 = (ISOChronology)testDateMidnight_Basics_MockInstant0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, (-2441), (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2441 for halfdayOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, (-1048), (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -23 for secondOfMinute must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, 3311);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)testBasePartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial1 = partial0.with(dateTimeFieldType0, (-1187));
      String string0 = partial1.toString();
      assertEquals("-1187", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Partial partial0 = new Partial();
      String string0 = partial0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("Values array must not be null");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      Partial partial1 = partial0.with(dateTimeFieldType0, 259);
      assertNotSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[2];
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Partial partial0 = new Partial();
      ISOChronology iSOChronology0 = (ISOChronology)partial0.getChronology();
      assertNotNull(iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Partial partial0 = new Partial();
      int int0 = partial0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        partial0.getFieldType(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        partial0.getValue((-1456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1456
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      Partial partial1 = new Partial(partial0, intArray0);
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics((String) null);
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      ISOChronology iSOChronology0 = (ISOChronology)testMutableDateTime_Basics_MockInstant0.getChronology();
      Partial partial0 = new Partial(dateTimeFieldType0, 44, (Chronology) iSOChronology0);
      int[] intArray0 = partial0.getValues();
      assertArrayEquals(new int[] {44}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Partial partial0 = new Partial();
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        partial0.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Partial partial0 = new Partial();
      String string0 = partial0.toString("[]");
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      String string0 = partial0.toStringList();
      assertEquals("[year=1970, monthOfYear=6, dayOfMonth=9]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 2070, 2070, 2538, 2897);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertTrue(dateTimeFormatter0.isParser());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Partial partial0 = new Partial();
      String string0 = partial0.toString((String) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      Locale locale0 = Locale.FRANCE;
      partial0.toString((String) null, locale0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertTrue(dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)testBasePartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        partial0.isMatch((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 10);
      Instant instant0 = new Instant((long) 10);
      boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Instant instant0 = new Instant((long) 0);
      boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 10);
      Instant instant0 = new Instant((long) 10);
      Duration duration0 = new Duration((ReadableInstant) instant0, (ReadableInstant) instant0);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Partial partial1 = partial0.withPeriodAdded(mutablePeriod0, 10);
      assertNotSame(partial1, partial0);
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Instant instant0 = new Instant((long) 0);
      Duration duration0 = new Duration((ReadableInstant) instant0, (ReadableInstant) instant0);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      Partial partial1 = partial0.withPeriodAdded(mutablePeriod0, 0);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Partial partial0 = new Partial();
      Partial partial1 = partial0.plus((ReadablePeriod) null);
      assertSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 0);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, 398);
      assertNotSame(partial1, partial0);
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial partial1 = partial0.withField(dateTimeFieldType0, 0);
      String string0 = partial1.toString();
      assertEquals("[secondOfDay=0]", string0);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[3];
      intArray0[0] = 3248;
      Partial partial0 = new Partial((Chronology) null, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)testBasePartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial1 = partial0.with(dateTimeFieldType0, (-1183));
      Partial partial2 = partial1.without(dateTimeFieldType0);
      assertEquals(0, partial2.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      TestInterval_Constructors testInterval_Constructors0 = new TestInterval_Constructors("");
      TestInterval_Constructors.MockInterval testInterval_Constructors_MockInterval0 = testInterval_Constructors0.new MockInterval();
      ISOChronology iSOChronology0 = (ISOChronology)testInterval_Constructors_MockInterval0.getChronology();
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertEquals(0, partial1.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial partial1 = partial0.with(dateTimeFieldType0, 0);
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      Partial partial1 = partial0.withChronologyRetainFields(testDateTime_Basics_MockEqualsChronology0);
      // Undeclared exception!
      try { 
        partial1.with(dateTimeFieldType0, 388);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // centuryOfEra field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        partial0.with((DateTimeFieldType) null, (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 8);
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("");
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonthDay_Basics_MockInstant0.getChronology();
      Partial partial1 = partial0.withChronologyRetainFields(copticChronology0);
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Partial partial0 = null;
      try {
        partial0 = new Partial((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[1];
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: millisOfDay < era
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[2];
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: secondOfDay
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[2];
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[1];
      int[] intArray0 = new int[6];
      TestTimeOfDay_Basics testTimeOfDay_Basics0 = new TestTimeOfDay_Basics("");
      TestTimeOfDay_Basics.MockInstant testTimeOfDay_Basics_MockInstant0 = testTimeOfDay_Basics0.new MockInstant();
      CopticChronology copticChronology0 = (CopticChronology)testTimeOfDay_Basics_MockInstant0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: hourOfDay < centuryOfEra
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      TestInterval_Constructors testInterval_Constructors0 = new TestInterval_Constructors("");
      TestInterval_Constructors.MockInterval testInterval_Constructors_MockInterval0 = testInterval_Constructors0.new MockInterval();
      ISOChronology iSOChronology0 = (ISOChronology)testInterval_Constructors_MockInterval0.getChronology();
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) null);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[6];
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("xxx");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      CopticChronology copticChronology0 = (CopticChronology)testMonthDay_Basics_MockMD0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("A#g:o~6JO|8IA");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, (Chronology) testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int[] intArray0 = new int[4];
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("8xe$");
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      Instant instant0 = testDateMidnight_Basics_MockInstant0.toInstant();
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType[]) null, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, 4786, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Partial.Property partial_Property0 = new Partial.Property((Partial) null, 313);
      // Undeclared exception!
      try { 
        partial_Property0.withMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      Partial partial1 = partial_Property0.addToCopy((-1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Partial.Property partial_Property0 = new Partial.Property((Partial) null, 0);
      Partial partial0 = partial_Property0.getPartial();
      assertNull(partial0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Partial.Property partial_Property0 = new Partial.Property((Partial) null, 2);
      ReadablePartial readablePartial0 = partial_Property0.getReadablePartial();
      assertNull(readablePartial0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      Partial partial1 = partial_Property0.setCopy(2442);
      assertNotSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      Partial partial1 = partial_Property0.addWrapFieldToCopy(0);
      assertEquals(1970, partial_Property0.get());
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Partial.Property partial_Property0 = new Partial.Property((Partial) null, 0);
      // Undeclared exception!
      try { 
        partial_Property0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Partial partial0 = new Partial((ReadablePartial) testLocalDate_Basics_MockInstant0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("D>AnH]8ZX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"D>AnH]8ZX\" for year is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      ISOChronology iSOChronology0 = (ISOChronology)mockPartial0.getChronology();
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(iSOChronology0, (DateTimeFieldType[]) null, intArray0);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period((long) 2156, periodType0);
      // Undeclared exception!
      try { 
        partial0.minus(period0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Instant instant0 = new Instant((long) 0);
      Duration duration0 = new Duration((ReadableInstant) instant0, (ReadableInstant) instant0);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Partial partial1 = partial0.plus(days0);
      assertNotSame(partial1, partial0);
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial partial1 = partial0.with(dateTimeFieldType0, 398);
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertEquals(1, partial1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String[] stringArray0 = new String[9];
      TestLocalDate_Basics.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals(0, partial_Property0.get());
  }
}
