/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 13:51:57 GMT 2017
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestDateMidnight_Basics;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestInterval_Basics;
import org.joda.time.TestLocalDateTime_Basics;
import org.joda.time.TestMonthDay_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.joda.time.TestMutableInterval_Constructors;
import org.joda.time.TestMutableInterval_Updates;
import org.joda.time.TestYearMonthDay_Basics;
import org.joda.time.TestYearMonth_Basics;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Partial_ESTest extends Partial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("H");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      LocalDate localDate1 = localDate0.minusYears(1);
      boolean boolean0 = partial0.isMatch((ReadablePartial) localDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(13737600000L, (DateTimeZone) null);
      boolean boolean0 = partial0.isMatch((ReadableInstant) mutableDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, (-957));
      assertNotSame(partial1, partial0);
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertEquals(2, partial1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("M5aUf$S=k,", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"M5aUf$S=k,\" for weekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("org.joda.time.MockNullZoneChronology");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      Partial partial0 = new Partial((Chronology) copticChronology0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, (-1038));
      // Undeclared exception!
      try { 
        partial_Property0.getField();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addToCopy(2712);
      assertNotSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Partial partial1 = partial0.withChronologyRetainFields(mockNullZoneChronology0);
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Partial partial0 = new Partial();
      int int0 = partial0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Partial partial1 = partial0.without(dateTimeFieldType0);
      Period period0 = new Period(1145, 60, (-4036), 1145);
      Partial partial2 = partial1.plus(period0);
      assertTrue(partial2.equals((Object)partial1));
      assertNotSame(partial2, partial1);
      assertEquals(0, partial2.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Partial partial0 = new Partial();
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("");
      TestDateTime_Basics.MockInstant testDateTime_Basics_MockInstant0 = testDateTime_Basics0.new MockInstant();
      Duration duration0 = new Duration((ReadableInstant) testDateTime_Basics_MockInstant0, (ReadableInstant) testDateTime_Basics_MockInstant0);
      Period period0 = duration0.toPeriod();
      Partial partial1 = partial0.minus(period0);
      assertTrue(partial1.equals((Object)partial0));
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      int[] intArray1 = partial0.getValues();
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DateTimeFieldType dateTimeFieldType0 = partial0.getFieldType(1);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      UnsupportedDateTimeField unsupportedDateTimeField0 = (UnsupportedDateTimeField)partial0.getField(1, (Chronology) mockNullZoneChronology0);
      assertFalse(unsupportedDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, (-679));
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      ISOChronology iSOChronology0 = (ISOChronology)testMutableDateTime_Basics_MockInstant0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      // Undeclared exception!
      try { 
        partial0.withFieldAddWrapped(durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'seconds' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      // Undeclared exception!
      try { 
        partial0.withField(dateTimeFieldType0, (-3122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3122 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        partial0.withChronologyRetainFields(mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        partial0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      Partial partial0 = new Partial((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        partial0.getValue(255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInterval_Basics testInterval_Basics0 = new TestInterval_Basics("2");
      TestInterval_Basics.MockInterval testInterval_Basics_MockInterval0 = testInterval_Basics0.new MockInterval();
      ISOChronology iSOChronology0 = (ISOChronology)testInterval_Basics_MockInterval0.getChronology();
      int[] intArray0 = new int[8];
      Partial partial0 = new Partial(iSOChronology0, (DateTimeFieldType[]) null, intArray0);
      // Undeclared exception!
      try { 
        partial0.getField(57, (Chronology) iSOChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("Hx%");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      CopticChronology copticChronology0 = (CopticChronology)testLocalDateTime_Basics_MockInstant0.getChronology();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[1];
      Partial partial0 = new Partial(copticChronology0, dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.getField(790, (Chronology) copticChronology0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2256);
      TestMutableInterval_Updates testMutableInterval_Updates0 = new TestMutableInterval_Updates("}*Bk");
      TestMutableInterval_Updates.MockBadInterval testMutableInterval_Updates_MockBadInterval0 = testMutableInterval_Updates0.new MockBadInterval();
      ISOChronology iSOChronology0 = (ISOChronology)testMutableInterval_Updates_MockBadInterval0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2256 for centuryOfEra must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2833);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2833 for weekyearOfCentury must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Partial partial0 = null;
      try {
        partial0 = new Partial((Partial) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics(";mY!0");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      CopticChronology copticChronology0 = (CopticChronology)testMonthDay_Basics_MockMD0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, (-1083), (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1083 for minuteOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("org.joda.time.field.BaseDurationField");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 0, (Chronology) testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfCentury field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 1006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1006 for hourOfHalfday must not be larger than 11
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Partial partial0 = new Partial();
      String string0 = partial0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics((String) null);
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      ISOChronology iSOChronology0 = (ISOChronology)testMutableInterval_Constructors_MockInterval0.getChronology();
      Partial partial0 = new Partial((Chronology) iSOChronology0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Partial partial0 = new Partial();
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) null, 8);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) copticChronology0);
      Partial partial1 = partial0.withPeriodAdded(mutablePeriod0, (-957));
      assertTrue(partial1.equals((Object)partial0));
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics((String) null);
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, (-3852));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3852 for halfdayOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      int[] intArray0 = new int[3];
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics((String) null);
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonthDay_Basics_MockInstant0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      ISOChronology iSOChronology0 = (ISOChronology)partial0.getChronology();
      assertNotNull(iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      int int0 = partial0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        partial0.getFieldType((-1038));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      int int0 = partial0.getValue(1);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("");
      TestDateTime_Basics.MockInstant testDateTime_Basics_MockInstant0 = testDateTime_Basics0.new MockInstant();
      ISOChronology iSOChronology0 = (ISOChronology)testDateTime_Basics_MockInstant0.getChronology();
      Partial partial0 = new Partial(dateTimeFieldType0, 345, (Chronology) iSOChronology0);
      int[] intArray0 = new int[2];
      Partial partial1 = new Partial(partial0, intArray0);
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      int[] intArray0 = partial0.getValues();
      assertArrayEquals(new int[] {1730, 6, 7}, intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        partial0.toString("hBD#j!Irm", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      // Undeclared exception!
      try { 
        partial0.toString("?F=BaLiA(CM|RP1+Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 1);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      String string0 = partial0.toStringList();
      assertEquals("[year=1970, monthOfYear=1, dayOfMonth=1]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      String string0 = partial0.toString();
      assertEquals("[centuryOfEra=1145]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      String string0 = partial0.toString((String) null);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      String string0 = partial0.toString();
      assertEquals("1145", string0);
      
      Locale locale0 = Locale.FRANCE;
      String string1 = partial0.toString((String) null, locale0);
      assertEquals("1145", string1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Partial partial1 = partial0.without(dateTimeFieldType0);
      partial0.getFormatter();
      assertSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 1);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      LocalDate localDate1 = new LocalDate((DateTimeZone) null);
      boolean boolean0 = partial0.isMatch((ReadablePartial) localDate1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 1);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      boolean boolean0 = partial0.isMatch((ReadablePartial) localDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Partial partial0 = new Partial((Chronology) null);
      // Undeclared exception!
      try { 
        partial0.isMatch((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 1);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(13737600000L, (DateTimeZone) null);
      boolean boolean0 = partial0.isMatch((ReadableInstant) mutableDateTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      boolean boolean0 = partial0.isMatch((ReadableInstant) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 1);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      Partial partial1 = partial0.plus((ReadablePeriod) null);
      assertEquals(3, partial1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, 1145);
      assertNotSame(partial1, partial0);
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Partial partial1 = partial0.withField(dateTimeFieldType0, 1145);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Partial partial1 = partial0.withField(dateTimeFieldType0, 61);
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 1);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      Partial partial1 = partial0.without(dateTimeFieldType0);
      String string0 = partial0.toString();
      assertSame(partial0, partial1);
      assertEquals("1970-01-01", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Partial partial1 = partial0.with(dateTimeFieldType0, 1145);
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("org.joda.time.MockNullZoneChronology");
      testYearMonth_Basics0.testCompareTo();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Partial partial0 = new Partial();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, (-2282));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2282 for era must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Partial partial1 = partial0.with(dateTimeFieldType0, 1026);
      assertNotSame(partial0, partial1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics((String) null);
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, (-3835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3835 for centuryOfEra must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics((String) null);
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      Partial partial1 = partial0.withChronologyRetainFields(copticChronology0);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Partial partial0 = null;
      try {
        partial0 = new Partial((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfMinute < secondOfDay
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[2];
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: secondOfDay < weekOfWeekyear
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[2];
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: secondOfMinute
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[1];
      TestMutableInterval_Updates testMutableInterval_Updates0 = new TestMutableInterval_Updates("}*Bk");
      TestMutableInterval_Updates.MockBadInterval testMutableInterval_Updates_MockBadInterval0 = testMutableInterval_Updates0.new MockBadInterval();
      ISOChronology iSOChronology0 = (ISOChronology)testMutableInterval_Updates_MockBadInterval0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[7];
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, (int[]) null, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[2];
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("DCB80PO\"mP<}9");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      CopticChronology copticChronology0 = (CopticChronology)testLocalDateTime_Basics_MockInstant0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType[]) null, intArray0, (Chronology) copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Instant instant0 = new Instant((long) (-3514));
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, (-3514), (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("Types array must not contain duplicate: ");
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      ISOChronology iSOChronology0 = (ISOChronology)testDateMidnight_Basics_MockInstant0.getChronology();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      // Undeclared exception!
      try { 
        partial_Property0.withMinimumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Partial.Property partial_Property0 = new Partial.Property((Partial) null, (-2275));
      // Undeclared exception!
      try { 
        partial_Property0.withMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Partial$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Partial.Property partial_Property0 = new Partial.Property((Partial) null, 5088);
      Partial partial0 = partial_Property0.getPartial();
      assertNull(partial0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Partial.Property partial_Property0 = new Partial.Property((Partial) null, 5088);
      ReadablePartial readablePartial0 = partial_Property0.getReadablePartial();
      assertNull(readablePartial0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 1);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      Partial.Property partial_Property0 = new Partial.Property(partial0, 0);
      Partial partial1 = partial_Property0.setCopy(20);
      assertEquals(3, partial1.size());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      Partial partial1 = partial_Property0.addWrapFieldToCopy((-1043));
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      String string0 = partial_Property0.getAsString();
      assertEquals("1145", string0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Partial partial0 = new Partial();
      Partial.Property partial_Property0 = new Partial.Property(partial0, 4832);
      // Undeclared exception!
      try { 
        partial_Property0.setCopy("org.joda.time.chrono.BasicGJChronology");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      CopticChronology copticChronology0 = (CopticChronology)testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = LocalDate.now((Chronology) copticChronology0);
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) copticChronology0);
      Partial partial1 = partial0.minus(mutablePeriod0);
      assertTrue(partial1.equals((Object)partial0));
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      Partial partial0 = new Partial(dateTimeFieldType0, 1145);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, 1145);
      assertNotSame(partial1, partial0);
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Partial partial0 = new Partial();
      partial0.getFieldTypes();
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        partial0.with((DateTimeFieldType) null, 1625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
}
