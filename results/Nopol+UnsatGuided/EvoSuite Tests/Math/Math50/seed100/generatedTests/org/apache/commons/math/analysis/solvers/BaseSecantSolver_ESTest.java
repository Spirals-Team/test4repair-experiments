/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 12:17:14 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.MonitoredFunction;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BaseSecantSolver;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.2250738585072014E-308, 1179.349670107828, 1179.349670107828);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sinFunction0, (-2025.0), 2.2250738585072014E-308, allowedSolution0);
      assertEquals((-1012.5), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-4.64054995133801E-305), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseSecantSolver.Method.valueOf("PEGASUS");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseSecantSolver.Method[] baseSecantSolver_MethodArray0 = BaseSecantSolver.Method.values();
      assertNotNull(baseSecantSolver_MethodArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      pegasusSolver0.solve(2004, (UnivariateRealFunction) expm1Function0, 0.0, 3.9736429850260626E-8, allowedSolution0);
      assertEquals(1.9868214925130313E-8, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0, 0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      regulaFalsiSolver0.solve(2, (UnivariateRealFunction) expm1Function0, 0.0, 0.0, (double) 2);
      assertEquals(2.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      pegasusSolver0.solve(2004, (UnivariateRealFunction) expm1Function0, (double) 2004, 0.0, 0.0, allowedSolution0);
      double double0 = pegasusSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 1179.349670107828, 1179.349670107828);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sinFunction0, (-2024.3131929383615), 0.9995576540188896, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals((-1011.6568176421713), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-975.5981853960625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1476.61830902), (-1476.61830902), (-1476.61830902));
      SincFunction sincFunction0 = new SincFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(271, (UnivariateRealFunction) sincFunction0, 41.0, (double) 271, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (271) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 0.9995576540188896, 0.9995576540188896);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sinFunction0, 0.9995576540188896, 0.9995576540188896, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1, 1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0, 0.0);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve((-300), (UnivariateRealFunction) null, (-1508.70893643), 2128.5792649653, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 1178.5155964155442, 1178.5155964155442);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      MonitoredFunction monitoredFunction0 = new MonitoredFunction((UnivariateRealFunction) null);
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1796, (UnivariateRealFunction) monitoredFunction0, (-2584.034636861273), 0.0, allowedSolution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.MonitoredFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      SincFunction sincFunction0 = new SincFunction();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-1), (UnivariateRealFunction) sincFunction0, (-324.267413), 394.4384518690515, 1.2958646899018938E-9, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-11.77));
      SincFunction sincFunction0 = new SincFunction();
      MonitoredFunction monitoredFunction0 = new MonitoredFunction((UnivariateRealFunction) sincFunction0);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(839, (UnivariateRealFunction) monitoredFunction0, (-11.77), (-11.77), (double) 839, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-11.77, -11.77]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 524.5572, 0.030589580535888672);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(4362, (UnivariateRealFunction) sinFunction0, 1.4456468917292502E-16, (double) 4362, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 4,362], values: [0, 0.995]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.479773539153719E-5);
      SincFunction sincFunction0 = new SincFunction();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1637, (UnivariateRealFunction) sincFunction0, (double) 1637, (double) 1637, 0.00878672656343582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,637, 1,637]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-847.555058), (-847.555058));
      QuinticFunction quinticFunction0 = new QuinticFunction();
      UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1756, univariateRealFunction0, (-847.555058), 2934.707, (double) 1756);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-847.555, 2,934.707], values: [2,580,127,875,338.564, 370,876,194,723,234.9]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2148.007), (-2818.0));
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1070.728271072);
      SinFunction sinFunction0 = new SinFunction();
      pegasusSolver0.setup(9, sinFunction0, (-1207.590493938204), (-1581.45129613), (-6.612489382385223E-5));
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-1,207.59, -1,581.451]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1541.002794551, 2536.6873832517476);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      regulaFalsiSolver0.setup(2, quinticFunction0, 2, 442.398855208, 0.0);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [2, 442.399], values: [22.5, 16,945,999,866,083.232]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(53, (UnivariateRealFunction) sinFunction0, (-324.267413), 795.95, allowedSolution0);
      assertEquals(235.84129350000006, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-47.1238898038469), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 0.9995576540188896);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1338009720, (UnivariateRealFunction) sinFunction0, (-2025.2444772291865), 0.9995576540188896, allowedSolution0);
      assertEquals((-1012.1224597875838), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-89.13457273434088), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 1183.9021556332796, 1183.9021556332796);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sinFunction0, (-2025.6560297837634), 0.9995576540188896, allowedSolution0);
      assertEquals((-1012.3282360648723), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.9995576540188896, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-54.33546125909403));
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sinFunction0, (-2025.0), (-54.33546125909403), allowedSolution0);
      assertEquals((-1039.667730629547), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-433.5397861953915), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-452.620282963));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      SinFunction sinFunction0 = new SinFunction();
      UnivariateRealFunction univariateRealFunction0 = sinFunction0.derivative();
      double double0 = illinoisSolver0.solve(1338009763, univariateRealFunction0, (-2080.90740693), (-2025.0), (-1745.4), allowedSolution0);
      assertEquals((-1745.4), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2059.313984428109), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1691.35490895767, (-3715.10329));
      SincFunction sincFunction0 = new SincFunction();
      double double0 = pegasusSolver0.solve(2117803252, (UnivariateRealFunction) sincFunction0, (-1113.51), 6.283185307179586, (-1113.51));
      assertEquals((-1113.51), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(6.28318530713014, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      SincFunction sincFunction0 = new SincFunction();
      UnivariateRealFunction univariateRealFunction0 = sincFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2801, univariateRealFunction0, (-0.3233370407462927), 386.4, allowedSolution0);
      assertEquals(193.03833147962686, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(384.8425016050027, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 0.9995576540188896, 0.9995576540188896);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sinFunction0, (-2025.2444772291865), 0.9995576540188896, allowedSolution0);
      assertEquals((-1012.1224597875838), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-987.4275123798103), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 1178.5155964155442, 1178.5155964155442);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1338009788, (UnivariateRealFunction) sinFunction0, (-2024.3131929383615), 0.9995576540188896, allowedSolution0);
      assertEquals((-1011.6568176421713), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-975.5981853960625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 1178.5155964155442, 1178.5155964155442);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sinFunction0, (-1301.3931258150835), 0.9995576540188896, allowedSolution0);
      assertEquals((-650.1967840805323), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.9995576540188896, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 1178.5155964155442, 1178.5155964155442);
      SincFunction sincFunction0 = new SincFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sincFunction0, (-2584.034636861273), 1178.5155964155442, (-2024.3131929383615), allowedSolution0);
      assertEquals((-2024.3131929383615), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2584.034636861273), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      SincFunction sincFunction0 = new SincFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(271, (UnivariateRealFunction) sincFunction0, 41.0, (double) 271, allowedSolution0);
      assertEquals(41.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(106.81414922205298, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0, 0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(5, univariateRealFunction0, 0.0, (-971.619), allowedSolution0);
      assertEquals((-485.8095), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-971.619), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1743.8158449, (-2568.0));
      QuinticFunction quinticFunction0 = new QuinticFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(2, (UnivariateRealFunction) quinticFunction0, 0.5, 9.243863392686452E-8, (-108.86), allowedSolution0);
      assertEquals(0.5, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.9995576540188896, 1179.349670107828, 1179.349670107828);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(1338009747, (UnivariateRealFunction) sinFunction0, (-0.015354984424235399), 0.9995576540188896, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.49210133479732715, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0028374098338689313, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-847.555058), (-847.555058));
      QuinticFunction quinticFunction0 = new QuinticFunction();
      double double0 = illinoisSolver0.solve(1756, (UnivariateRealFunction) quinticFunction0, (-847.555058), 2934.707, (double) 1756);
      assertEquals(2934.707, illinoisSolver0.getMax(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-983), (UnivariateRealFunction) sinFunction0, (double) (-983), (double) (-983), (double) (-983));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-983) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }
}
