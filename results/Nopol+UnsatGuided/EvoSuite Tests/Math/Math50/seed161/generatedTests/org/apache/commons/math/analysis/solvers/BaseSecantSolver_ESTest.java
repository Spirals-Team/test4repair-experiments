/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 20 11:35:12 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.MonitoredFunction;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.XMinus5Function;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BaseSecantSolver;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseSecantSolver.Method[] baseSecantSolver_MethodArray0 = BaseSecantSolver.Method.values();
      assertNotNull(baseSecantSolver_MethodArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseSecantSolver.Method.valueOf("PEGASUS");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) xMinus5Function0, (double) 5, 1.0E-6, (-3018.553496686), allowedSolution0);
      assertEquals((-3018.553496686), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-513.0225410951));
      SinFunction sinFunction0 = new SinFunction();
      double double0 = illinoisSolver0.solve(108, (UnivariateRealFunction) sinFunction0, (double) 108, 0.0, 2805.99);
      assertEquals(108.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1461.85182, 0.0, 0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      double double0 = pegasusSolver0.solve(3, univariateRealFunction0, 0.0, (-2287.580657334508), 0.0);
      assertEquals((-2287.580657334508), double0, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1522.657);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      regulaFalsiSolver0.setup(4545, quinticFunction0, (-1723.165561), 0.0, (-1723.165561));
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0, 2472.3867296066, 3315.2);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      regulaFalsiSolver0.solve(938, (UnivariateRealFunction) quinticFunction0, 0.5, (-3290.81425));
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(0.5, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.582787129497305E-12, 9.313225746154785E-10);
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      regulaFalsiSolver0.solve(888997182, (UnivariateRealFunction) expm1Function0, (-3.8593733717463117E17), 1.582787129497305E-12, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-1.92968668587315584E17), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-7.650825096074468E-19), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2638.917323);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(3, (UnivariateRealFunction) quinticFunction0, (double) 3, (double) 3, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [3, 3]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(3731.0047619, 0.5);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(10, univariateRealFunction0, (-980.8637), 3731.0047619, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-980.864, 3,731.005], values: [4,628,116,848,497.543, 968,887,146,022,917.1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-808.35010994), (-808.35010994), 0.0);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1023, (UnivariateRealFunction) quinticFunction0, (-1270.400405993408), 1634.2, (-1825.4227913), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,023) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(1201, (UnivariateRealFunction) expm1Function0, (double) 1201, (double) 1201, (double) 1201, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,201, 1,201]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.5830993332061267E-10, 0.0, 0.0);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(756, (UnivariateRealFunction) null, 0.0, 863.0, (double) 756, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0, (-1616.604524531856));
      SinFunction sinFunction0 = new SinFunction();
      UnivariateRealFunction univariateRealFunction0 = sinFunction0.derivative();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(3259, univariateRealFunction0, (-230.81158199), 0.0, (-2.356194490192345));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3,259) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-513.0225410951));
      SinFunction sinFunction0 = new SinFunction();
      UnivariateRealFunction univariateRealFunction0 = sinFunction0.derivative();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(108, univariateRealFunction0, 0.0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2720.65139294894);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(20, (UnivariateRealFunction) null, 2720.65139294894, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(9.808331924432423E-11, (-2.13691806039216E-6), 578.022517883746);
      MonitoredFunction monitoredFunction0 = new MonitoredFunction((UnivariateRealFunction) null);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(27, (UnivariateRealFunction) monitoredFunction0, 9.808331924432423E-11, (-414.43), 578.022517883746);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.MonitoredFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 1461.85182);
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-784.78351), (-239.73), 0.0);
      SinFunction sinFunction0 = new SinFunction();
      pegasusSolver0.setup(2116, sinFunction0, (-345.015115), (-494.72970601859), (-784.78351));
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-345.015, -494.73]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      SinFunction sinFunction0 = new SinFunction();
      double double0 = illinoisSolver0.solve(2131, (UnivariateRealFunction) sinFunction0, (-784.78351), (-1.0), 0.19999954104423523, allowedSolution0);
      assertEquals(0.19999954104423523, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-468.097305384933), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sinFunction0, (-784.78351), (-1.0), (-239.73), allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMax(), 0.01);
      assertEquals((-468.0973053848792), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0E-6);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sinFunction0, (-784.78351), (-1.1636114149898762), (-239.73), allowedSolution0);
      assertEquals((-1.1636114149898762), illinoisSolver0.getMax(), 0.01);
      assertEquals((-9.424777960769225), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sinFunction0, (-784.78351), (-1.0), (-239.73), allowedSolution0);
      assertEquals((-239.73), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-468.097305384933), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.2222222089767456, 0.36787944117144233, 25.35437313687385);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, univariateRealFunction0, 0.2222222089767456, 0.36787944117144233, allowedSolution0);
      assertEquals(0.29505082507409397, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.36787944117144233, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.192232125766232E-5, (-345.015115), 1.0E-6);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sinFunction0, (-784.78351), (-1.1636114149898762), (-239.73), allowedSolution0);
      assertEquals((-239.73), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-235.61837572896627), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2604.049801129), (-345.015115), 1.0E-6);
      SincFunction sincFunction0 = new SincFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sincFunction0, (-2604.049801129), 1846.73790073446, allowedSolution0);
      assertEquals((-378.65595019727016), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2601.237910019467), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2604.049801129), (-2604.049801129), 1.0E-6);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sinFunction0, (-784.78351), (-1.0), 1.0E-6, allowedSolution0);
      assertEquals(1.0E-6, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-593.7610115284709), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.2222222089767456, (-366.01905444), 0.25);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(4, univariateRealFunction0, 0.2222222089767456, 0.36787944117144233, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (4) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2604.049801129), (-2604.049801129), 1.0E-6);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sinFunction0, (-784.78351), (-1.0), (-239.73), allowedSolution0);
      assertEquals((-239.73), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-593.7610115284709), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      SincFunction sincFunction0 = new SincFunction();
      double double0 = regulaFalsiSolver0.solve(600, (UnivariateRealFunction) sincFunction0, (-1.0), 657.1562657624643, 1637.0632847913428);
      assertEquals(657.1562657624643, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(656.5928646002668, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2604.049801129), (-345.015115), 1.0E-6);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sinFunction0, (-784.78351), (-1.0), (-239.73), allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMax(), 0.01);
      assertEquals((-593.7610115284693), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.0E-6);
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2116, (UnivariateRealFunction) sinFunction0, (-782.5636807048941), (-1.1636114149898762), (-239.73), allowedSolution0);
      assertEquals((-239.73), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-166.50441106608912), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0, (-1616.604524531856));
      SincFunction sincFunction0 = new SincFunction();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(3259, (UnivariateRealFunction) sincFunction0, (-230.81158199), 0.0, (-2.356194490192345));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3,259) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      double double0 = regulaFalsiSolver0.solve(1282618401, (UnivariateRealFunction) xMinus5Function0, (double) 0, (double) 1282618401);
      assertEquals(1.282618401E9, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(598, (UnivariateRealFunction) expm1Function0, (double) 598, 0.0, 0.0, allowedSolution0);
      assertEquals(598.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(598, (UnivariateRealFunction) expm1Function0, 0.0, (double) 598, allowedSolution0);
      assertEquals(598.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      SincFunction sincFunction0 = new SincFunction();
      double double0 = regulaFalsiSolver0.solve(600, (UnivariateRealFunction) sincFunction0, (-1.0), 657.0, 1637.0632847913428);
      assertEquals(1637.0632847913428, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(656.5928646002692, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1461.85182, 0.0, 0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      pegasusSolver0.setup(598, univariateRealFunction0, 0.0, 1.483027871979857, (-1223.13348923));
      // Undeclared exception!
      try { 
        pegasusSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1.483], values: [1, 4.406]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SincFunction sincFunction0 = new SincFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(1351, (UnivariateRealFunction) sincFunction0, (-784.78351), (-1.0), (-784.78351), allowedSolution0);
  }
}
