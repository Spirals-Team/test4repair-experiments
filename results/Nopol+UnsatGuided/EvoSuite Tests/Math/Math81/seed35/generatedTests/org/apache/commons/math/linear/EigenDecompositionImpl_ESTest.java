/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 20 17:27:37 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[1] = (-265.0);
      doubleArray0[2] = (-265.0);
      doubleArray0[3] = (-265.0);
      doubleArray0[4] = (-2135.999209);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-0.21601176474152006);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(0);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[4] = (-2135.999209);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2135.999209);
      doubleArray1[1] = (-0.21601176474152006);
      doubleArray1[2] = (-0.21601176474152006);
      doubleArray1[3] = (-265.0);
      doubleArray1[4] = (-265.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals((-1.49502595633001E10), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1685.3342557539204;
      doubleArray0[1] = 1685.3342557539204;
      doubleArray0[2] = 0.06309575215459137;
      doubleArray0[3] = (-1016.92);
      doubleArray0[4] = 1454.934012458;
      doubleArray0[6] = 2430.96626;
      doubleArray0[7] = 1.1102230246251565E-16;
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = 2430.96626;
      doubleArray1[4] = 0.06309575215459137;
      doubleArray1[5] = 2430.96626;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1016.92));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (-1675.8718971);
      double[] doubleArray1 = new double[5];
      doubleArray0[4] = (-1675.8718971);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3112.94));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1.421274326580074E-25;
      doubleArray0[2] = 1.421274326580074E-25;
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.421274326580074E-25);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 0.25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 169.1667901;
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3112.94));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(169.1667901, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[4] = (-2135.999209);
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1675.8718971));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(4);
      assertEquals((-265.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[1] = 169.1667901;
      doubleArray0[2] = 1975.1730327974;
      doubleArray0[3] = 1975.1730327974;
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1675.8718971));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[2] = (-265.0);
      doubleArray0[3] = (-265.0);
      doubleArray0[4] = (-2135.999209);
      doubleArray0[5] = (-265.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-0.21601176474152006);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-8.188772035944467E-4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(2144369111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2144369111
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, (-22.155471));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1.232595164407831E-28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-2135.999209);
      doubleArray0[5] = (-1675.8718971);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-1675.8718971);
      doubleArray1[2] = (-1675.8718971);
      doubleArray1[3] = (-2135.999209);
      doubleArray1[4] = (-1675.8718971);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1675.8718971));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-2135.999209);
      doubleArray0[5] = (-1675.8718971);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1675.8718971);
      doubleArray1[1] = (-1675.8718971);
      doubleArray1[2] = (-1675.8718971);
      doubleArray1[3] = (-2135.999209);
      doubleArray1[4] = (-1675.8718971);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1675.8718971));
      assertEquals(2.3716050150913466E19, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[2] = 1975.1730327974;
      doubleArray0[4] = (-2135.999209);
      doubleArray0[5] = (-1675.8718971);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1675.8718971);
      doubleArray1[1] = (-1675.8718971);
      doubleArray1[2] = (-1675.8718971);
      doubleArray1[3] = (-2135.999209);
      doubleArray1[4] = (-1675.8718971);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1675.8718971));
      assertEquals((-3.064274367618233E19), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 169.1667901;
      doubleArray0[2] = 1652.365932844445;
      doubleArray0[3] = 1652.365932844445;
      doubleArray0[4] = (-2135.999209);
      doubleArray0[5] = (-1675.8718971);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1675.8718971);
      doubleArray1[1] = 169.1667901;
      doubleArray1[2] = (-3112.94);
      doubleArray1[3] = (-1675.8718971);
      doubleArray1[4] = (-1675.8718971);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3112.94));
      assertEquals((-6.7693758127826514E18), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1675.8718971);
      doubleArray1[1] = (-1675.8718971);
      doubleArray1[2] = 1.3371526108585385E-12;
      doubleArray1[3] = (-1675.8718971);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.3371526108585385E-12);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[1] = (-265.0);
      doubleArray0[2] = (-265.0);
      doubleArray0[3] = (-265.0);
      doubleArray0[5] = (-265.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.23;
      doubleArray1[1] = (-0.21601176474152006);
      doubleArray1[2] = (-0.21601176474152006);
      doubleArray1[3] = (-265.0);
      doubleArray1[4] = (-265.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals((-6.926206730658535E14), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[2] = 1975.1730327974;
      doubleArray0[3] = 1975.1730327974;
      doubleArray0[4] = (-2135.999209);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2135.999209);
      doubleArray1[1] = (-0.21601176474152006);
      doubleArray1[2] = (-0.21601176474152006);
      doubleArray1[3] = 1975.1730327974;
      doubleArray1[4] = (-265.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals(1.24998330390811597E18, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[1] = 169.1667901;
      doubleArray0[2] = 1975.207626766362;
      doubleArray0[3] = 1975.207626766362;
      doubleArray0[4] = (-2135.999209);
      doubleArray0[5] = 1975.207626766362;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2135.999209);
      doubleArray1[1] = (-0.21601176474152006);
      doubleArray1[2] = (-0.21601176474152006);
      doubleArray1[3] = 1975.207626766362;
      doubleArray1[4] = (-265.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals(1.4722979718847078E20, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1675.8718970999996;
      doubleArray0[1] = 3041.2711;
      doubleArray0[2] = 0.06309575215459137;
      doubleArray0[3] = (-1016.92);
      doubleArray0[6] = 2430.96626;
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = 2430.96626;
      doubleArray1[4] = 0.06309575215459137;
      doubleArray1[5] = 2430.96626;
      doubleArray1[6] = 3.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1016.92));
      assertEquals(7.143739431512382E23, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-265.0);
      doubleArray0[2] = (-265.0);
      doubleArray0[4] = (-2135.999209);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-0.21601176474152006);
      doubleArray1[2] = (-0.21601176474152006);
      doubleArray1[3] = (-265.0);
      doubleArray1[4] = (-265.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-1675.8718971);
      doubleArray1[2] = 1.3371526108585385E-12;
      doubleArray1[3] = (-1675.8718971);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.3371526108585385E-12);
      eigenDecompositionImpl0.getV();
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.421274326580074E-25);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 72.8485845);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-265.0);
      doubleArray0[2] = (-265.0);
      doubleArray0[3] = (-265.0);
      doubleArray0[5] = (-265.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = (-0.21601176474152006);
      doubleArray1[3] = (-265.0);
      doubleArray1[4] = (-265.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1675.8718970999996;
      doubleArray0[1] = 3041.2711;
      doubleArray0[2] = 0.06309575215459137;
      doubleArray0[3] = (-1016.92);
      doubleArray0[4] = 1454.934012458;
      doubleArray0[6] = 2430.96626;
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 2430.96626;
      doubleArray1[3] = 2430.96626;
      doubleArray1[4] = 0.06309575215459137;
      doubleArray1[5] = 2430.96626;
      doubleArray1[6] = 3.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1016.92));
      assertEquals((-3.922536237211441E27), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[2] = 1975.1730327974;
      doubleArray0[3] = 1975.1730327974;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2135.999209);
      doubleArray1[1] = (-0.21601176474152006);
      doubleArray1[3] = 1975.1730327974;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 169.1667901;
      doubleArray0[2] = 1975.1730327974;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 169.1667901;
      doubleArray1[2] = (-3112.94);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3112.94));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 169.1667901;
      doubleArray0[2] = 1975.1730327974;
      doubleArray0[0] = 1975.1730327974;
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = (-3112.94);
      doubleArray1[3] = (-2135.999209);
      doubleArray1[4] = (-0.21601176474152006);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3112.94));
      eigenDecompositionImpl0.getSolver();
      assertEquals(4.344295630730214E22, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[1] = 169.1667901;
      doubleArray0[2] = 1975.1730327974;
      doubleArray0[3] = 1975.1730327974;
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = (-265.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-265.0));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-265.0);
      doubleArray0[2] = (-265.0);
      doubleArray0[3] = (-265.0);
      doubleArray0[4] = (-2135.999209);
      doubleArray0[5] = (-265.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-0.21601176474152006);
      doubleArray1[2] = (-0.21601176474152006);
      doubleArray1[3] = (-0.21601176474152006);
      doubleArray1[4] = (-0.21601176474152006);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (-0.21601176474152006);
      doubleArray1[2] = (-0.21601176474152006);
      doubleArray1[3] = (-265.0);
      doubleArray1[4] = (-265.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[1] = (-265.0);
      doubleArray0[2] = 1975.1730327974;
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = (-3098.9293719575544);
      doubleArray1[4] = (-1675.871897);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3098.9293719575544));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-3098.9293719575544));
      assertEquals(1.89407312096535808E18, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-265.0);
      doubleArray0[1] = (-265.0);
      doubleArray0[2] = (-265.0);
      doubleArray0[3] = (-265.0);
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      doubleArray1[2] = 1.421274326580074E-25;
      doubleArray1[3] = 1.421274326580074E-25;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.421274326580074E-25);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      eigenDecompositionImpl0.getEigenvector(0);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector((-1080));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1080
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      eigenDecompositionImpl0.getEigenvector(0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1675.8718971));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      eigenDecompositionImpl0.getEigenvector(0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3098.9293719575544));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-3098.9293719575544));
      eigenDecompositionImpl1.getSolver();
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 169.1667901;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 169.1667901);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 72.8485845);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3112.94));
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3098.9293719575544));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      eigenDecompositionImpl0.getImagEigenvalue(0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.21601176474152006));
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}
