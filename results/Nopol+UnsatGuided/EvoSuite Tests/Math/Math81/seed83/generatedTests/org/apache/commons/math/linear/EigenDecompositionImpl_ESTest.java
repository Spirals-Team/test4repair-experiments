/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 21 00:24:29 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3695.393167472791);
      doubleArray0[1] = 6768.11043;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 6768.11043;
      doubleArray1[1] = (-3695.393167472791);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1922.49067582));
      eigenDecompositionImpl0.getSolver();
      assertEquals(5.046403286459302E10, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = (-1008.5442480526209);
      doubleArray0[2] = 1873.440826646;
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[6] = (-3296.8714);
      doubleArray0[7] = 580.290120175663;
      doubleArray0[8] = 3207.532811735807;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-3453.862249243);
      doubleArray1[4] = 1873.440826646;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(1.3947994659809234E27, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 6768.11043;
      doubleArray0[2] = 6768.11043;
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1947.585304143008));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2347.001335);
      doubleArray0[1] = 269.66265;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 269.66265);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2.718281828459045);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      eigenDecompositionImpl0.getImagEigenvalue(0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(2);
      assertTrue(arrayRealVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = 4523.428;
      doubleArray0[3] = 4523.428;
      doubleArray0[2] = 4523.428;
      doubleArray0[5] = 4523.428;
      doubleArray0[6] = (-3296.8714);
      doubleArray0[7] = 580.290120175663;
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = (-1008.5442480526209);
      doubleArray1[5] = 4523.428;
      doubleArray1[7] = (-1008.5442480526209);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(1.0351198190163435E30, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 6768.11043;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 6768.11043;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1947.585304143008));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-3.100289920910372E11), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-3427));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3427
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 19.085536923187668);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getSolver();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 1.1102230246251565E-16);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl1.getSolver();
      assertTrue(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[7] = 580.290120175663;
      doubleArray0[8] = 3207.532811735807;
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.532811735807;
      doubleArray1[6] = (-3296.8714);
      doubleArray1[7] = (-1008.5442480526209);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[6] = (-3296.8714);
      doubleArray0[8] = 3207.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = (-3296.8714);
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.0;
      doubleArray1[6] = (-3296.8714);
      doubleArray1[7] = (-3296.8714);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3296.8714));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[7] = 580.290120175663;
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.532811735807;
      doubleArray1[6] = (-3296.8714);
      doubleArray1[7] = (-1008.5442480526209);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4513.080401230179;
      doubleArray0[2] = 1873.440826646;
      doubleArray0[5] = (-3453.862249243);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1873.440826646;
      doubleArray1[2] = 0.7853981633974483;
      doubleArray1[3] = (-3453.862249243);
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.532811735807;
      doubleArray1[6] = 15.4857;
      doubleArray1[7] = (-1008.5442480526209);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(8.208467729136854E29, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1873.440826646;
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[7] = 580.290120175663;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 0.7853981633974483;
      doubleArray1[3] = (-3453.862249243);
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.532811735807;
      doubleArray1[6] = 15.4857;
      doubleArray1[7] = (-1008.5442480526209);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = 4523.428;
      doubleArray0[2] = 1873.440826646;
      doubleArray0[5] = (-3453.862249243);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3207.0;
      doubleArray1[1] = (-3453.862249243);
      doubleArray1[2] = 0.7853981633974483;
      doubleArray1[3] = (-3453.862249243);
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[6] = (-3296.8714);
      doubleArray0[7] = 1873.440826646;
      doubleArray0[8] = 3207.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 0.7853981633974483;
      doubleArray1[3] = (-3296.8714);
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.0;
      doubleArray1[6] = (-3296.8714);
      doubleArray1[7] = (-3296.8714);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3296.8714));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4513.080401230179;
      doubleArray0[2] = 1873.440826646;
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[7] = 580.290120175663;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1873.440826646;
      doubleArray1[2] = 6.090451682037922;
      doubleArray1[3] = (-3453.862249243);
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.532811735807;
      doubleArray1[6] = 15.4857;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1007.0667250773932));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = (-1008.5442480526209);
      doubleArray0[2] = 1873.440826646;
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[6] = (-3296.8714);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1873.440826646;
      doubleArray1[4] = (-3453.862249243);
      doubleArray1[3] = (-3296.8714);
      doubleArray1[5] = 3207.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3296.8714));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = (-1008.5442480526209);
      doubleArray0[2] = 1873.440826646;
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[5] = (-3453.862249243);
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = (-3453.862249243);
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.0;
      doubleArray1[6] = (-3296.8714);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4523.428;
      doubleArray0[2] = 4523.428;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-991.2614065056637));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 1873.440826646;
      doubleArray0[4] = 0.736863451368379;
      double[] doubleArray1 = new double[8];
      doubleArray0[3] = (-3453.862249243);
      doubleArray1[2] = 0.7853981633974483;
      doubleArray1[3] = 3220.780406291052;
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3220.780406291052;
      doubleArray1[6] = (-3298.2141945404087);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = (-1008.5442480526209);
      doubleArray0[2] = 0.1411200080598672;
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[4] = 4523.428;
      doubleArray0[5] = 0.1411200080598672;
      doubleArray0[6] = (-3296.8714);
      doubleArray0[7] = 4523.428;
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = (-1008.5442480526209);
      doubleArray1[5] = 0.7853981633974483;
      doubleArray1[6] = 4523.428;
      doubleArray1[7] = (-1008.5442480526209);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(2.3922809556104673E29, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = (-1008.5442480526209);
      doubleArray0[2] = 4523.428;
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[5] = (-3453.862249243);
      doubleArray0[6] = (-3296.8714);
      doubleArray0[7] = 4523.428;
      doubleArray0[8] = 3207.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1008.5442480526209);
      doubleArray1[3] = (-3453.862249243);
      doubleArray1[4] = (-1008.5442480526209);
      doubleArray1[7] = (-3296.8714);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3296.8714));
      assertEquals(4.512145903827824E31, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = (-1008.5442480526209);
      doubleArray0[2] = 0.1411200080598672;
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[4] = 4523.428;
      doubleArray0[5] = 0.1411200080598672;
      doubleArray0[6] = (-3296.8714);
      doubleArray0[7] = 4523.428;
      double[] doubleArray1 = new double[8];
      doubleArray1[5] = 0.7853981633974483;
      doubleArray1[6] = 4523.428;
      doubleArray1[7] = (-1008.5442480526209);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals((-5.690228124282361E28), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = 1873.440826646;
      doubleArray1[5] = 3207.532811735807;
      doubleArray1[6] = (-3296.8714);
      doubleArray1[7] = (-1008.5442480526209);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 4513.080401230179;
      doubleArray0[2] = 1873.440826646;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1873.440826646;
      doubleArray1[2] = 0.7853981633974483;
      doubleArray1[3] = (-3453.862249243);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 1.1102230246251565E-16);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl1.getSolver();
      assertTrue(decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4523.428;
      doubleArray0[1] = (-1008.5442480526209);
      doubleArray0[2] = 4523.428;
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3695.393167472791);
      doubleArray0[1] = 6768.11043;
      doubleArray0[2] = 1.1102230246251565E-16;
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1922.49067582));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(1);
      assertEquals(7.392845362037476E-5, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals((-2.9558577807620168E-12), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1007.0667250773932));
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector(928);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 928
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1947.585304143008));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1922.49067582));
      eigenDecompositionImpl0.getD();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1922.49067582));
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1947.585304143008));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 1.1102230246251565E-16);
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 6768.11043;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1947.585304143008));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 1.1102230246251565E-16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1922.49067582));
      eigenDecompositionImpl0.getRealEigenvalue(1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1008.5442480526209));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-1172));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1172
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1922.49067582));
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}
