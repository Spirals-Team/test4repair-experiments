/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 19:46:54 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Choice;
import java.awt.LayoutManager;
import java.awt.Panel;
import java.text.ParsePosition;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((double) 0, (Number) (byte)24);
      xYSeries0.add(0.0, (-397.8));
      xYSeries0.add((double) 0, 0.0);
      xYSeries0.add((-250.247042335), (Number) 16);
      xYSeries0.add((double) 0, (double) 16, true);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(Double.NaN, (Number) 59, false);
      xYSeries0.add(0.0, (double) 59, false);
      xYSeries0.add(583.1477165561, (double) 59);
      xYSeries0.addOrUpdate((double) 0, (double) 59);
      xYSeries0.hashCode();
      assertEquals(4, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((double) 1, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(Double.NaN, 3218.870924306911, true);
      xYSeries0.add((Number) 512, (Number) 24);
      xYSeries0.add((double) 0, (Number) 16);
      xYSeries0.update(0, 20);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      xYSeries0.add(Double.NaN, (Number) 59, true);
      xYSeries0.add(0.0, (double) 59, false);
      xYSeries0.add(583.1477165561, (double) 59);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 1, (double) 53, true);
      xYSeries0.add(1.0, (-19.42712650496971));
      xYSeries0.updateByIndex(1, 1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      xYSeries0.add(0.0, 0.0, true);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem1 = xYSeries0.remove((Number) integer0);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      xYSeries0.add(Double.NaN, (Number) 59, true);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 59);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((double) 1, 0.0);
      XYDataItem xYDataItem1 = xYSeries0.remove(0);
      assertEquals(1.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add((Number) 0, (Number) 59);
      xYSeries0.add(Double.NaN, (Number) 59, false);
      xYSeries0.add(0.0, (double) 59, false);
      XYDataItem xYDataItem0 = xYSeries0.remove(2);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-221.1012303024473));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((-247.9462060753947), (Number) 16);
      XYDataItem xYDataItem1 = xYSeries0.remove(0);
      assertEquals(16.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-247.9462060753947), xYDataItem1.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(Double.NaN, (Number) 59, false);
      xYSeries0.add((Number) 0, (Number) 0);
      int int0 = xYSeries0.indexOf(0);
      assertEquals(1, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((double) 0, (Number) (byte)24);
      Byte byte0 = (Byte)xYSeries0.getY(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((byte)24, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.getY(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((double) 0, (Number) (byte)24);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-221.1012303024473));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((Number) (byte)13, (Number) 1668313716, true);
      xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((-1793.3152305127178), (-397.8));
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals((-1793.3152305127178), (double)double0, 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-221.1012303024473));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((Number) (byte)13, (Number) 1668313716, true);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(Double.NaN, 3218.870924306911, true);
      xYSeries0.add((double) 16, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      XYDataItem xYDataItem1 = xYSeries0.getDataItem(2);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(16.0, xYDataItem1.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(Double.NaN, 3218.870924306911, true);
      xYSeries0.add((double) 0, (Number) 16);
      xYSeries0.add(xYDataItem0, true);
      XYDataItem xYDataItem1 = xYSeries0.getDataItem(2);
      assertEquals(0.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(16.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(37, 2000, 52, 52, 2000);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Year year0 = new Year(3049);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-865.553768710965), (-865.553768710965));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 3062);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(59, 59);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(Double.NaN, (Number) 59, false);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Year year0 = new Year(53);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((Number) 9999, (Number) 9999, false);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1110589745, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 1110589745);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-865.553768710965), (-865.553768710965));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((byte)24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(172.30324842082152, (-1531.4579966311));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2796));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries((Comparable) integer0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Last");
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-865.5538), (-865.5538));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      java.util.Vector<Panel> vector0 = new java.util.Vector<Panel>();
      Panel panel0 = new Panel((LayoutManager) null);
      vector0.add(panel0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(112);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-2250.7), 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-865.5538), (-865.5538));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(24L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(B|");
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, (-1709));
      java.util.Vector<Choice> vector0 = new java.util.Vector<Choice>();
      xYSeries1.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries1.getY(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Year year0 = new Year(0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1731));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1231, 1231);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1231, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((double) 0, (Number) (byte)24);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, (byte)24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries((Comparable) integer0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 3);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      xYSeries1.data = list0;
      try { 
        xYSeries1.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries((Comparable) integer0, false, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) null);
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      xYSeries0.add(0.0, (double) 59, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries((Comparable) integer0, false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(1.0, (double) (byte)112);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Null 'series' not permitted.");
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.8, 1819.2346883872);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      xYSeries0.add(Double.NaN, (Number) 59, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, (double) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-865.5538), (-865.5538));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      java.util.Vector<Panel> vector0 = new java.util.Vector<Panel>();
      Panel panel0 = new Panel((LayoutManager) null);
      vector0.add(panel0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, (-1481.4));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      java.util.Vector vector0 = defaultTableModel0.getDataVector();
      xYSeries0.data = (List) vector0;
      xYSeries0.add(Double.NaN, (Number) 59, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, (double) 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-865.5538), (-865.5538));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      java.util.Vector<Panel> vector0 = new java.util.Vector<Panel>();
      Panel panel0 = new Panel((LayoutManager) null);
      vector0.add(panel0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      Number[][] numberArray0 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset0, tableOrder0, 84);
      List list0 = categoryToPieDataset0.getKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.add(0.0, 0.0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "java.net.URL", true, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (byte)12, (Number) (byte)126);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      double[][] doubleArray0 = new double[7][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset0, tableOrder0, 836);
      List list0 = categoryToPieDataset0.getKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) (byte)24);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 0.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.add((double) 1, (double) 53, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(1.0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(Double.NaN, (Number) 59, false);
      int int0 = xYSeries0.indexOf(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add((Number) 0, (Number) 59);
      int int0 = xYSeries0.indexOf(0);
      assertEquals(0, int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.add(0.0, 0.0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(Double.NaN, 3218.870924306911, true);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem1 = xYSeries0.getDataItem(2);
      assertSame(xYDataItem0, xYDataItem1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate(24L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "(B|");
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-221.1012303024473));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-221.1012303024473));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries((Comparable) integer0, false, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(0.0, (-397.8));
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Year year0 = new Year(53);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(9999, (-2));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.add((Number) (-9999), (Number) 9999, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Year year0 = new Year(53);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      XYSeries xYSeries1 = new XYSeries((Comparable) year0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(9999, (-2));
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Year year0 = new Year(53);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(9999, (-2));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.setDescription("1{?m");
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      boolean boolean0 = xYSeries0.equals("3@J~uKi+h.6F3");
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Locale locale0 = Locale.UK;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition((-344));
      Date date0 = mockSimpleDateFormat0.parse("\"wP(Ru", parsePosition0);
      Second second0 = new Second(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((double) 0, (double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-344), (-344));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Year year0 = new Year(53);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(9999, (-2));
      xYSeries1.setMaximumItemCount(53);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(53, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-221.1012303024473));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(0.0, (Number) null, false);
      xYSeries0.toArray();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "", true, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(59, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 59
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(Double.NaN, 3218.870924306911, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(0, 20);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-865.5538), (-865.5538));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1153), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      xYSeries0.delete(836, (-753));
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.add((double) 1, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.add(0.0, 0.0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((Number) 9999, (Number) (-9999), true);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Year year0 = new Year(53);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, true);
      xYSeries0.add((Number) 9999, (Number) 9999, true);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(0.0, (-397.8));
      xYSeries0.setMaximumItemCount(1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-250.912853254528));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate(400, 2402, 4367, 2402, 4367, 4367);
      Month month0 = new Month((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-865.5538), (-865.5538));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      xYSeries0.add(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(37, 2000, 52, 52, 2000);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1), 1128483922);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1733843290, (Number) 14);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-397.8), (-221.1012303024473));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((Number) (byte)13, (Number) 1668313716, true);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      xYSeries0.add(0.0, 0.0, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Null 'series' not permitted.");
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
  }
}
