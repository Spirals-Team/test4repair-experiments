/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 08:21:29 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.SpinnerNumberModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "AcceleratorKey", false, false);
      xYSeries0.add((double) (byte)12, 2716.0909825);
      xYSeries0.add((Number) (byte)12, (Number) (byte)12, false);
      xYSeries0.add(1.0, (double) (byte)12);
      xYSeries0.add(0.0, Double.NaN);
      xYSeries0.addOrUpdate(2447.60306744933, 1979.2843860375);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      xYSeries0.add((-4577.316), (Number) 0);
      xYSeries0.addOrUpdate((double) 0, Double.NaN);
      xYSeries0.add((Number) 0, (Number) 999);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      xYSeries0.add((double) Integer.MAX_VALUE, (Number) 2);
      xYSeries0.setMaximumItemCount(2);
      Integer integer0 = (Integer)xYSeries0.getY(0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-3668), 0, 2163, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      xYSeries0.addOrUpdate((double) 1, (double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 1, (Number) 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-48), (-3668), 0, 2163, (-48));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      xYSeries0.addOrUpdate((double) 1, (double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 2163);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-48), (-3668), 0, 2163, (-48));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      xYSeries0.addOrUpdate((double) 1, (double) 0);
      xYSeries0.add(Double.NaN, (Number) 1, false);
      xYSeries0.add(Double.NaN, (Number) 1, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3063), 990, 1, 1, (-3063));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.add((Number) 4, (Number) 4);
      xYSeries0.updateByIndex(0, 4);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(100, 120, 120);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true);
      xYSeries0.add((Number) 0, (Number) 999, false);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Week week0 = new Week(0, 2163);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(Double.NaN, (Number) 1, false);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 53);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      XYDataItem xYDataItem0 = new XYDataItem(701.9410937, 701.9410937);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((double) 1, (Number) 2);
      XYDataItem xYDataItem1 = xYSeries0.remove(1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(701.9410937, xYDataItem1.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Week week0 = new Week(0, 2163);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add((-2422.0), 0.0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals((-2422.0), xYDataItem0.getXValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-3668), 0, 2163, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      xYSeries0.add(Double.NaN, (Number) 1, false);
      int int0 = xYSeries0.indexOf(53);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      Integer integer0 = (Integer)xYSeries0.getY(0);
      assertEquals(0, (int)integer0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1573, 1573, (-975), (-695), 1573, 385);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      xYSeries0.add(0.0, (Number) (-9999));
      xYSeries0.add((double) 1573, (Number) (-9999), true);
      Integer integer0 = (Integer)xYSeries0.getY(1);
      assertEquals((-9999), (int)integer0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-3668), 0, 2163, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add((-1.0530418118432145), (double) (-3668), true);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0530418118432145), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-3668), 0, 2163, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      xYSeries0.addOrUpdate((double) 1, (double) 0);
      assertEquals(2, xYSeries0.getItemCount());
      
      Double double0 = (Double)xYSeries0.getX(1);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-48), (-3668), 0, 2163, (-48));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(999.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-3668), 0, 2163, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals((-3668.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Week week0 = new Week(0, 2163);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals((-3668.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      
      xYSeries0.add(Double.NaN, (Number) 1, false);
      xYSeries0.getDataItem(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Year year0 = new Year(0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 15, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(947, (-2112));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "AcceleratorKey", false, false);
      xYSeries0.add((double) (byte)12, 2727.597555475468);
      xYSeries0.addOrUpdate((double) (byte)12, 1.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1492), 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1045));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Null 'range' argument.", false, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(175);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.remove((-3349));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "org.jfree.data.xy.DefaultHighLowDataset", false);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-5415));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-33));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(100, 120, 120);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-236));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "AcceleratorKey", false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-637), (-637));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel((-1635), (-1635), (-1635), (-1635));
      Comparable comparable0 = spinnerNumberModel0.getMaximum();
      XYSeries xYSeries0 = new XYSeries((Comparable) comparable0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1635), (-2424));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(0.0, (double) (-3668), true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      xYSeries0.add((Number) 1, (Number) null);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-951), (-951));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 2640, (double) 999);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(96);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "cellRenderer");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 15, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "AcceleratorKey", false, false);
      xYSeries0.add(1.0, (double) (byte)12);
      // Undeclared exception!
      try { 
        xYSeries0.add(1.0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "AcceleratorKey", false, false);
      xYSeries0.add((Number) (byte)12, (Number) (byte)12, false);
      int int0 = xYSeries0.indexOf((byte)12);
      assertEquals(0, int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "AcceleratorKey", false, false);
      xYSeries0.add((double) (byte)12, 2701.2278735662894);
      int int0 = xYSeries0.indexOf(0.714);
      assertEquals((-1), int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1968L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 15, false, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 2640, (double) 999);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Week week0 = new Week(0, 2163);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = new Week(0, 2163);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Week week0 = new Week(0, 2163);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      xYSeries0.add((-4577.316), (Number) 0);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate(100, 120, 120);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1299, 0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(100, 120, 120);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      XYSeries xYSeries1 = new XYSeries((Comparable) minute0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.setDescription("Following");
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockDate mockDate0 = new MockDate(100, 120, 120);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      XYSeries xYSeries1 = new XYSeries((Comparable) minute0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(100, 120, 120);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      boolean boolean0 = xYSeries0.equals(mockDate0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      xYSeries0.add((double) 2, (Number) null);
      xYSeries0.toArray();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 1253, 1253);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, false);
      xYSeries0.add((Number) 1253.0, (Number) 1253.0, true);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 1253.0, (Number) 0.0);
      assertEquals(1253.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "AcceleratorKey", false, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.update(0, 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 0
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.addOrUpdate((double) 0, Double.NaN);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(0, 999);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      XYDataItem xYDataItem0 = new XYDataItem(701.9410937, 701.9410937);
      xYSeries0.add(xYDataItem0);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2810, 2810);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      xYSeries0.delete(1268, 0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      XYDataItem xYDataItem0 = new XYDataItem(701.9410937, 701.9410937);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((double) (-2664), (double) (-4272));
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-4272.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-2664.0), xYDataItem0.getXValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      XYDataItem xYDataItem0 = new XYDataItem(701.9410937, 701.9410937);
      xYSeries0.add(xYDataItem0);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 2, (Number) 2);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Point2D.Double[-114.0, -733.2092]", false, false);
      xYSeries0.getAutoSort();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Week week0 = new Week(0, 2163);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3063), 990, 1, 1, (-3063));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "$ename");
      XYDataItem xYDataItem0 = new XYDataItem(701.9410937, 701.9410937);
      xYSeries0.add(xYDataItem0);
      xYSeries0.toArray();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-3668), 0, 2163, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, (Number) 1, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Week week0 = new Week(0, 2163);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.add(Double.NaN, (Number) 1, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(1583.53052628422, (double) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.add((-4577.316), (Number) 0);
      xYSeries0.addOrUpdate((double) 0, Double.NaN);
      xYSeries0.update(0, 999);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "AcceleratorKey", false, false);
      xYSeries0.add((double) (byte)12, 2727.597555475468);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (byte)12, (double) (byte)12, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }
}
