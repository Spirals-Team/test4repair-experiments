/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 20:38:59 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockOffsetDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((double) 23, (-1.0));
      xYSeries0.addOrUpdate((double) 0, (-1.0));
      xYSeries0.addOrUpdate((-203.0210569601897), 0.0);
      xYSeries0.add((-1.0), 0.0);
      xYSeries0.add((Number) 0, (Number) null, false);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.add((double) 23, (-1.0));
      xYSeries0.addOrUpdate((double) 0, (-1.0));
      xYSeries0.add((-1.0), 0.0);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 53, (Number) null, false);
      xYSeries0.add((double) 53, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 53, (Number) null, false);
      xYSeries0.add(1831.711322, 452.7, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(1831.711322, (double) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(4, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 4
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.add((-2989.1365), (Number) 52, true);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals((-2989.1365), (double)double0, 0.01);
      
      xYSeries0.add((double) (byte)2, (Number) double0, true);
      XYDataItem xYDataItem0 = new XYDataItem((-2989.1365), (double) 52);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.update(double0, double0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 53, (Number) 53, true);
      xYSeries0.add((double) 53, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 2629);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((double) 23, (-1.0));
      xYSeries0.delete(0, 0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 53, (Number) null, false);
      xYSeries0.add(0.0, Double.NaN, true);
      xYSeries0.add((double) 53, (Number) 1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "selection-begin", false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte)8, (Number) 1852662636);
      xYSeries0.add(xYDataItem0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 53, (Number) 53, true);
      xYSeries0.add((double) 53, (Number) 1);
      xYSeries0.updateByIndex(1, 1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((double) 23, (-1.0));
      assertTrue(xYSeries0.getAutoSort());
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 23);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.add((-2989.1365), (Number) 52, true);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals((-2989.1365), (double)double0, 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) double0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(52.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.addOrUpdate(0.0, 445.28854822497397);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(445.28854822497397, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "invokesStopCellEditing", false, false);
      xYSeries0.add((double) 11, (Number) (byte)5, true);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(11.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(5.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false, true);
      xYSeries0.add((-886.978634794), (-886.978634794));
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-886.978634794), xYDataItem0.getYValue(), 0.01);
      assertEquals((-886.978634794), xYDataItem0.getXValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 53, (Number) 53, true);
      xYSeries0.add((double) 53, (Number) 1);
      xYSeries0.add(1831.711322, 452.7, true);
      int int0 = xYSeries0.indexOf(53);
      assertEquals(1, int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((double) 23, (-1.0));
      Double double0 = (Double)xYSeries0.getY(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.add((double) (byte)2, (Number) 52, true);
      Double double0 = (Double)xYSeries0.getX(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2.0, (double)double0, 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.add((double) 0, (Number) 52, true);
      xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.add((-1331.89115), (Number) 52, true);
      Double double0 = (Double)xYSeries0.getX(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1331.89115), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "UPPER_RIGHT_CORNER", false, false);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 53, (Number) 53, true);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((double) 23, (-1.0));
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.add((-2989.1365), (Number) 52, true);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(52.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-2989.1365), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Year year0 = new Year((-1557));
      Week week0 = new Week((-1557), year0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, (TimeZone) zoneInfo0);
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 9999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-3531));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 4, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-79));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1028));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Year year0 = new Year(0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-163));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-54), (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.addOrUpdate(0.0, 445.28854822497397);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, (double) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      xYSeries0.data = list0;
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, 2401.936);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3007, (-1), (-4779), 3007, 3007);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 999, (Number) 999, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2025L));
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1680L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "selection-begin", false, false);
      xYSeries0.add((double) 11, (Number) 3);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 11, (Number) (byte)5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 53, (Number) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.add((double) 53, (Number) null, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 53, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "selection-begin", false, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-1105.13), (Number) 893602898);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(1831.711322, 452.7, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      OffsetDateTime offsetDateTime0 = MockOffsetDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.from(offsetDateTime0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) zoneInfo0);
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 23, (-1.0));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3007, (-1), (-4779), 3007, 3007);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      int int0 = xYSeries0.indexOf(999);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((double) 23, (double) 0);
      int int0 = xYSeries0.indexOf(23);
      assertEquals((-1), int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, 2401.936);
      xYSeries0.add(xYDataItem0, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.setDescription(";-_YS%");
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 1);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 4, true);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      boolean boolean0 = xYSeries0.equals(week0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(355);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, true, true);
      xYSeries0.add((double) 3, (Number) 4, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.add((-2989.1365), (Number) 52, true);
      xYSeries0.createCopy(52, (byte)2);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-9999), 9999);
      xYSeries0.add((Number) 9999, (Number) (-9999));
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries1.add(xYDataItem0, false);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.addOrUpdate((Number) 256, (Number) null);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((double) 23, (-1.0));
      xYSeries0.addOrUpdate((double) 0, (-1.0));
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((double) 1, 2978.43228);
      xYSeries0.addOrUpdate(2978.43228, 2978.43228);
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.addOrUpdate((double) 1, 2978.43228);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 1, (Number) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 4, true);
      xYSeries0.add((Number) 4, (Number) (byte)1, true);
      xYSeries0.update(4, 2);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.add((double) 0, (Number) 52, true);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((Number) 9999, (Number) (-9999));
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((double) 23, (-1.0));
      XYDataItem xYDataItem0 = new XYDataItem((double) 23, 0.0);
      xYSeries0.add(xYDataItem0, true);
      XYDataItem xYDataItem1 = xYSeries0.getDataItem(1);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3007, (-1), (-4779), 3007, 3007);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, false);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 999, (Number) 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "selection-begin", false, false);
      xYSeries0.add((-1105.13), (Number) 3);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(23, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((double) 1, 2978.43228);
      xYSeries0.add((Number) 1, (Number) 4);
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.getItems();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.add((double) 53, (Number) null, true);
      xYSeries0.add((double) 53, (Number) 1);
      xYSeries0.createCopy(1, 1);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((-1646.0), (double) 0, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      Double double0 = (Double)xYSeries0.getY(0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3007, (-1), (-4779), 3007, 3007);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-9999), 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) (byte)2);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((double) 23, (-1.0));
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }
}
