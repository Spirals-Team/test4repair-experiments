/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 00:53:59 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Panel;
import java.util.Date;
import java.util.List;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 20, false);
      xYSeries0.add((double) 20, (double) 20, false);
      xYSeries0.add((Number) 1, (Number) 2);
      xYSeries0.add((-1112.0195021498), (Number) (byte)22);
      xYSeries0.add((Number) 1, (Number) 5, false);
      xYSeries0.addOrUpdate(Double.POSITIVE_INFINITY, (double) (byte)22);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, 0.0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) 1, (Number) 4);
      xYSeries0.add((Number) 1, (Number) 1, false);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(193, 13);
      xYSeries0.setMaximumItemCount(13);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(13, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      xYSeries0.add((-2605.993837604), (Number) 23);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.add(0.0, (Number) (-1));
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.add(0.0, (Number) (-1));
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      xYSeries0.update(1, 2958465);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.add((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, 0.0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(0.0, 0.0, false);
      xYSeries0.add((Number) 1, (Number) 4);
      xYSeries0.add((Number) 1, (Number) 1, false);
      xYSeries0.updateByIndex(4, 1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 4);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1977.34804282357), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      xYSeries0.add((double) 0, (Number) 0);
      xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, 0.0);
      xYDataItem0.setY((double) 1);
      xYSeries0.add((-1.0), (-1977.34804282357));
      xYSeries0.add(xYDataItem0);
      XYDataItem xYDataItem1 = xYSeries0.remove(1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(4.0, xYDataItem1.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.add(0.0, (Number) (-1));
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, 0.0);
      xYSeries0.add((-1.0), (-1977.34804282357));
      xYSeries0.add(xYDataItem0);
      XYDataItem xYDataItem1 = xYSeries0.remove(1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      xYSeries0.add((Number) 1, (Number) 4);
      xYSeries0.add((Number) 1, (Number) 1, false);
      int int0 = xYSeries0.indexOf(1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, 0.0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      xYDataItem0.setY((-1.0));
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(0.0, (double) 4, true);
      Double double0 = (Double)xYSeries0.getY(2);
      assertEquals((-1.0), (double)double0, 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.add((-3441.08024732), 0.0, true);
      Double double0 = (Double)xYSeries0.getY(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.add((Number) 1.0F, (Number) 1935897198);
      Integer integer0 = (Integer)xYSeries0.getY(0);
      assertEquals(1935897198, (int)integer0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.addOrUpdate((double) 59, (double) 59);
      xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      xYSeries0.addOrUpdate((Number) 0.0, (Number) 1986618743);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      xYSeries0.add((double) Integer.MAX_VALUE, 0.0, true);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(2.147483647E9, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 59, (Number) 59);
      xYDataItem0.setY((Number) 0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.getDataItem(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.add(0.0, (Number) (-1));
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "PasswordField");
      xYSeries0.add((double) 0, (Number) 1196573017, false);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1.196573017E9, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 3);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 2);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      xYSeries0.add(0.0, 0.0);
      xYSeries0.addOrUpdate((Number) 0.0, (Number) 1986618743);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      xYSeries0.addOrUpdate((double) 0, Double.NEGATIVE_INFINITY);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.add((double) 59, (double) 0);
      xYSeries0.addOrUpdate((double) 59, (double) 59);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Null 'item' argument.");
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1577), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Month month0 = new Month(3, 3);
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-290));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-418));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-2130), (-688));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(2958465, (-1122));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.addOrUpdate(1.0, (double) 59);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-2130), (-2130));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1524), (-1524), 52);
      Month month0 = new Month((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(1536, 1536);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) 16, (Number) 26);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 4, (-1977.34804282357));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYSeries xYSeries1 = xYSeries0.createCopy((-2245), 11);
      XYDataItem xYDataItem0 = new XYDataItem((double) (-2245), (double) 59);
      double[][] doubleArray0 = new double[6][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.add(xYDataItem0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 2, (Number) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      xYSeries0.addOrUpdate((Number) 2.147483647E9, (Number) 2);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) Integer.MAX_VALUE, 0.0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      xYSeries0.addOrUpdate((Number) 32770, (Number) 1986618743);
      int int0 = xYSeries0.indexOf(32770);
      assertEquals(0, int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "`8");
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 2, (double) 4);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1110589745, (Number) 0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      xYSeries0.addOrUpdate((double) 1, (-1977.34804282357));
      xYSeries0.add((Number) 1, (Number) 4);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 1);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(4.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, 0.0);
      xYSeries0.add((double) 4, (-1977.34804282357));
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 59);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4163), (-4163), (-4163), (-4163), (-4163), 1733);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(1733);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1733, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, true);
      xYSeries0.add(25.526296553608, (Number) (-1));
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      xYSeries0.add((double) 0, (Number) 0);
      XYSeries xYSeries1 = xYSeries0.createCopy(193, 90);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(193, 13);
      xYSeries1.setMaximumItemCount(23);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(23, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(23, 3);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.setDescription("Null 'x' argument.");
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      Panel panel0 = new Panel();
      boolean boolean0 = xYSeries0.equals(panel0);
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4163), (-4163), (-4163), (-4163), (-4163), 1733);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 59, (Number) 59);
      xYSeries0.add(xYDataItem0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 3);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.add(0.0, (Number) (-1));
      xYSeries0.toArray();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      xYSeries0.addOrUpdate((Number) integer0, (Number) null);
      xYSeries0.toArray();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4163), (-4163), (-4163), (-4163), (-4163), 1733);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 59, (Number) 59);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 59, (Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(2, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 2
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.addOrUpdate((double) 59, (double) 59);
      assertTrue(xYSeries0.getAutoSort());
      
      xYSeries0.update(59, 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, true);
      xYSeries0.add(25.526296553608, (Number) (-1));
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.clear();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate(844, 57, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.delete(151, 1);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, true);
      xYSeries0.add(25.526296553608, (Number) (-1));
      xYSeries0.setMaximumItemCount(2);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      xYSeries0.add((double) 1, (Number) 3);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      xYSeries0.addOrUpdate((Number) 32770, (Number) 1986618743);
      Integer integer0 = (Integer)xYSeries0.getX(0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      xYSeries0.addOrUpdate((double) 59, (double) 59);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.add(25.526296553608, (Number) (-1));
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "", false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4163), (-4163), (-4163), (-4163), (-4163), 1733);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(4, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "PasswordField");
      xYSeries0.getItems();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1338);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.add((double) 2, (Number) (-1));
      xYSeries0.addOrUpdate((-1.0), (double) 6);
      assertEquals(2, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(1);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, true);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4163), (-4163), (-4163), (-4163), (-4163), 1733);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(Double.NaN, Double.NaN, true, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false, false);
      xYSeries0.add(0.0, 0.0);
      int int0 = xYSeries0.indexOf(32770);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1), int0);
  }
}
