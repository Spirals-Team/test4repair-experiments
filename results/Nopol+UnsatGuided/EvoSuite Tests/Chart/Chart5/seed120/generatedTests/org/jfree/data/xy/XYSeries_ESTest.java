/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 09:53:25 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.KeyStroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      xYSeries0.addOrUpdate((-1801.219519), (double) 2);
      xYSeries0.addOrUpdate((Number) 927157330, (Number) 9);
      xYSeries0.add((Number) 1684371059, (Number) 1, true);
      xYSeries0.add((double) 2, 2012.45639, true);
      xYSeries0.add((double) 2, 0.8);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries0.setMaximumItemCount(0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1745, 0, 4);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, true);
      xYSeries0.add((double) 0, 0.0);
      xYSeries0.addOrUpdate(1134.311558972, 1134.311558972);
      xYSeries0.addOrUpdate(1134.311558972, (double) (-2611));
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      xYSeries0.addOrUpdate((-1801.219519), (double) 2);
      xYSeries0.add((double) 2, 2012.45639, true);
      xYSeries0.update(2, (byte)11);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Year year0 = new Year(5001);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, false);
      xYSeries0.setMaximumItemCount(9999);
      assertEquals(9999, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 16, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 5, (Number) 1);
      xYSeries0.add(xYDataItem0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.remove(0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1745, 0, 4);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, true);
      xYSeries0.addOrUpdate(1134.311558972, 1134.311558972);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(1134.311558972, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1134.311558972, xYDataItem0.getXValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.add((Number) 0, (Number) 0, true);
      xYSeries0.add((Number) 0, (Number) 999, true);
      xYSeries0.indexOf(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1745, 0, 4);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, true);
      xYSeries0.addOrUpdate(1134.311558972, 1134.311558972);
      Double double0 = (Double)xYSeries0.getY(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1134.311558972, (double)double0, 0.01);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1745, 0, 4);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, true);
      xYSeries0.addOrUpdate(1134.311558972, 1134.311558972);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1134.311558972, (double)double0, 0.01);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 1178815570);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.getDataItem(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      xYSeries0.addOrUpdate((-1801.219519), (double) 2);
      xYSeries0.add((double) 2, 2012.45639, true);
      xYSeries0.add((-1801.219519), 0.8);
      xYSeries0.updateByIndex(2, (-1));
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(2);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(2.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.add((double) (-4283), (Number) 1650877472);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(1.650877472E9, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-4283.0), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1180), 4204);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 23);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 1178815570);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1715, 0, (-21));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.addOrUpdate((double) 0, (double) 0);
      xYSeries0.addOrUpdate((double) 0, (double) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-2260), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "4 >FqeW'Hc2d", true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2002));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1382));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, (-2611), (-11), (-3));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Couldn't clone XYDataItem!");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(1348);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1606));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Year year0 = new Year((int) (byte)23);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(1649957210);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1649957210, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1027));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "X-value already exists.");
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1509));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(23, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1745, 0, 4);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1180), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      xYSeries0.addOrUpdate((-1801.219519), (double) 2);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-17), 349);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1715, 0, (-21));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(1134.311558972, 1134.311558972);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Year year0 = new Year(2449);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      XYSeries xYSeries1 = xYSeries0.createCopy(Integer.MAX_VALUE, (-476));
      List list0 = xYSeries0.getItems();
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.add((Number) 6, (Number) 9999, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "select-all");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 59, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 4, (Number) 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Year year0 = new Year(0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 1178815570);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, 1943.1185388, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 64, true, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 64, 0.0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 2, 2012.45639, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) (byte)17);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1745, 0, 4);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, true);
      xYSeries0.addOrUpdate(1134.311558972, 1134.311558972);
      int int0 = xYSeries0.indexOf(1886545200);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 23);
      int int0 = xYSeries0.indexOf(0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add(0.0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1715, 1715, (-21), 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.addOrUpdate(1134.311558972, 1134.311558972);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(1134.311558972, (double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2134.0818822249394), 1.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 4);
      xYSeries0.add(xYDataItem0, true);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      xYSeries0.addOrUpdate((-1801.219519), (double) 2);
      xYSeries0.add((double) 2, 2012.45639, true);
      xYSeries0.add((-1801.219519), 0.8);
      assertEquals(3, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(2);
      xYSeries0.addOrUpdate((double) 8, (-1.0));
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      xYSeries0.addOrUpdate((-1801.219519), (double) 2);
      xYSeries0.add((double) 2, 2012.45639, true);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      xYSeries0.add((-1801.219519), 0.8);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(2);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(2012.45639, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1132), (-1132), 0, 0, (-306), (-306));
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(zoneId0);
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.addOrUpdate((double) 0, (double) (-1132));
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((-4361.098371862039), (double) 0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 1178815570);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      xYSeries0.add((Number) 1, (Number) 1);
      xYSeries0.remove((Number) 1);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.add((Number) 0, (Number) 0, true);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1745, 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), 0, 1745, 0, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries0.addOrUpdate((Number) 0, (Number) 23);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries0.setMaximumItemCount(0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(2, 8, true);
      boolean boolean0 = xYSeries0.equals(keyStroke0);
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      XYSeries xYSeries1 = xYSeries0.createCopy(23, 1054);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 23);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 23);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add(0.0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), (-2611), (-2611), 1715, 0, (-21));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.addOrUpdate((-1774.914896252244), (-1774.914896252244));
      xYSeries0.addOrUpdate((-1774.914896252244), (double) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2611), 4, 4, (-2611), 4, 4);
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1132), (-1132), 0, 0, (-306), (-306));
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(zoneId0);
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(1, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 0);
      assertTrue(xYSeries0.getAutoSort());
      
      xYSeries0.update(0, 999);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add(0.0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.delete(0, 0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((Number) 23, (Number) 23, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.add((double) 23, (Number) 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Couldn't clone XYDataItem!");
      // Undeclared exception!
      try { 
        xYSeries0.remove(1348);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1348, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, 0.0, 0.0, 0.0, 1138.948966253, 2668.0);
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      oHLCDataItemArray0[3] = oHLCDataItemArray0[1];
      XYSeries xYSeries0 = new XYSeries((Comparable) oHLCDataItemArray0[3], false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2);
      xYSeries0.addOrUpdate((-1801.219519), (double) 2);
      xYSeries0.add((double) 2, 2012.45639, true);
      xYSeries0.add((-1801.219519), 0.8);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(2, 349);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(23, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-3588));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      xYSeries0.add((double) (-809), (Number) 1, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.add(0.0, (Number) (byte)12);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 1178815570);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.setDescription("");
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
  }
}
