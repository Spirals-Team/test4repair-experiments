/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 08:24:30 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.addOrUpdate(11.208810725706071, (double) 2);
      xYSeries0.add((double) 0, (Number) 1835360627, true);
      xYSeries0.add((double) (-1706), (Number) 4, true);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add((double) (-2406), Double.NaN);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((double) 0, (double) 999, false);
      xYSeries0.add(1713.4, (double) 0, false);
      assertFalse(xYSeries0.getAutoSort());
      
      xYSeries0.addOrUpdate(1713.4, 1713.4);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.addOrUpdate(0.0, (double) 2);
      xYSeries0.add((double) (-2406), Double.NaN);
      xYSeries0.update(0, (byte)112);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.add((double) (-1706), (Number) 4, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.addOrUpdate((double) (-1), (double) 2);
      xYSeries0.add((double) 0, (Number) 1835360627, true);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1706), (-2416), (-1503));
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false, true);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((double) 0, (double) 2);
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1735, 950, 0, 0, 2080);
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true);
      xYSeries0.add((Number) 9999, (Number) 9999, true);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((Number) 8, (Number) 1835955314);
      xYSeries0.updateByIndex(0, 0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, false);
      xYSeries0.add((double) 0, (Number) 0);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.add((Number) 1, (Number) 4);
      xYSeries0.add((Number) 4, (Number) 4);
      xYSeries0.remove(1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((double) 0, (double) 999, false);
      xYSeries0.add(1713.4, (double) 0, false);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(0.0, (double)double0, 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) double0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
      
      int int0 = xYSeries0.indexOf(double0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      xYSeries0.add(1191.779802, Double.NaN);
      Double double0 = (Double)xYSeries0.getY(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((double) 0, (double) 999, false);
      xYSeries0.add(1713.4, (double) 0, false);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      
      Double double0 = (Double)xYSeries0.getY(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1706), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.add((double) (-2406), Double.NaN);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-2406.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      xYSeries0.add((double) 1, (Number) 2, true);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, (double)double0, 0.01);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((double) 0, (double) 999, false);
      xYSeries0.remove(0);
      xYSeries0.add(1713.4, (double) 0, false);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(1713.4, (double)double0, 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) double0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1706), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.add((double) (-2406), Double.NaN);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false, true);
      xYSeries0.addOrUpdate((Number) 3, (Number) 1);
      xYSeries0.addOrUpdate(299.4018, (double) 0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(299.4018, xYDataItem0.getXValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1534), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.add((double) 0, (Number) (-1), true);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1090, (-2));
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1706), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.add((double) (-2406), Double.NaN);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.add((Number) 1, (Number) 4);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Year year0 = new Year(32);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-9999), (-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4684), 0, (-4684), (-4684), (-4684), 872);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Day day0 = new Day((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Year year0 = new Year((-983));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-9999));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) null);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((long) (-1), 662L);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1722), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Week week0 = new Week(2000, (-788));
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-788));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "W<E|]n`[", true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-4032));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "h46$z");
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-2552));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.delete((-482), (-6));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-9999), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1090, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3407, 3407, 3407);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "W<E|]n`[", 1, 0, 0, 1319, 0, 0, 0, 3407, 1319);
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.add((Number) 59, (Number) 59);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-5), 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 4, (Number) 12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, (-703.23331295));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Week week0 = new Week(493, 493);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      xYSeries0.addOrUpdate((-1356.36), (-8.0));
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-1356.36), 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 2);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 5, (Number) 4);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.add((Number) 1, (Number) 4);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 1, (Number) 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, false);
      xYSeries0.add((double) 4, (Number) (byte)7);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 4, (Number) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, 1.7976931348623157E308);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 5, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1624);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (double) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((double) 0, (double) 999, false);
      xYSeries0.add(1713.4, (double) 0, false);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(0.0, (double)double0, 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) double0);
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
      
      int int0 = xYSeries0.indexOf(double0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((double) 0, (double) 999, false);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(0.0, (double)double0, 0.01);
      
      int int0 = xYSeries0.indexOf(double0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 1, (Number) 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      Double double0 = (Double)timeSeriesDataItem0.getValue();
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) double0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 59, (Number) 0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1722), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1722), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.addOrUpdate(11.208810725706071, (double) 2);
      xYSeries0.add((double) 0, (Number) 1835360627, true);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.addOrUpdate(11.208810725706071, (double) 2);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYSeries xYSeries1 = new XYSeries((Comparable) fixedMillisecond0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, false);
      XYSeries xYSeries1 = new XYSeries((Comparable) fixedMillisecond0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      XYSeries xYSeries1 = new XYSeries((Comparable) fixedMillisecond0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      boolean boolean0 = xYSeries0.equals(quarter0);
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1722), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, (-1722));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.addOrUpdate(0.0, (double) 2);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((double) 0, (double) 59);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, false);
      xYSeries0.add((double) 0, (Number) 0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 999);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1706), (-2406), (-1503));
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.update(1200, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1200
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.addOrUpdate(0.0, (double) 2);
      assertTrue(xYSeries0.getAutoSort());
      
      xYSeries0.update(0, (byte)112);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1706), (-2406), (-1503));
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false, true);
      xYSeries0.add((-758.071), 0.0);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.clear();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.addOrUpdate(0.0, (double) 2);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add((double) (-2406), Double.NaN);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.delete(2, 2);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      Double double0 = (Double)timeSeriesDataItem0.getValue();
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) double0);
      xYSeries0.add(xYDataItem0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.add((Number) 1, (Number) 4);
      xYSeries0.add((Number) 4, (Number) 4);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(1);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2406), (-1706), (-1706), (-2406), (-1503), (-1706));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, false);
      xYSeries0.addOrUpdate(0.0, (double) 2);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("u", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      xYSeries0.add((double) 0, (double) 59);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1722), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.addOrUpdate(0.0, (double) 2);
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      XYSeries xYSeries1 = new XYSeries((Comparable) xYDataItem0, true, true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.add((Number) 1, (Number) 4);
      xYSeries0.toArray();
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.getItems();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1722), (-2406), (-1503));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      Byte byte0 = new Byte((byte) (-67));
      xYSeries0.add((double) (-1), (Number) byte0, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
  }
}
