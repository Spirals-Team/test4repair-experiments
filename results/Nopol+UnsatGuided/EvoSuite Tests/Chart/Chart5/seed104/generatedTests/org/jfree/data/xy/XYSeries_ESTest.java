/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 04:24:15 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.add(0.0, 0.0, false);
      xYSeries0.addOrUpdate((double) 0, (double) (-2332));
      xYSeries0.add(0.0, 1.0, false);
      xYSeries0.add(2154.8251, (double) 0, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries0.setMaximumItemCount(0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 2, false);
      xYSeries0.setMaximumItemCount(2);
      xYSeries0.add((Number) 0, (Number) 0, false);
      xYSeries0.addOrUpdate((double) 0, (double) 0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.add(2154.8251, (double) 0, false);
      xYSeries0.addOrUpdate(2154.8251, (double) 0);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(59, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 59
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.addOrUpdate((-286.0971563), (double) 4);
      xYSeries0.addOrUpdate((Number) 4, (Number) 4);
      xYSeries0.update(4, 1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 2491);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.add((double) (-3188), (-986.205151054952), false);
      xYSeries0.add((double) 0, 345.9);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((double) 59, 0.0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add((double) 59, (Number) 21);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.updateByIndex(0, 59);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2506, 2506, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      xYSeries0.add(0.0, 1.0, false);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.addOrUpdate((Number) minute0.FIRST_MINUTE_IN_HOUR, (Number) 0);
      xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((double) 59, 0.0);
      assertTrue(xYSeries0.getAutoSort());
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 59);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2483, 2483, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(0.0, 0.0, false);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.indexOf(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.add((double) (-3188), (-986.205151054952), false);
      Double double0 = (Double)xYSeries0.getY(0);
      assertEquals((-986.205151054952), (double)double0, 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.addOrUpdate((double) 0, 2255.3555909348);
      xYSeries0.add(xYDataItem0, true);
      Integer integer1 = (Integer)xYSeries0.getY(1);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(400, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.getX(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add(1.0, (Number) 999, false);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, 2491);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(0.0, 2154.8251, false);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(2154.8251, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.addOrUpdate((Number) minute0.FIRST_MINUTE_IN_HOUR, (Number) 0);
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      Instant instant0 = MockInstant.ofEpochMilli((-2040L));
      Date date0 = Date.from(instant0);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 0.0, 2864.171120855, (-83.535313132), (double) 1, (-83.535313132));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItemArray0[0];
      XYSeries xYSeries0 = new XYSeries((Comparable) oHLCDataItemArray0[3], false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false, false);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 29);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(776, 776);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-115), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      Object[][] objectArray0 = new Object[9][9];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(1134L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2570));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      Integer integer0 = new Integer(1935897188);
      Object[][] objectArray0 = new Object[2][8];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 1338);
      List list0 = categoryToPieDataset0.getKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Year year0 = new Year(1117);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      Integer integer0 = new Integer(1935897188);
      Object[][] objectArray0 = new Object[2][8];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      Object[][] objectArray0 = new Object[2][8];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-122));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      Object[][] objectArray0 = new Object[2][8];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-133));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1489.0), 0.0, true, false);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(995, 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.add((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2506, 2506, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(0.0, 0.0, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-2332), (-2332));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      Object[][] objectArray0 = new Object[2][8];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) 1482250784);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.add((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, (double) 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(665.5, (Number) minute0.LAST_MINUTE_IN_HOUR, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYSeries xYSeries1 = xYSeries0.createCopy(23, 2062);
      List list0 = xYSeries1.getItems();
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.add((double) 23, Double.NaN);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      xYSeries0.addOrUpdate((Number) 1162038354, (Number) null);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      xYSeries0.add(xYDataItem0);
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.addOrUpdate((Number) minute0.FIRST_MINUTE_IN_HOUR, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (-474.0));
      xYSeries0.add(xYDataItem0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) 1482250784);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
      
      Integer integer1 = (Integer)xYSeries0.getY(1);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "cellRenderer", true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2483, 2483, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Year year0 = new Year(1117);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      Object[][] objectArray0 = new Object[7][3];
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) xYSeries0;
      objectArray0[3] = objectArray1;
      JTable jTable0 = null;
      try {
        jTable0 = new JTable(objectArray0, objectArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, 2491);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.add(0.0, 0.0, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add((double) 1297L, (Number) 6, true);
      XYSeries xYSeries1 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      XYSeries xYSeries1 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries0.setMaximumItemCount(0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      xYSeries0.setKey(mockDate0);
      XYSeries xYSeries1 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      XYSeries xYSeries1 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(boolean0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      boolean boolean0 = xYSeries0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add(0.0, (Number) null);
      xYSeries0.toArray();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, 2491);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      int int0 = xYSeries0.indexOf(0);
      assertEquals((-1), int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) minute0.LAST_MINUTE_IN_HOUR, (Number) 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.addOrUpdate((Number) 4, (Number) 4);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(4, 1);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((double) 59, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2483, 2483, (-2332));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.clear();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-304), (-304));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2635L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.delete(859, 443);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Year year0 = new Year(1117);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((-1057.2991053464018), (Number) (-9999));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) 1482250784);
      xYSeries0.addOrUpdate((double) 0, 2255.3555909348);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((double) 59, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, 0.0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1297L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(21, minute0.FIRST_MINUTE_IN_HOUR);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2491, 2491, 2491);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte)4, (Number) 1886545201);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((double) 59, 0.0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }
}
