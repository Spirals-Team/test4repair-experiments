/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 22:32:09 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      xYSeries0.addOrUpdate((double) 0, (double) 0);
      xYSeries0.addOrUpdate((Number) 127, (Number) null);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      xYSeries0.add((double) 0, (Number) 1936744803, true);
      xYSeries0.add((Number) 1, (Number) 6, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries1.setMaximumItemCount(53);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(53, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 14);
      xYSeries0.add((double) 14, (Number) 1668441193);
      xYSeries0.addOrUpdate(0.0, (double) 1668441193);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 14, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((Number) 520, (Number) 0);
      xYSeries0.addOrUpdate((Number) 0, (Number) (byte)13);
      xYSeries0.update(0, 8);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 15);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(59, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(3, minute0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.add((Number) 0, (Number) 1886610481);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 10, (Number) 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      xYSeries0.addOrUpdate((double) 1, (double) 1);
      xYSeries0.add((double) 10, (Number) 1936744803, true);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.add(537.809476611, (Number) null);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.add(0.0, (Number) 0, false);
      xYSeries0.add((double) 0, 0.0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(157);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 157, 2999.38983451799);
      xYSeries0.add(xYDataItem0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.add(0.0, (Number) 0, false);
      assertTrue(xYSeries0.getAutoSort());
      
      xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      xYSeries0.remove((Number) 1);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.add(0.0, (Number) 0, false);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      XYDataItem xYDataItem0 = new XYDataItem(5827.126934985, (double) 4);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.add((Number) 59, (Number) 59, false);
      int int0 = xYSeries0.indexOf(59);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 10, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      xYSeries0.addOrUpdate((double) 0, (-377.900051));
      Double double0 = (Double)xYSeries0.getY(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-377.900051), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      XYDataItem xYDataItem0 = new XYDataItem(5827.126934985, (double) 4);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.getX(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      xYSeries0.addOrUpdate(884.614394404562, (-1300.0));
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 10, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      xYSeries0.addOrUpdate((double) 0, (-377.900051));
      xYSeries0.add((-377.900051), (Number) 0, true);
      assertEquals(2, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertFalse(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(Integer.MAX_VALUE, 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "messageType", true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-2118), 3177);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-8), (Number) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Year year0 = new Year((-650));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-9999));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(65536);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-2268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(795, 795, 0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-4739));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-2227));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-6), 2573);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 507);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 10, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      xYSeries0.addOrUpdate((double) 0, (-377.900051));
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1), 493);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 1);
      List list0 = categoryToPieDataset0.getKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(1.0, (-377.52058));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 14);
      xYSeries0.add((double) 14, (Number) 1668441193);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 14, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 10, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 1110589745, (Number) 6, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 10, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-377.900051), (Number) 1936744803, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 14);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 14, (Number) 8);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      int int0 = xYSeries0.indexOf(59);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      XYDataItem xYDataItem0 = new XYDataItem(5827.126934985, (double) 4);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 14);
      xYSeries0.add((double) 14, (Number) (-1));
      XYDataItem xYDataItem0 = new XYDataItem((double) 14, (double) (-1));
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(157);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 157, 2999.38983451799);
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 10, (Number) 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.add((Number) 59, (Number) 59, false);
      xYSeries0.indexOf(59);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1080L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-178));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(193, minute0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "0Z[o");
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      xYSeries0.addOrUpdate((double) 0, (double) 0);
      xYSeries0.addOrUpdate((Number) 127, (Number) null);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.add((-431.4), Double.NaN);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      boolean boolean0 = xYSeries0.equals(integer0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries0.setMaximumItemCount(1668441193);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1668441193, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.add(0.0, (Number) 4, false);
      xYSeries0.updateByIndex(0, (Number) null);
      xYSeries0.toArray();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(193, minute0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((-907.1542243991212), (double) 59);
      xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) (byte)13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3204, 3204, (-3770), 3204, 3204);
      Month month0 = new Month((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      // Undeclared exception!
      try { 
        xYSeries0.update((byte)115, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 115
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.update(0, 8);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.add((Number) 53, (Number) 2);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.delete(Integer.MAX_VALUE, 59);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem(5827.126934985, (double) 4);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 1, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.add(0.0, (Number) 4, false);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Second second0 = new Second((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(193, minute0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      xYSeries0.addOrUpdate((-907.1542243991212), (double) 59);
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, (Number) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0);
      xYSeries0.add(0.0, (Number) 4, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 14);
      xYSeries0.add((double) 14, 0.0, true);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(193, minute0);
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.setDescription(";p`-*");
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }
}
