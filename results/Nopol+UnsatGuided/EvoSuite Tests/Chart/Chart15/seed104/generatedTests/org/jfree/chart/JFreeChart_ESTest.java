/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 15:27:06 GMT 2017
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JLayeredPane;
import javax.swing.border.SoftBevelBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChart_ESTest extends JFreeChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 1820.34042053, (-2392.511107050288), chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setPadding(multiplePiePlot0.DEFAULT_INSETS);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15, chartRenderingInfo0);
      assertEquals(15, bufferedImage0.getTileHeight());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(31, (-2141082801));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(integer0, integer0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) waferMapPlot0);
      jFreeChart0.setBackgroundImageAlignment(31);
      assertEquals(31, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      jFreeChart0.setBackgroundImageAlignment(10);
      jFreeChart0.setBackgroundImageAlignment(0);
      assertEquals(0, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("uEg(&RENd2MG_r ", (Comparable) 1.0F, (double) 1.0F, 1166.126909815);
      Color color0 = (Color)categoryPointerAnnotation0.getPaint();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      jFreeChart0.setBackgroundPaint(color0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(31, (-2141082801));
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(integer0, integer0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, waferMapRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend((-2758));
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(legendTitle0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("wtb8#E3f", (Plot) thermometerPlot0);
      TextTitle textTitle0 = new TextTitle("", jFreeChart0.DEFAULT_TITLE_FONT);
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent((Title) textTitle0);
      jFreeChart0.titleChanged(titleChangeEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) multiplePiePlot0);
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent((Object) multiplePiePlot0, jFreeChart0, (-163), 15);
      jFreeChart0.notifyListeners(chartProgressEvent0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) 10, (-1394.6167845119428), (double) 2, (double) 15);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle0);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(10, bufferedImage0.getHeight());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNotNull(legendTitle0);
      
      jFreeChart0.addLegend(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'bar' argument.", (Plot) compassPlot0);
      assertTrue(jFreeChart0.isNotify());
      
      jFreeChart0.setNotify(false);
      boolean boolean0 = jFreeChart0.isNotify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      jFreeChart0.getTitle();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      List list0 = jFreeChart0.getSubtitles();
      assertEquals(0, list0.size());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      jFreeChart0.getSubtitleCount();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getLegend();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Font font0 = Font.decode("Null 'padding' argument.");
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'padding' argument.", font0, (Plot) xYPlot0, false);
      jFreeChart0.getBackgroundPaint();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      FlowArrangement flowArrangement0 = new FlowArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) multiplePiePlot0, (Arrangement) flowArrangement0, (Arrangement) flowArrangement0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      jFreeChart0.drawTitle(compositeTitle0, sunGraphics2D0, rectangle2D_Double0, true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(10, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      DateTitle dateTitle0 = new DateTitle(0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      jFreeChart0.drawTitle(dateTitle0, sunGraphics2D0, rectangle2D_Double0, true);
      assertEquals((-61.84375), rectangle2D_Double0.height, 0.01);
      assertEquals((-61.84375), rectangle2D_Double0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      List list0 = keyToGroupMap0.getGroups();
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.title.Title
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.handleClick(10, (-1), (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.PiePlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedRangeXYPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      DateTitle dateTitle0 = new DateTitle(0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1108.0, 2183.01901, 1.0E-8, 2473.28042);
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle(dateTitle0, (Graphics2D) null, rectangle2D_Double0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Font font0 = thermometerPlot0.getValueFont();
      JFreeChart jFreeChart0 = new JFreeChart("", font0, (Plot) thermometerPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 1, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) null, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 843271250, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(4144, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (4144) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("t]", (Font) null, (Plot) piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      PeriodAxis periodAxis0 = new PeriodAxis("LjjD|Bb@z");
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer(500);
      XYPlot xYPlot0 = new XYPlot((XYDataset) timePeriodValuesCollection0, (ValueAxis) null, (ValueAxis) periodAxis0, (XYItemRenderer) xYSplineAndShapeRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("LjjD|Bb@z", font0, (Plot) xYPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-334), 919, 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1799), (-348), 42, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 42
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("}]", (Font) null, (Plot) piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, 10, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, (-1712));
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, 1218.0, 133.3202789982, (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2145384445, 2147483646, 1138.4428758557, (double) 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 1891, Double.POSITIVE_INFINITY, (double) 10, (ChartRenderingInfo) null);
        fail("Expecting exception: InternalError");
      
      } catch(InternalError e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1266), (-813), (double) 10, (double) 1.0F, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1266) and height (-813) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("}]", (Font) null, (Plot) piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, (double) 10, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(479, 1073741824);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1762), 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1762) and height (10) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("t]", (Font) null, (Plot) piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.addProgressListener(chartPanel0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(300, 836, 7.0, (double) 1.0F, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(836, bufferedImage0.getTileHeight());
      assertEquals(300, bufferedImage0.getTileWidth());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(3, bufferedImage0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.addProgressListener((ChartProgressListener) null);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("8x~>|l5PvH&?%Gw7GY", (Plot) combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.setTextAntiAlias(false);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("8x~>|l5PvH&?%Gw7GY", (Plot) combinedRangeCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.addChangeListener(chartPanel0);
      jFreeChart0.setNotify(true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(Integer.MAX_VALUE);
      JCheckBox jCheckBox0 = new JCheckBox((String) null, true);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jCheckBox0, (-1), 0, 2145721971, 2143560855);
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.location(1, 0);
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle0, (Point2D) point0, chartRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(10, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(">hF.D1", (Plot) combinedRangeCategoryPlot0);
      jFreeChart0.clearSubtitles();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) thermometerPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      jFreeChart0.getSubtitle(0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 1042.4802955711507, 1042.4802955711507, 1924.45217985362);
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPointerAnnotation0.DEFAULT_FONT, (Plot) ringPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(legendTitle0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      TextTitle textTitle0 = new TextTitle();
      jFreeChart0.setTitle(textTitle0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart(":b", (Font) null, (Plot) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      int int0 = jFreeChart0.getSubtitleCount();
      assertEquals(0, int0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.axis.PeriodAxisLabelInfo", (Plot) combinedRangeXYPlot0);
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertFalse(boolean0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.titleChanged((TitleChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.plotChanged((PlotChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      jFreeChart0.removeSubtitle((Title) null);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) thermometerPlot0);
      jFreeChart0.fireChartChanged();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.removeLegend();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertNotSame(jFreeChart1, jFreeChart0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, (Plot) piePlot3D0, true);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(boolean0);
      assertTrue(jFreeChart1.isNotify());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.equals(multiplePiePlot0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(boolean0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.notifyListeners((ChartChangeEvent) null);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.removeChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("$[/xZ@+y~K", (Plot) combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      DateTitle dateTitle0 = new DateTitle(0);
      jFreeChart0.addSubtitle((Title) dateTitle0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      assertEquals(2, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlpha(680);
      jFreeChart0.setBackgroundImageAlpha(1.0F);
      assertEquals(1.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) thermometerPlot0);
      jFreeChart0.setBackgroundImageAlpha(0.5F);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImage((Image) null);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.setBackgroundPaint(combinedDomainXYPlot0.DEFAULT_GRIDLINE_PAINT);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 58, chartRenderingInfo0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(58, bufferedImage0.getHeight());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTextAntiAlias(true);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("8x~>|l5PvH&?%Gw7GY", (Plot) combinedRangeCategoryPlot0);
      jFreeChart0.setTextAntiAlias(false);
      jFreeChart0.getTextAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setAntiAlias(true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setAntiAlias(false);
      assertFalse(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = jFreeChart0.getTitle();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle(200, (Title) textTitle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((-889), (Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("8x~>|l5PvH&?%Gw7GY", (Plot) combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle((-1426));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("X{^7", (Plot) piePlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'subtitles' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      DateTitle dateTitle0 = new DateTitle(0);
      jFreeChart0.addSubtitle((Title) dateTitle0);
      jFreeChart0.getLegend(15);
      assertEquals(2, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.setTitle("p7Cw;f5d'");
      jFreeChart0.setTitle("p7Cw;f5d'");
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      jFreeChart0.setTitle((String) null);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("x`1(kR4yj1E", (Plot) multiplePiePlot0);
      jFreeChart0.setTitle((TextTitle) null);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 1042.4802955711507, 1042.4802955711507, 1924.45217985362);
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPointerAnnotation0.DEFAULT_FONT, (Plot) ringPlot0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("}]", (Font) null, (Plot) piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.setRenderingHints((RenderingHints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // RenderingHints given are null
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("", (Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getPadding();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("8x~>|l5PvH&?%Gw7GY", (Plot) combinedRangeCategoryPlot0);
      assertFalse(jFreeChart0.isBorderVisible());
      
      jFreeChart0.setBorderVisible(true);
      assertTrue(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("p,FzP", (Plot) combinedRangeCategoryPlot0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      // Undeclared exception!
      try { 
        jFreeChart0.setTextAntiAlias((Object) attributedCharacterIterator_Attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.text.AttributedCharacterIterator$Attribute(language) incompatible with Text-specific antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Color color0 = (Color)jFreeChart0.getBackgroundPaint();
      assertNull(color0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("", 1042.4802955711507, 1042.4802955711507, 1924.45217985362);
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, xYPointerAnnotation0.DEFAULT_FONT, (Plot) ringPlot0, true);
      jFreeChart0.setBorderStroke(ringPlot0.DEFAULT_LABEL_OUTLINE_STROKE);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.axis.PeriodAxisLabelInfo", (Plot) combinedRangeXYPlot0);
      jFreeChart0.getXYPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.text.TextFragment", font0, (Plot) combinedDomainCategoryPlot0, true);
      List list0 = jFreeChart0.getSubtitles();
      jFreeChart0.setSubtitles(list0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.getCategoryPlot();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JFreeChart.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.text.TextFragment", font0, (Plot) combinedDomainCategoryPlot0, true);
      jFreeChart0.getBackgroundImage();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("8x~>|l5PvH&?%Gw7GY", (Plot) combinedRangeCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      jFreeChart0.handleClick(10, 105, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) thermometerPlot0);
      jFreeChart0.setBorderPaint(thermometerPlot0.DEFAULT_BACKGROUND_PAINT);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) null, tableOrder0);
      JFreeChart jFreeChart0 = new JFreeChart("s$c]=Bo*>b", (Plot) spiderWebPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(67, 10, (double) 10, 0.0, (ChartRenderingInfo) null);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0, (ChartRenderingInfo) null);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(2, bufferedImage0.getType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(67, bufferedImage0.getTileWidth());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(15, int0);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(-16777216, color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addLegend((LegendTitle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.axis.PeriodAxisLabelInfo", (Plot) combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.removeProgressListener(chartPanel0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      jFreeChart0.setRenderingHints(renderingHints0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.axis.PeriodAxisLabelInfo", (Plot) combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, 200.0, (double) 1.0F, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) 10, (float) 1, (float) 10, (float) 10);
      Point2D.Double point2D_Double0 = new Point2D.Double(5.0E-7, (double) 10.0F);
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Float0, (Point2D) point2D_Double0, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("8x~>|l5PvH&?%Gw7GY", (Plot) combinedRangeCategoryPlot0);
      jFreeChart0.getTextAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.text.TextFragment", font0, (Plot) combinedDomainCategoryPlot0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 121, 10, chartRenderingInfo0);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      assertEquals(1, standardEntityCollection0.getEntityCount());
      
      BufferedImage bufferedImage1 = (BufferedImage)jFreeChart0.getBackgroundImage();
      assertEquals(121, bufferedImage1.getHeight());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'bar' argument.", (Plot) compassPlot0);
      boolean boolean0 = jFreeChart0.isNotify();
      assertTrue(boolean0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }
}
