/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 14:45:35 GMT 2017
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JInternalFrame;
import javax.swing.JTextArea;
import javax.swing.text.AbstractDocument;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChart_ESTest extends JFreeChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-461.0));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) compassPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, (double) 1, (-461.0), chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0);
      Rectangle rectangle0 = chartPanel1.getVisibleRect();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, bufferedImage0.getHeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, (Plot) combinedRangeCategoryPlot0, false);
      jFreeChart0.setBackgroundPaint(combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(166, 420, (double) 1.0F, 0.2, chartRenderingInfo0);
      assertEquals(166, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(420, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      jFreeChart0.setBackgroundImageAlpha((-1111.0515F));
      jFreeChart0.setBackgroundImageAlpha((-1108.8286F));
      assertEquals((-1108.8286F), jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlignment(1479);
      jFreeChart0.setBackgroundImageAlignment(2);
      assertEquals(2, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlignment(1479);
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(1479, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("V7q}AM", (Plot) xYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend((-820));
      assertTrue(jFreeChart0.isNotify());
      assertNull(legendTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent((Object) jFreeChart0, jFreeChart0, 10, (-1510));
      jFreeChart0.notifyListeners(chartProgressEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) thermometerPlot0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent((Axis) extendedCategoryAxis0);
      jFreeChart0.notifyListeners(axisChangeEvent0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", (Plot) categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.handleClick(680, 695, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("V7q}AM", (Plot) xYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      assertNotNull(legendTitle0);
      
      jFreeChart0.addLegend(legendTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("V7q}AM", (Plot) xYPlot0);
      jFreeChart0.getXYPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("XinSzWkMDdi_X", (Plot) meterPlot0);
      jFreeChart0.getTitle();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      List list0 = jFreeChart0.getSubtitles();
      assertEquals(0, list0.size());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, (Plot) combinedRangeCategoryPlot0, false);
      int int0 = jFreeChart0.getSubtitleCount();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, int0);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("V7q}AM", (Plot) xYPlot0);
      jFreeChart0.setPadding(xYPlot0.DEFAULT_INSETS);
      jFreeChart0.getPadding();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("project.info", (Plot) piePlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertTrue(jFreeChart0.isNotify());
      assertNotNull(legendTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("q6b(9N=&5\"sQ+[v#");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("q6b(9N=&5\"sQ+[v#", (Plot) combinedDomainCategoryPlot0);
      jFreeChart0.getCategoryPlot();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("V7q}AM", (Plot) xYPlot0);
      jFreeChart0.getBackgroundPaint();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      jFreeChart0.setAntiAlias(false);
      boolean boolean0 = jFreeChart0.getAntiAlias();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.drawTitle(dateTitle0, (Graphics2D) null, rectangle2D_Double0, false);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) categoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.plotChanged((PlotChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) waferMapPlot0);
      JInternalFrame jInternalFrame0 = new JInternalFrame((String) null, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      Point point0 = chartPanel0.getLocation();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) rectangle0, (Point2D) point0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      combinedDomainCategoryPlot0.clearDomainAxes();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(420, 353, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1952257861, 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1639, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (1639) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("=S}qN5sgWf*Pl7");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(100, 500, chartRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2121610351, 2145549550, 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 10, 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (10) must be > 0
         //
         verifyException("java.awt.image.SampleModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      combinedDomainCategoryPlot0.clearDomainAxes();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(100, 10, 1335.08725, (double) 3, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1952257861, 10, 2390.0, 0.0, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 64);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("cirD_O?S,arK=bm", font0, (Plot) thermometerPlot0, true);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(3, 0, (double) 1.0F, (double) 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (3) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("project.info", (Plot) piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(252, 10, 90.0, 2000.0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(1073741824, 826);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("6:RAB8q\"?9i#?QP", (Plot) combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, (-2533));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (-2533) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("Null 'rectangle' aYgument.", (Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, (Plot) combinedRangeCategoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      jFreeChart0.addProgressListener(chartPanel0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.addProgressListener((ChartProgressListener) null);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, true, true, false, false, false);
      jFreeChart0.addChangeListener(chartPanel0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.addChangeListener(chartPanel0);
      jFreeChart0.setBorderPaint(categoryPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2038, 1479);
      assertEquals(2038, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1479, bufferedImage0.getTileHeight());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("project.info", (Plot) piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(252, 10, 90.0, 2000.0, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, (double) 0, (double) 252, (double) 600);
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0, (Point2D) null, chartRenderingInfo0);
      assertEquals(252, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("project.info", (Plot) piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(252, 10, 90.0, 2000.0, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) 0, (double) 0, (double) 10, (double) 0);
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0, (Point2D) null, chartRenderingInfo0);
      assertEquals(252, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setNotify(true);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertTrue(jFreeChart0.isNotify());
      
      jFreeChart0.setNotify(false);
      assertFalse(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      DateAxis dateAxis0 = new DateAxis("Invalid title position.", (TimeZone) zoneInfo0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) combinedRangeCategoryPlot0);
      jFreeChart0.clearSubtitles();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-461.0));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) compassPlot0);
      jFreeChart0.getSubtitle(0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1.0);
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, compassPlot0.DEFAULT_LABEL_FONT, (Plot) compassPlot0, true);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(603, 603);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      jFreeChart0.getSubtitleCount();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) multiplePiePlot0);
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = new TextTitle("");
      jFreeChart0.removeSubtitle(textTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      jFreeChart0.fireChartChanged();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart("6:RAB8q\"?9i#?QP", (Plot) combinedDomainCategoryPlot0);
      jFreeChart0.removeLegend();
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getLegend();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) combinedDomainXYPlot0);
      jFreeChart0.getPlot();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.isNotify());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      jFreeChart1.setBackgroundImageAlignment(300);
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertEquals(300, jFreeChart1.getBackgroundImageAlignment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertNotSame(jFreeChart1, jFreeChart0);
      assertFalse(jFreeChart1.isBorderVisible());
      assertTrue(jFreeChart1.isNotify());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", (Plot) categoryPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      jFreeChart0.setAntiAlias(false);
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      boolean boolean0 = jFreeChart0.equals(ringPlot0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'listener' argument.", font0, (Plot) compassPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      jFreeChart0.removeProgressListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("project.info", (Plot) piePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 4);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) thermometerPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.removeChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("project.info", (Plot) piePlot0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.addChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) multiplePiePlot0);
      TextTitle textTitle0 = new TextTitle();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 65);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle(textTitle0, sunGraphics2D0, (Rectangle2D) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'area' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-461.0));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) compassPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, (double) 1, (-461.0), chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1286.50000546166, 1.0E11, (-3154.110785025878), 1879.7);
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle((Title) null, sunGraphics2D0, rectangle2D_Double0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlignment(15);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setBackgroundImage((Image) null);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      jFreeChart0.setBackgroundPaint(categoryPlot0.DEFAULT_GRIDLINE_PAINT);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint(categoryPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", (Plot) categoryPlot0);
      jFreeChart0.setTextAntiAlias(true);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTextAntiAlias(false);
      jFreeChart0.getTextAntiAlias();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 180.0, "Null 'category2' argument.");
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'category2' argument.", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, (Plot) multiplePiePlot0, false);
      jFreeChart0.setAntiAlias(true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle(420, (Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("V7q}AM", (Plot) xYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((-4853), (Title) legendTitle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) combinedRangeXYPlot0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      jFreeChart0.addSubtitle((Title) compositeTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-461.0));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) compassPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 180.0, "Null 'category2' argument.");
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'category2' argument.", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, (Plot) multiplePiePlot0, false);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle((-1113));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'subtitles' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("V7q}AM", (Plot) xYPlot0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      jFreeChart0.setSubtitles(list0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      Font font0 = thermometerPlot0.getValueFont();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.event.ChartChangeListener", font0, (Plot) thermometerPlot0, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      CompositeTitle compositeTitle0 = new CompositeTitle();
      jFreeChart0.addSubtitle(1, (Title) compositeTitle0);
      jFreeChart0.getLegend(520);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTitle(";");
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setTitle("78E?s");
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) piePlot0);
      jFreeChart0.setTitle((String) null);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setTitle((TextTitle) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.setTitle((TextTitle) dateTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      jFreeChart0.setPadding(categoryPlot0.DEFAULT_INSETS);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 2732, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2732, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-461.0));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) compassPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setRenderingHints((RenderingHints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // RenderingHints given are null
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      jFreeChart0.setRenderingHints(renderingHints0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Font font0 = Font.decode("");
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("", font0, (Plot) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) thermometerPlot0);
      jFreeChart0.getPadding();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBorderVisible(false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      
      jFreeChart0.setBorderPaint(categoryPlot0.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.getTitle();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("R", (Plot) meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(270, 270);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Font font0 = CompassPlot.DEFAULT_LABEL_FONT;
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'listener' argument.", font0, (Plot) compassPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      // Undeclared exception!
      try { 
        jFreeChart0.setTextAntiAlias((Object) chartPanel0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]] incompatible with Text-specific antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Color color0 = (Color)jFreeChart0.getBackgroundPaint();
      assertNull(color0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", (Plot) combinedRangeCategoryPlot0);
      jFreeChart0.setBorderStroke(combinedRangeCategoryPlot0.DEFAULT_GRIDLINE_STROKE);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-461.0));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) compassPlot0);
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", (Plot) combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedRangeCategoryPlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      List list0 = jFreeChart0.getSubtitles();
      assertFalse(list0.isEmpty());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-461.0));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) compassPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CompassPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JFreeChart.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("project.info", (Plot) piePlot0);
      jFreeChart0.getBackgroundImage();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      jFreeChart0.getAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("5s*Oqn(:MQ", (Font) null, (Plot) combinedRangeXYPlot0, true);
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(603, 603);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.handleClick(1, 603, (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("ZOOM_IN_RANGE", (Plot) categoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 2732, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      JInternalFrame jInternalFrame0 = new JInternalFrame("0F(", true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle0, chartRenderingInfo0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, bufferedImage0.getWidth());
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(2732, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringContent stringContent0 = new StringContent(0);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument((AbstractDocument.Content) stringContent0, styleContext0);
      JTextArea jTextArea0 = new JTextArea();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      AbstractDocument.LeafElement abstractDocument_LeafElement0 = (AbstractDocument.LeafElement)jTextComponent_AccessibleJTextComponent0.getCharacterAttribute(3010);
      Font font0 = defaultStyledDocument0.getFont(abstractDocument_LeafElement0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("#]@?t+w|t");
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (CategoryAxis) categoryAxis3D0, (ValueAxis) numberAxis3D0, (CategoryItemRenderer) stackedBarRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart("#]@?t+w|t", font0, (Plot) categoryPlot0, false);
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, color0.getBlue());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.addLegend((LegendTitle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, (VerticalAlignment) null, (double) 10, 38.0);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) combinedDomainCategoryPlot0, (Arrangement) columnArrangement0, (Arrangement) columnArrangement0);
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent((Title) legendTitle0);
      jFreeChart0.titleChanged(titleChangeEvent0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getTextAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      combinedDomainCategoryPlot0.clearDomainAxes();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(691, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 180.0, "Null 'category2' argument.");
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'category2' argument.", cyclicNumberAxis0.DEFAULT_AXIS_LABEL_FONT, (Plot) multiplePiePlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 3, 3, chartRenderingInfo0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertEquals(500, bufferedImage0.getTileWidth());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Font font0 = new Font("Null 'listener' argument.", 1691, 0);
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart(" but the series already contains an observation", font0, (Plot) piePlot3D0, true);
      boolean boolean0 = jFreeChart0.isNotify();
      assertTrue(boolean0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }
}
