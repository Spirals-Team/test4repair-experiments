/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 20 11:22:57 GMT 2017
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.PolarChartPanel;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.PolarItemRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChart_ESTest extends JFreeChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) categoryPlot0);
      TextTitle textTitle0 = jFreeChart0.getTitle();
      jFreeChart0.setBackgroundPaint(textTitle0.DEFAULT_TEXT_PAINT);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2379);
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2379, bufferedImage0.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlpha(364.60623F);
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertEquals(364.60623F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) compassPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(10);
      assertNull(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.StrokeMap", (Plot) fastScatterPlot0);
      jFreeChart0.notifyListeners((ChartProgressEvent) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.notifyListeners((ChartChangeEvent) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(800, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 860.13);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, sunGraphics2D0, rectangleConstraint0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 1.0F, 600, rectangleAnchor0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0, chartRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) 680, (-2952.0475434612), (double) 800, 2.0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(200, 200, 0.0, 0.0, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(200, bufferedImage0.getWidth());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(200, bufferedImage0.getHeight());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("x\"<%N", (Plot) combinedDomainXYPlot0);
      jFreeChart0.getXYPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      jFreeChart0.getSubtitles();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("1@:N}m8q0lVX8", (Plot) waferMapPlot0);
      jFreeChart0.getSubtitleCount();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) spiderWebPlot0);
      jFreeChart0.setPadding(spiderWebPlot0.DEFAULT_INSETS);
      jFreeChart0.getPadding();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getLegend();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) polarPlot0);
      jFreeChart0.getBackgroundPaint();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("=]?4Xy89Bq'^W@00", font0, (Plot) thermometerPlot0, false);
      jFreeChart0.setBackgroundImageAlignment((-2604));
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals((-2604), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.setAntiAlias(false);
      boolean boolean0 = jFreeChart0.getAntiAlias();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      defaultKeyedValues2DDataset0.addValue((Number) 0.5F, (Comparable) 1.0F, (Comparable) 15);
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.chart.title.Title
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.plotChanged((PlotChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.handleClick(1983, 58, (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) spiderWebPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.SpiderWebPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) spiderWebPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("\u00B0F", (Plot) polarPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 2144910270, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("1@:N}m8q0lVX8", (Plot) waferMapPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 664, 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-1984), 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) categoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-2015), 1, 1952257861, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 1952257861
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(3072, 2126221433, (-1050.562), 1651.058132123, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) spiderWebPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.SpiderWebPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2144802644, 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("?8z[VAGH9$", (Plot) combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(15, (-3514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (15) and height (-3514) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2734, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset((-1996), (-1996), (Number) null);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("9'18NI/^F", (Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addLegend((LegendTitle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("v~m7-e]Ze|&oQol~fx", (Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.equals(jFreeChart0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(boolean0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) polarPlot0);
      PolarChartPanel polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
      jFreeChart0.addProgressListener(polarChartPanel0);
      ChartRenderingInfo chartRenderingInfo0 = polarChartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(418, 10, 664.0, 147.0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PolarPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) categoryPlot0);
      jFreeChart0.addProgressListener((ChartProgressListener) null);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.JFreeChart");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, true, true, true, true);
      jFreeChart0.addChangeListener(chartPanel0);
      jFreeChart0.setBorderPaint(extendedCategoryAxis0.DEFAULT_TICK_LABEL_PAINT);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(800, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 860.13);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, sunGraphics2D0, rectangleConstraint0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 1.0F, 600, rectangleAnchor0);
      rectangle2D_Double0.setFrameFromDiagonal((double) 15, 5037.361780265966, 1464.127552, (double) 680);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0, (Point2D) null, chartRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(800, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-343.7), (double) 0.5F, 239.44651558536947, (double) (-264));
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(800, 2, (-1589.244), (double) 680, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0, (Point2D) null, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(800, bufferedImage0.getTileWidth());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, false);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(800, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(0.0, 860.13);
      Size2D size2D0 = columnArrangement0.arrange(blockContainer0, sunGraphics2D0, rectangleConstraint0);
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)RectangleAnchor.createRectangle(size2D0, 1.0F, 600, rectangleAnchor0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0, (Point2D) null, chartRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) 420, (double) 0.5F, 239.44651558536947, (double) (-264));
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Double0, (Point2D) null, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setNotify(true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertTrue(jFreeChart0.isNotify());
      
      jFreeChart0.setNotify(false);
      assertFalse(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("Nj>", stringArray0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(symbolAxis0.DEFAULT_GRID_BAND_PAINT, symbolAxis0.DEFAULT_GRID_BAND_ALTERNATE_PAINT, false);
      XYPlot xYPlot0 = new XYPlot((XYDataset) jDBCXYDataset0, (ValueAxis) symbolAxis0, (ValueAxis) symbolAxis0, (XYItemRenderer) xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      jFreeChart0.clearSubtitles();
      TextTitle textTitle0 = new TextTitle("Nj>", symbolAxis0.DEFAULT_AXIS_LABEL_FONT);
      jFreeChart0.addSubtitle((int) (byte)0, (Title) textTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) categoryPlot0);
      TextTitle textTitle0 = jFreeChart0.getTitle();
      jFreeChart0.addSubtitle((Title) textTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("\u0007-?mKq", (Plot) thermometerPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      jFreeChart0.getSubtitle(0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) spiderWebPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.0);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, meterPlot0.DEFAULT_LABEL_FONT, (Plot) meterPlot0, true);
      jFreeChart0.setBackgroundImageAlpha((-833.0F));
      jFreeChart0.setBackgroundImageAlpha((-290.05F));
      assertEquals((-290.05F), jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("", (Font) null, (Plot) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("=]?4Xy89Bq'^W@00", font0, (Plot) thermometerPlot0, false);
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.JFreeChart");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setTextAntiAlias((Object) "org.jfree.chart.JFreeChart");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.jfree.chart.JFreeChart incompatible with Text-specific antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      Color color0 = Color.BLACK;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      TextTitle textTitle0 = new TextTitle("Null 'padding' argument.", jFreeChart0.DEFAULT_TITLE_FONT, (Paint) color0, rectangleEdge0, horizontalAlignment0, verticalAlignment0, combinedRangeCategoryPlot0.DEFAULT_INSETS);
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent((Title) textTitle0);
      jFreeChart0.titleChanged(titleChangeEvent0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) combinedDomainXYPlot0);
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.removeSubtitle((Title) null);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) compassPlot0);
      jFreeChart0.fireChartChanged();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Unrecognised title position.", (Plot) ringPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      jFreeChart0.removeLegend();
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) categoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertNotNull(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      jFreeChart0.getPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart1.isNotify());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("1@:N}m8q0lVX8", (Plot) waferMapPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart1 = multiplePiePlot0.getPieChart();
      waferMapPlot0.removeChangeListener(jFreeChart1);
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(0, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.equals((Object)jFreeChart0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) compassPlot0);
      boolean boolean0 = jFreeChart0.equals(compassPlot0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.removeProgressListener((ChartProgressListener) null);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) spiderWebPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, false, false);
      jFreeChart0.removeProgressListener(chartPanel0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) polarPlot0);
      PolarChartPanel polarChartPanel0 = new PolarChartPanel(jFreeChart0, true);
      jFreeChart0.setBackgroundImageAlignment(418);
      assertEquals(418, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.removeChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, (double) 680, 1719.728);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) multiplePiePlot0, (Arrangement) flowArrangement0, (Arrangement) flowArrangement0);
      jFreeChart0.drawTitle(legendTitle0, (Graphics2D) null, rectangle2D_Double0, false);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) 15, (double) 10, 1697.0, (-1922.4181459));
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle((Title) null, (Graphics2D) null, rectangle2D_Double0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("?8z[VAGH9$", (Plot) combinedDomainCategoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, 10, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getWidth());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(14.0, 777.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.renderer.category.BarRenderer", (Plot) combinedRangeXYPlot0);
      jFreeChart0.setBackgroundImageAlpha(0.5F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("\u00B0F", (Plot) polarPlot0);
      jFreeChart0.setBackgroundImageAlignment(10);
      jFreeChart0.setBackgroundImageAlignment(10);
      assertEquals(10, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, chartRenderingInfo0);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, bufferedImage1.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(10, bufferedImage1.getWidth());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.setBackgroundImage((Image) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint((Paint) null);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTextAntiAlias(false);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setAntiAlias(true);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.setAntiAlias(false);
      jFreeChart0.setAntiAlias(false);
      assertFalse(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("Nj>", stringArray0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(symbolAxis0.DEFAULT_GRID_BAND_PAINT, symbolAxis0.DEFAULT_GRID_BAND_ALTERNATE_PAINT, false);
      XYPlot xYPlot0 = new XYPlot((XYDataset) jDBCXYDataset0, (ValueAxis) symbolAxis0, (ValueAxis) symbolAxis0, (XYItemRenderer) xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((int) (byte)0, (Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = new TextTitle();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((-1), (Title) textTitle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("\u00B0F", (Plot) polarPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart("\u00B0F", (Plot) polarPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertEquals(1, jFreeChart1.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) spiderWebPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle((-2141266228));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      
      LinkedList<Button> linkedList0 = new LinkedList<Button>();
      linkedList0.add((Button) null);
      jFreeChart0.setSubtitles(linkedList0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'subtitles' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.chart.JFreeChart");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      List list0 = combinedDomainCategoryPlot0.getCategories();
      jFreeChart0.setSubtitles(list0);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      XYBarDataset xYBarDataset0 = new XYBarDataset((XYDataset) jDBCXYDataset0, 0.0);
      Hour hour0 = new Hour();
      PeriodAxis periodAxis0 = new PeriodAxis("k@J{m3YxM$w%#?8%{8", (RegularTimePeriod) hour0, (RegularTimePeriod) hour0, hour0.DEFAULT_TIME_ZONE);
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      PolarPlot polarPlot0 = new PolarPlot((XYDataset) xYBarDataset0, (ValueAxis) periodAxis0, (PolarItemRenderer) defaultPolarItemRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) polarPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend((-1999));
      assertNull(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.setTitle("Null 'padding' argument.");
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      jFreeChart0.setTitle((String) null);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.setTitle((TextTitle) null);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart("1@:N}m8q0lVX8", (Plot) waferMapPlot0);
      DateTitle dateTitle0 = new DateTitle();
      jFreeChart0.setTitle((TextTitle) dateTitle0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) categoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) spiderWebPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setRenderingHints((RenderingHints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // RenderingHints given are null
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("Nj>", stringArray0);
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer(symbolAxis0.DEFAULT_GRID_BAND_PAINT, symbolAxis0.DEFAULT_GRID_BAND_ALTERNATE_PAINT, false);
      XYPlot xYPlot0 = new XYPlot((XYDataset) jDBCXYDataset0, (ValueAxis) symbolAxis0, (ValueAxis) symbolAxis0, (XYItemRenderer) xYDifferenceRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      jFreeChart0.setRenderingHints(renderingHints0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart(" ]Bt/H*n]", (Font) null, (Plot) meterPlot0, false);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) "iY6oAN:6>jXW0");
      Font font0 = categoryMarker0.getLabelFont();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("iY6oAN:6>jXW0", font0, (Plot) spiderWebPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-1466), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-1466) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) spiderWebPlot0);
      jFreeChart0.getPadding();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.setBorderVisible(false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      int int0 = jFreeChart0.getSubtitleCount();
      assertEquals(0, int0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.getTitle();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 129);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTextAntiAlias(true);
      jFreeChart0.getTextAntiAlias();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Color color0 = (Color)jFreeChart0.getBackgroundPaint();
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(color0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBorderStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.PiePlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      List list0 = jFreeChart0.getSubtitles();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(list0.isEmpty());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.getCategoryPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JFreeChart.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getBackgroundImage();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.getAntiAlias();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) polarPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.handleClick(1573, 10, chartRenderingInfo0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) compassPlot0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) rectangle0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, int0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) polarPlot0);
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) spiderWebPlot0);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) spiderWebPlot0);
      jFreeChart0.addLegend(legendTitle0);
      assertEquals(2, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTitle("C5el$?Zl|4");
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 15, 15, (-2141599484), 10, 4387, 3430, false, false, false, false, false, false);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 0, Double.NaN, 0.0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getTextAntiAlias();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.isNotify();
      assertTrue(boolean0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }
}
