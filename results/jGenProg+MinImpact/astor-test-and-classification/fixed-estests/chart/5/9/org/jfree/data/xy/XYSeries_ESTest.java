/**
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 21:44:49 GMT 2017
 */


package org.jfree.data.xy;

import org.jfree.data.time.FixedMillisecond;
import org.junit.Assert;
import org.jfree.data.time.Week;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.junit.Test;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.time.Minute;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import java.util.TimeZone;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.CategoryDataset;
import java.util.Date;
import org.jfree.data.time.Second;
import org.jfree.data.time.Day;
import java.util.Locale;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Year;
import sun.util.calendar.ZoneInfo;
import org.evosuite.runtime.EvoAssertions;
import org.jfree.data.time.Hour;
import javax.swing.JLayeredPane;
import org.jfree.data.time.Millisecond;
import java.util.List;
import org.jfree.data.time.Month;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
        xYSeries0.add(((Number) (32769)), ((Number) (0)));
        xYSeries0.add(Double.NaN, ((double) (26)), false);
        xYSeries0.add(((double) (26)), ((double) (0)), true);
        xYSeries0.hashCode();
        Assert.assertEquals(4, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.setMaximumItemCount(2);
        xYSeries0.add((-32.73), ((Number) (36)));
        xYSeries0.addOrUpdate(((Number) (1024)), ((Number) (8)));
        Assert.assertEquals(2, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false);
        xYSeries0.addOrUpdate(((double) (0)), ((double) (0)));
        xYSeries0.addOrUpdate(((Number) (23)), ((Number) (0)));
        xYSeries0.addOrUpdate(((Number) (23)), ((Number) (4)));
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)));
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (integer0)), ((Number) (integer0)));
        xYSeries0.add(xYDataItem0, false);
        Float float0 = new Float(((double) (1)));
        xYSeries0.add(((Number) (float0)), ((Number) (float0)));
        xYSeries0.update(float0, float0);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false);
        xYSeries0.addOrUpdate(((double) (0)), ((double) (0)));
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 1400);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.add(((double) (-1115)), ((Number) (36)));
        xYSeries0.add(0.857, ((double) (-1115)));
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)));
        xYSeries0.add((-1.0), ((Number) (null)), true);
        xYSeries0.add(Double.NaN, 1932.987976344);
        Float float0 = new Float(((double) (1)));
        xYSeries0.add(((Number) (float0)), ((Number) (float0)));
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Year year0 = new Year(0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (9999)), ((Number) (-9999)));
        xYSeries0.add(xYDataItem0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((Number) (0)), ((Number) (0)));
        xYSeries0.updateByIndex(0, 59);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)));
        xYSeries0.add(Double.NaN, 1932.987976344);
        Float float0 = new Float(((double) (-17)));
        xYSeries0.update(float0, float0);
        xYSeries0.remove(((Number) (float0)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        MockDate mockDate0 = new MockDate((-846L));
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.addOrUpdate(0.0, ((double) (Integer.MAX_VALUE)));
        Float float0 = new Float(0.0);
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (float0)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2.147483647E9, xYDataItem0.getYValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), true);
        xYSeries0.addOrUpdate(((Number) (23)), ((Number) (0)));
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (23)));
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)));
        xYSeries0.add((-1.0), ((Number) (null)), true);
        xYSeries0.add(Double.NaN, 1932.987976344);
        int int0 = xYSeries0.indexOf(2);
        Assert.assertEquals(2, xYSeries0.getItemCount());
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false);
        xYSeries0.addOrUpdate(((Number) (23)), ((Number) (0)));
        Integer integer0 = ((Integer) (xYSeries0.getY(0)));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(0, ((int) (integer0)));
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)));
        xYSeries0.add(Double.NaN, 1932.987976344);
        Double double0 = ((Double) (xYSeries0.getY(0)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(1932.987976344, ((double) (double0)), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Byte byte0 = Byte.valueOf(((byte) (0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (byte0)));
        xYSeries0.add(((double) (0)), ((Number) (byte0)));
        Double double0 = ((Double) (xYSeries0.getX(((byte) (0)))));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(0.0, ((double) (double0)), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false);
        xYSeries0.addOrUpdate(((Number) (23)), ((Number) (0)));
        Integer integer0 = ((Integer) (xYSeries0.getX(0)));
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(23, ((int) (integer0)));
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        MockDate mockDate0 = new MockDate(75L);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        xYSeries0.setMaximumItemCount(0);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.addOrUpdate(((Number) (23)), ((Number) (1)));
        xYSeries0.getItemCount();
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), true);
        xYSeries0.add(((Number) (23)), ((Number) (23)));
        xYSeries0.getDataItem(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        MockDate mockDate0 = new MockDate();
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone("`y]yJ|M(")));
        Hour hour0 = new Hour(((Date) (mockDate0)), ((TimeZone) (zoneInfo0)));
        Minute minute0 = new Minute(182, hour0);
        Second second0 = new Second(1800, minute0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), true, true);
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1886610801)));
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ((byte) (-53))));
        xYSeries0.setNotify(false);
        XYSeries xYSeries1 = xYSeries0.createCopy((-3023), 0);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, false, false);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleHistogramBin0)), false, false);
        xYSeries0.add(1.0, ((Number) (0)));
        xYSeries0.addOrUpdate(1.0, 1.0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Locale locale0 = Locale.CANADA_FRENCH;
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("h[a4u]YZ", locale0);
        ZoneInfo zoneInfo0 = ((ZoneInfo) (mockSimpleDateFormat0.getTimeZone()));
        Second second0 = new Second(((Date) (mockDate0)), ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)));
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-1), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("ToolTipText")));
        // Undeclared exception!
        try {
            xYSeries0.update(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, true);
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-9999));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Week week0 = new Week(2462, 2462);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false, false);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (32770)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(4352);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (9)));
        // Undeclared exception!
        try {
            xYSeries0.remove(9);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 9, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.remove((-1289));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)));
        // Undeclared exception!
        try {
            xYSeries0.indexOf(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)));
        // Undeclared exception!
        try {
            xYSeries0.getY((-2030));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        MockDate mockDate0 = new MockDate();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (mockDate0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.getX((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("Failed to clone.")), true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.getItems();
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("wantsInput")), false);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-947));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        MockDate mockDate0 = new MockDate(1523, (-3011), (-973), 1523, (-3011));
        Second second0 = new Second(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)));
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.delete(1523, Integer.MAX_VALUE);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Year year0 = new Year(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.delete((-9999), 120);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
        // Undeclared exception!
        try {
            xYSeries0.createCopy(0, 2);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.addOrUpdate(((double) ((byte) (49))), Double.NaN);
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-1115), (-523));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true);
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
        List list0 = xYSeriesCollection0.getSeries();
        xYSeries0.data = list0;
        try {
            xYSeries0.clone();
            Assert.fail("Expecting exception: CloneNotSupportedException");
        } catch (CloneNotSupportedException e) {
            // 
            // Failed to clone.
            // 
            EvoAssertions.verifyException("org.jfree.chart.util.ObjectUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
        List list0 = xYSeriesCollection0.getSeries();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.clear();
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 1.0, false, false);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleHistogramBin0)), false, true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.clear();
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (0)), ((Number) (23)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        MockDate mockDate0 = new MockDate((-846L));
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy(1048, (-924));
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(((CategoryDataset) (defaultKeyedValues2DDataset0)), 0, (-924));
        List list0 = slidingCategoryDataset0.getRowKeys();
        xYSeries1.data = list0;
        // Undeclared exception!
        try {
            xYSeries1.addOrUpdate(0.0, ((double) (Integer.MAX_VALUE)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.add(((Number) (23)), ((Number) (0)), false);
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(((Number) (23)), ((Number) (1)));
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("`y]yJ|M(")), true, true);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (2)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.addOrUpdate((-1889.0736), ((double) (23)));
        // Undeclared exception!
        try {
            xYSeries0.add((-1889.0736), ((Number) (0)), false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (26)), 0.0, true);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), false, false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false);
        xYSeries0.addOrUpdate(((Number) (23)), ((Number) (0)));
        int int0 = xYSeries0.indexOf(23);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(0, int0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.indexOf(1);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1886610801)));
        Long long0 = Long.valueOf(((long) (1886610801)));
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (long0)));
        xYSeries0.add(xYDataItem0, true);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Week week0 = new Week(2462, 2462);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (53)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("h[a4u]YZ")), false);
        xYSeries0.add(((double) (59)), ((double) (59)));
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)));
        xYSeries0.add(Double.NaN, 1932.987976344);
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (integer0)), ((Number) (integer0)));
        xYSeries0.add(xYDataItem0, false);
        Float float0 = new Float(((double) (1)));
        xYSeries0.add(((Number) (float0)), ((Number) (float0)));
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Byte byte0 = Byte.valueOf(((byte) (0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (byte0)));
        // Undeclared exception!
        try {
            xYSeries0.getX(((byte) (0)));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false);
        // Undeclared exception!
        try {
            xYSeries0.getY(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.getItemCount();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false, false);
        xYSeries0.hashCode();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Byte byte0 = Byte.valueOf(((byte) (0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (byte0)), false);
        xYSeries0.addOrUpdate(0.0, 0.0);
        xYSeries0.remove(((int) ((byte) (0))));
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Week week0 = new Week(2462, 2462);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false, false);
        XYSeries xYSeries1 = xYSeries0.createCopy(0, 53);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertFalse(xYSeries1.getAllowDuplicateXValues());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(xYSeries1.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false, false);
        XYSeries xYSeries1 = new XYSeries(((Comparable) (day0)), false);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(xYSeries1.getAutoSort());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        XYSeries xYSeries1 = new XYSeries(((Comparable) (day0)), false);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        XYSeries xYSeries1 = xYSeries0.createCopy(0, (-1009));
        xYSeries1.setMaximumItemCount(26);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertEquals(26, xYSeries1.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Week week0 = new Week(2462, 2462);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false, false);
        XYSeries xYSeries1 = xYSeries0.createCopy(0, 53);
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        xYSeries1.setDescription("");
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(xYSeries1.equals(((Object) (xYSeries0))));
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        MockDate mockDate0 = new MockDate();
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone("`y]yJ|M(")));
        Hour hour0 = new Hour(((Date) (mockDate0)), ((TimeZone) (zoneInfo0)));
        Minute minute0 = new Minute(182, hour0);
        Second second0 = new Second(1800, minute0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), true, true);
        boolean boolean0 = xYSeries0.equals(second0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Week week0 = new Week(2462, 2462);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false, false);
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(boolean0);
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
        XYSeries xYSeries1 = xYSeries0.createCopy(0, (-1009));
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false, false);
        xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
        int int0 = xYSeries0.indexOf(1);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals((-1), int0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.setMaximumItemCount(2);
        xYSeries0.addOrUpdate(((Number) (2)), ((Number) ((byte) (8))));
        xYSeries0.add((-32.73), ((Number) (36)));
        xYSeries0.addOrUpdate(((Number) (1024)), ((Number) (8)));
        Assert.assertEquals(2, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("`y]yJ|M(")), true, true);
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (7)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.update(1, 6);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = 1
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (9)));
        XYDataItem xYDataItem0 = new XYDataItem(((double) (9)), Double.NaN);
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.clear();
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.clear();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Byte byte0 = Byte.valueOf(((byte) (0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (byte0)), true);
        // Undeclared exception!
        try {
            xYSeries0.delete(((byte) (15)), ((byte) (15)));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 15, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.delete(8, (-1009));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.setMaximumItemCount(2);
        xYSeries0.addOrUpdate(((Number) (2)), ((Number) ((byte) (8))));
        xYSeries0.add((-32.73), ((Number) (36)));
        xYSeries0.add((-32.73), ((double) (-1115)));
        Assert.assertEquals(2, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.add(((Number) (0)), ((Number) (0)), true);
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(((Number) (0)), ((Number) (23)));
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
        xYSeries0.add(((Number) (1886545200)), ((Number) (0)));
        xYSeries0.hashCode();
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
        xYSeries0.setMaximumItemCount(0);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("h[a4u]YZ")), false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        MockDate mockDate0 = new MockDate();
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        Long long0 = new Long((-846L));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (long0)));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
        xYSeries0.createCopy(0, 0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        MockDate mockDate0 = new MockDate();
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.addOrUpdate(((double) (-846L)), ((double) (52)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        Long long0 = new Long((-846L));
        xYSeries0.remove(((Number) (long0)));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(0, 59);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.add(((Number) (1886545200)), ((Number) ((byte) (17))));
        xYSeries0.toArray();
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(1.0, ((double) (0)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        MockDate mockDate0 = new MockDate();
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertEquals(Integer.MAX_VALUE, int0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(xYSeries1.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)));
        xYSeries0.add(Double.NaN, 1932.987976344);
        Float float0 = new Float(((double) (1)));
        {
            xYSeries0.addOrUpdate(((Number) (float0)), ((Number) (float0)));
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.add(Double.NaN, ((double) (-1)), false);
        {
            xYSeries0.addOrUpdate(((double) (26)), ((double) (0)));
        }
    }
}

