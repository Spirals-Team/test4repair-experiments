/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 29 22:15:02 GMT 2017
 */


package org.jfree.data.xy;

import org.jfree.data.general.DefaultPieDataset;
import org.junit.Assert;
import java.util.Date;
import org.jfree.data.time.Minute;
import org.junit.Test;
import org.jfree.data.time.Day;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.EvoAssertions;
import javax.swing.SpinnerNumberModel;
import org.jfree.data.time.Second;
import org.jfree.data.time.FixedMillisecond;
import java.util.List;
import java.util.TimeZone;
import org.jfree.data.time.Year;
import org.jfree.data.time.Week;
import sun.util.calendar.ZoneInfo;
import org.jfree.data.time.Month;
import java.util.Locale;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.addOrUpdate(((Number) (80)), ((Number) (10)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), true, true);
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        xYSeries1.setMaximumItemCount(32769);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertEquals(32769, xYSeries1.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(1.0, 1.0);
        xYSeries0.addOrUpdate((-2770.0), (-2770.0));
        // Undeclared exception!
        try {
            xYSeries0.createCopy(1, 80);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 2, Size: 2
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.addOrUpdate(((Number) (80)), ((Number) (10)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.update(0, 0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.addOrUpdate(((Number) (1093812786)), ((Number) (10)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0);
        // Undeclared exception!
        try {
            xYSeries0.delete(2, 10);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 2, Size: 2
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(1.0, 1.0);
        xYSeries0.addOrUpdate((-2770.0), (-2770.0));
        xYSeries0.add(((Number) (1)), ((Number) ((byte) (29))));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.addOrUpdate(((Number) (80)), ((Number) (10)));
        xYSeries0.updateByIndex(0, 1886610483);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.add(xYDataItem0);
        xYSeries0.remove(((Number) ((byte) (0))));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(0.0, (-2770.0));
        Float float0 = new Float(0.0);
        XYDataItem xYDataItem1 = xYSeries0.remove(((Number) (float0)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-2770.0), xYDataItem1.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(1.0, 1.0);
        XYDataItem xYDataItem1 = xYSeries0.remove(((Number) (1)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(1.0, xYDataItem1.getYValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (9999)));
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (-9999)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(9999.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        xYSeries0.add(518.5953, (-17.812348580010045), false);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-17.812348580010045), xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(518.5953, xYDataItem0.getXValue(), 0.01);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true, false);
        xYSeries0.add((-1398.4997408306954), 2886.4298803579554, false);
        xYSeries0.add(861.7889443, ((double) (0)), true);
        XYDataItem xYDataItem0 = xYSeries0.remove(1);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true, false);
        xYSeries0.add((-1398.4997408306954), 2886.4298803579554, false);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2886.4298803579554, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-1398.4997408306954), xYDataItem0.getXValue(), 0.01);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        xYSeries0.addOrUpdate(((double) (1)), ((double) (1)));
        int int0 = xYSeries0.indexOf(1);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(0, int0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.add(xYDataItem0, true);
        xYSeries0.addOrUpdate(((Number) (80)), ((Number) (10)));
        xYSeries0.add(xYDataItem0);
        int int0 = xYSeries0.indexOf(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.add(xYDataItem0, true);
        xYSeries0.addOrUpdate(((Number) (80)), ((Number) (10)));
        xYSeries0.add(xYDataItem0);
        Integer integer0 = ((Integer) (xYSeries0.getY(2)));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(10, ((int) (integer0)));
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(1.0, 1.0);
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.add(xYDataItem0);
        xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(((Number) (1)), ((Number) ((byte) (29))));
        XYDataItem xYDataItem1 = xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(29.0, xYDataItem1.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.addOrUpdate((-2770.0), (-2770.0));
        XYDataItem xYDataItem1 = xYSeries0.getDataItem(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYDataItem1.equals(((Object) (xYDataItem0))));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Year year0 = new Year((-1076));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        xYSeries0.setNotify(false);
        XYSeries xYSeries1 = xYSeries0.createCopy(32769, 32769);
        Assert.assertFalse(xYSeries1.getAutoSort());
        Assert.assertFalse(xYSeries1.getAllowDuplicateXValues());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (6)), ((Number) (13)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.createCopy(6, 13);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(588L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, false);
        Short short0 = new Short(((short) (-6598)));
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-3), short0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("model")), true, true);
        // Undeclared exception!
        try {
            xYSeries0.update(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        xYSeries1.data = null;
        // Undeclared exception!
        try {
            xYSeries1.setMaximumItemCount(1093812786);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-6598));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (1)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        double[][] doubleArray0 = new double[6][4];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (1935897188)));
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        List list0 = xYSeries0.getItems();
        XYSeries xYSeries1 = new XYSeries(((Comparable) (fixedMillisecond0)), false);
        xYSeries1.data = list0;
        // Undeclared exception!
        try {
            xYSeries1.remove(0);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.remove((-2900));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (14)));
        // Undeclared exception!
        try {
            xYSeries0.indexOf(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (6)), ((Number) (13)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        // Undeclared exception!
        try {
            xYSeries0.getY((-772));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("media-size")), false);
        XYSeries xYSeries1 = xYSeries0.createCopy((-587), 373);
        xYSeries1.data = null;
        // Undeclared exception!
        try {
            xYSeries1.getX((-587));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.getX(9999);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 9999, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-9999));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.delete((-1864), 5);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(1860.30431043617, 1860.30431043617);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.delete(387, 387);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 387, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        MockDate mockDate0 = new MockDate(2516, (-6590), (-1836), 1994, 1);
        Second second0 = new Second(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false);
        XYSeries xYSeries1 = xYSeries0.createCopy(2516, 2516);
        xYSeries1.data = null;
        // Undeclared exception!
        try {
            xYSeries1.createCopy((-6590), (-1));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (2)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        xYSeries0.add(((Number) (4)), ((Number) (4)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-772), 1);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        try {
            xYSeries0.clone();
            Assert.fail("Expecting exception: CloneNotSupportedException");
        } catch (CloneNotSupportedException e) {
            // 
            // Failed to clone.
            // 
            EvoAssertions.verifyException("org.jfree.chart.util.ObjectUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(1.0, 1.0);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.clear();
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (9999)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.503161428019), (-2770.503161428019));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((double) (1)), 3794.95484);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (6)), ((Number) (13)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2769.0302388327996), (-2769.0302388327996));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (1)), ((Number) ((byte) (29))));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (52)));
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        xYSeries0.add(0.0, ((double) (32769)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(0.0, ((Number) (4)), false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        xYSeries0.add(0.0, ((double) (32769)), false);
        Byte byte0 = new Byte(((byte) (29)));
        // Undeclared exception!
        try {
            xYSeries0.add(0.0, ((Number) (byte0)));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        xYSeries0.add(((double) (32769)), ((Number) ((byte) (21))), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (32769)), (-5465.880914648948), true);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
        List list0 = defaultPieDataset0.getKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(518.5953, 0.0, false);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        xYSeries0.add(((double) (32769)), ((double) (32769)), true);
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (32769)), 2221.313958443);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), false, false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        xYSeries0.add(1666.866572281, ((double) (32769)), false);
        int int0 = xYSeries0.indexOf(3);
        Assert.assertEquals((-1), int0);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(0.0, ((double) (999)));
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.addOrUpdate(((Number) (80)), ((Number) (10)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("model")), true, true);
        xYSeries0.add(((Number) (16)), ((Number) (7)), true);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("Q5#_f-b")), true);
        // Undeclared exception!
        try {
            xYSeries0.getX((-6598));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        // Undeclared exception!
        try {
            xYSeries0.getY(2);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 2, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("841000x1189000 um")), false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Year year0 = new Year(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, false);
        xYSeries0.getItemCount();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        MockDate mockDate0 = new MockDate(2516, (-6592), (-1836), 1994, 1);
        Second second0 = new Second(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), true);
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.addOrUpdate(((Number) (80)), ((Number) (10)));
        xYSeries0.hashCode();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Year year0 = new Year(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, false);
        xYSeries0.hashCode();
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        xYSeries0.add(518.5953, ((Number) ((byte) (4))));
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        Comparable comparable0 = xYSeries0.getKey();
        XYSeries xYSeries1 = new XYSeries(((Comparable) (comparable0)), false, false);
        xYSeries1.setMaximumItemCount(1);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertEquals(1, xYSeries1.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        xYSeries1.setDescription("");
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(xYSeries1.equals(((Object) (xYSeries0))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        MockDate mockDate0 = new MockDate(156, 156, 0, 0, (-1076), 433);
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getDefault()));
        Locale locale0 = Locale.FRENCH;
        Week week0 = new Week(((Date) (mockDate0)), ((TimeZone) (zoneInfo0)), locale0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false, true);
        boolean boolean0 = xYSeries0.equals(locale0);
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        Comparable comparable0 = xYSeries0.getKey();
        XYSeries xYSeries1 = new XYSeries(((Comparable) (comparable0)), false, false);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.addOrUpdate(((Number) (2)), ((Number) (10)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy(2, 2);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 2, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(0.0, 0.0, 0.0, 0.0);
        Comparable comparable0 = spinnerNumberModel0.getMaximum();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), false, false);
        xYSeries0.add(((Number) (52)), ((Number) (null)));
        xYSeries0.toArray();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.addOrUpdate(((double) (1)), ((double) (1)));
        xYSeries0.addOrUpdate(((Number) ((byte) (116))), ((Number) (11)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (6)), ((Number) (7)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (32769)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.update(6, 13);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = 6
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        xYSeries0.update((-9999), (-9999));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(1.0, 1.0);
        xYSeries0.clear();
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("media-size")), false);
        xYSeries0.clear();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        // Undeclared exception!
        try {
            xYSeries0.delete((-1864), 5);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        MockDate mockDate0 = new MockDate(2516, (-6590), (-1836), 1994, 1);
        Second second0 = new Second(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false);
        xYSeries0.delete(1994, 36);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        xYSeries0.addOrUpdate(((double) (1)), ((double) (1)));
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.add(((double) (1)), 0.0, true);
        Assert.assertEquals(1, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Year year0 = new Year(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, false);
        xYSeries0.addOrUpdate(((Number) (9999)), ((Number) (9999)));
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(((Number) (9999)), ((Number) (9999)));
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.addOrUpdate(((Number) (2)), ((Number) (10)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.createCopy(2, 2);
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("model")), true, true);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (6)), ((Number) (13)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        xYSeries0.add((-2.147483648E9), ((Number) (2)));
        xYSeries0.setMaximumItemCount(0);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Week week0 = new Week(1077, 0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (-9999)));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(0, 1886610483);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        xYSeries0.addOrUpdate(((Number) (2)), ((Number) (10)));
        xYSeries0.toArray();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, true);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Year year0 = new Year(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, false);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.0), (-2770.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(1.0, 1.0);
        xYSeries0.add(((Number) (1)), ((Number) ((byte) (29))));
        xYSeries0.addOrUpdate(((Number) ((byte) (18))), ((Number) (null)));
        Assert.assertEquals(3, xYSeries0.getItemCount());
        Byte byte0 = ((Byte) (xYSeries0.getX(2)));
        Assert.assertEquals(((byte) (18)), ((byte) (byte0)));
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-2770.503161428019), (-2770.503161428019));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(1.0, 1.0);
        xYSeries0.addOrUpdate((-2770.503161428019), (-2770.503161428019));
        {
            xYSeries0.addOrUpdate(((double) (1)), 3794.95484);
        }
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (9999)));
        {
            xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        }
    }
}

