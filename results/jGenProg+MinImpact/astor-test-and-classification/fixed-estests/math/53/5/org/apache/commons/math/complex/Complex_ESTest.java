/**
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 21:03:42 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(234.00119089814, (-1705.5984));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals((-2.466555588975593E-102), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex(2.3841857910019882E-8, 2.3841857910019882E-8);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply(2.3841857910019882E-8);
        boolean boolean0 = complex0.equals(complex2);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1.3552527155836258E-23), complex2.getImaginary(), 0.01);
        Assert.assertEquals(2.3841857910019882E-8, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertEquals((-5.684341886015777E-16), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(2.3841857910019882E-8, 2.3841857910019882E-8);
        Complex complex1 = complex0.sqrt1z();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals((-5.684341886015777E-16), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex(0.0, 1865.562572986);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(5.360313882025754E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals((-0.997250972307198), complex2.getReal(), 0.01);
        Assert.assertEquals(0.003256496869815726, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(6.71884969742825, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3.074932320639359), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex(0.0, 1865.562572986);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1865.562572986, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.6041470810541912), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex(1067.9544, 8.0);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.9999997905048259, complex1.getImaginary(), 0.01);
        Assert.assertEquals(8.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-8.22704291547509E-8), complex1.getReal(), 0.01);
        Assert.assertEquals(1067.9544, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex(2.3841857910019882E-8, 2.3841857910019882E-8);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.subtract(complex0);
        Complex complex3 = complex2.tan();
        Assert.assertEquals((-8.167072890692568E-8), complex3.getImaginary(), 0.01);
        Assert.assertEquals(1.557407642984169, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex((-1945.13668905164), 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(1945.136432000279, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        Complex complex1 = complex0.sqrt();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.1428571343421936, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex(111.67039629, 1348.77901647);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1348.77901647, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.3534235235350107E48), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-8.021625719973964E47), complex1.getReal(), 0.01);
        Assert.assertEquals(111.67039629, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(111.67039629, 1348.77901647);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-111.67036580687824), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-1467.469276), (-1467.469276));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals((-1467.4691056386919), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1467.469276), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(0.06666666666666667, Double.NEGATIVE_INFINITY);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(0.06666666666666667, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.06666666666666667), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex((-851.493413), 1169.5500518089);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-1169.5500518089), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1169.5500518089, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-851.493413), complex0.getReal(), 0.01);
        Assert.assertEquals(851.493413, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex((-610.7760322), (-610.7760322));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(9714.828468819805, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-23453.670645553022), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex(2.3841857910019882E-8, 2.3841857910019882E-8);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.subtract(complex0);
        Complex complex3 = complex2.multiply(complex2);
        Assert.assertEquals((-4.768371582003974E-8), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex((-851.493413), 1169.5500518089);
        Complex complex1 = complex0.multiply(1169.5500518089);
        Assert.assertEquals((-995864.1652890871), complex1.getReal(), 0.01);
        Assert.assertEquals(1367847.3236862007, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-851.493413), complex0.getReal(), 0.01);
        Assert.assertEquals(1169.5500518089, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex((-610.7760322), (-610.7760322));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-610.7760322), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
        Assert.assertEquals(6.761303922841443, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        boolean boolean0 = complex1.isNaN();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex((-1465.36059112298), (-1465.36059112298));
        Complex complex1 = complex0.cosh();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals((-1465.36059112298), complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.49999999999999994);
        double double0 = complex0.getReal();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.49999999999999994, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex(0.0, 1865.562572986);
        Complex complex1 = complex0.sqrt1z();
        double double0 = complex1.getReal();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1865.5628410016493, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        double double0 = complex0.getImaginary();
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1164.6891008640528), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex((-1010.914), 2427.8899272);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1.965339367462719, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2.356194490192345), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex((-1010.914), 2427.8899272);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2427.8899272, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(1771.213374, 1771.213374);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals((-0.002183176457975655), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex((-0.49999999999999994), Double.NaN);
        Complex complex1 = complex0.createComplex(0.0, Double.NaN);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex(0.0, 192.63);
        Complex complex1 = complex0.createComplex(192.63, 0.0);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(192.63, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex((-1350.9), (-1350.9));
        Complex complex1 = complex0.createComplex((-1240.87305977934), (-1240.87305977934));
        Assert.assertEquals((-1240.87305977934), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-1240.87305977934), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex((-480.8679369348982), (-480.8679369348982));
        Complex complex1 = complex0.cosh();
        Assert.assertEquals((-3.373944206993781E208), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-6.989122744335009E207), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-480.8679369348982), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex((-1465.36059112298), (-1465.36059112298));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.conjugate();
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex((-1945.13668905164), 0.0);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex((-1945.13668905164), 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-1945.13668905164), complex1.getReal(), 0.01);
        Assert.assertEquals((-1945.13668905164), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex((-2904.2814102626235), (-2904.2814102626235));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-1.7215962211980767E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5706241671659733), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-0.5));
        Complex complex1 = complex0.multiply((-4.503599627370496E15));
        Complex complex2 = complex1.asin();
        Assert.assertEquals(2.028240960365167E31, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-1138.7253), (-2063.32));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.add(complex1);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2063.32), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.add(complex1);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1.0, complex3.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex0.conjugate();
        Complex complex3 = complex1.add(complex2);
        Assert.assertEquals((-0.7853980712485833), complex1.getReal(), 0.01);
        Assert.assertEquals(1156.5891706290392, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex(1375.60782377779, 0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(7.91979801461671, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex((-851.493413), 1169.5500518089);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex((-480.8679369348982), (-480.8679369348982));
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex(0.0, 2.0);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex((-0.49999999999999994), Double.NaN);
        Complex complex1 = complex0.sqrt();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.49999999999999994), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex((-0.49999999999999994), Double.NaN);
        Complex complex1 = complex0.log();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.49999999999999994), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex((-1467.469276), (-1467.469276));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-851.493413), 1169.5500518089);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(1169.5500518089, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-851.493413), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex((-1.5707963267948966), 1407.0);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1.5707963267948966), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1407.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertEquals(0.1428571343421936, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex(1417.9, 1417.9);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
        Complex complex3 = complex1.divide(complex2);
        Assert.assertFalse(complex3.isInfinite());
        Assert.assertEquals(1417.9, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.49999999999999994);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.49999999999999994, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.49999999999999994);
        double double0 = complex0.abs();
        Assert.assertEquals(0.49999999999999994, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.49999999999999994, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex((-1350.9), (-1350.9));
        Complex complex1 = complex0.cos();
        double double0 = complex1.abs();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1350.9), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex((-1350.9), (-1350.9));
        double double0 = complex0.abs();
        Assert.assertEquals((-1350.9), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1910.4611014098143, double0, 0.01);
        Assert.assertEquals((-1350.9), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex((-0.49999999999999994), Double.NaN);
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.49999999999999994), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex((-1070.58524147841), (-1070.58524147841));
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex((-2904.2814102626235), (-2904.2814102626235));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2904.2814102626235), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2904.2814102626235), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        List<Complex> list0 = complex0.nthRoot(201);
        Assert.assertEquals(201, list0.size());
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.nthRoot((-62));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -62
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        List<Complex> list0 = complex0.nthRoot(1140);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.1428571343421936, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.tanh();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.1428571343421936, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex((-0.49999999999999994), Double.NaN);
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-0.49999999999999994), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex((-1467.469276), (-1467.469276));
        Complex complex1 = complex0.createComplex(0.0, 1.0);
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.7071067811865476, complex2.getReal(), 0.01);
        Assert.assertEquals(0.7071067811865475, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.exp();
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.cos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.asin();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.negate();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(0.06666666666666667, Double.NEGATIVE_INFINITY);
        Complex complex1 = complex0.multiply(Double.NEGATIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.06666666666666667, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(2981.343598727514, 2981.343598727514);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals(2981.343598727514, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(2981.343598727514, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        Complex complex1 = complex0.multiply(0.1428571343421936);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.1428571343421936, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex(2187.142, 2187.142);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        complex1.hashCode();
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        complex0.hashCode();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.1428571343421936, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = ((Complex) (complex0.readResolve()));
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex(2.3841857910019882E-8, 2.3841857910019882E-8);
        boolean boolean0 = complex0.equals(")");
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex(0.06666666666666667, Double.NEGATIVE_INFINITY);
        Complex complex1 = complex0.atan();
        List<Complex> list0 = complex1.nthRoot(1600);
        Assert.assertEquals(0.06666666666666667, complex0.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex((-1138.7253), (-2063.32));
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals((-2063.32), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(2981.343598727514, 2981.343598727514);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.sin();
        Complex complex3 = complex2.divide(complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(2981.343598727514, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-0.5));
        Complex complex1 = complex0.acos();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.asin();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-8.099930235013494), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.7853980712485833), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex((-0.49999999999999994), Double.NaN);
        double double0 = complex0.abs();
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals((-0.49999999999999994), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        Complex complex1 = complex0.createComplex(0.1428571343421936, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.1428571343421936, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        double double0 = complex0.getArgument();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        complex0.getField();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex0.tan();
        boolean boolean0 = complex2.equals(complex1);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        String string0 = complex0.toString();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals("(Infinity, 0.1428571343421936)", string0);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.1428571343421936);
        Complex complex1 = complex0.acos();
        complex1.multiply(0.1428571343421936);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex((-1164.6891008640528), (-1164.6891008640528));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.add(complex1);
        // AssertFixer: old assertion Assert.assertEquals((-1164.6891008640528), complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-1164.6891008640528), complex0.getReal(), 0.01)
        Assert.assertEquals(-1164.6891008640528, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(complex2.isNaN())
        Assert.assertTrue(complex2.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals((-1164.6891008640528), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-1164.6891008640528, complex0.getImaginary(), 0.01);
    }
}

