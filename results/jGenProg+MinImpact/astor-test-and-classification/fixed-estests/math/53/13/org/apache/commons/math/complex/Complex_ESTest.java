/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 15:04:28 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex((-4935.824852789067), (-4935.824852789067));
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(20.34585603999006, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(827.907716, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-2906.5201713629504), 1051.223862403);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1051.223862403, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2906.5201713629504), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex((-1621.72), (-1621.72));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals(0.7280443045087589, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-8.430963364226454), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        complex0.hashCode();
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        Complex complex1 = complex0.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals((-827.907716), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1655.815432), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.sqrt1z();
        complex1.equals(complex0);
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex0.getReal(), 0.01);
        Assert.assertEquals((-821.4667747434971), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-0.02710905328880712), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.559560941514025, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), (-0.12502530217170715));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-0.12631168031689563), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.12370634420706952), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.12502530217170715), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.12502530217170715), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex((-1621.72), (-1621.72));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex((-84.41080757871329), 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(84.404883958753, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.914410485000401), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-2250.5343891326233), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.12502530217170715), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.12535127538367968), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex((-784.6298038761496), 0.0);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.sin();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex((-784.6298038761496), 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.6949565852836207, complex1.getReal(), 0.01);
        Assert.assertEquals((-784.6298038761496), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(210.37297121748406, (-887.653080066719));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-887.653080066719), complex0.getImaginary(), 0.01);
        Assert.assertEquals(210.37284481959702, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-2910.0), 0.375);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals((-2.4359160607951637E-6), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-7.584056601812292E-5), complex2.getReal(), 0.01);
        Assert.assertEquals(0.375, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(1104.83347668, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1104.83347668), complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1104.83347668, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        Complex complex1 = complex0.negate();
        Assert.assertEquals(2250.5343891326233, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-2250.5343891326233), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex((-3506.16132), 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(3506.16132, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3506.16132), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex((-784.6298038761496), 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(615643.929130725, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertEquals((-31.489656741148394), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.multiply(2331.75086816261);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex0.getReal(), 0.01);
        Assert.assertEquals((-1915456.5748047982), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1915456.5748047982), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(285.6944824881, 2.7553817452272217E-6);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.log();
        Assert.assertEquals(7.78336251705761E-254, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(7.78336251705761E-254, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.log();
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertFalse(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex(816.0703859455418, (-7.44321345601866E-11));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.pow(complex0);
        boolean boolean0 = complex2.isNaN();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-7.44321345601866E-11), complex0.getImaginary(), 0.01);
        Assert.assertEquals(816.0703859455418, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex((-1621.72), (-1621.72));
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1621.72), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1621.72), complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex((-1271.043304125), (-1271.043304125));
        Complex complex1 = complex0.tanh();
        double double0 = complex1.getReal();
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1271.043304125), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1271.043304125), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        double double0 = complex0.getReal();
        Assert.assertEquals((-1990.9998), double0, 0.01);
        Assert.assertEquals((-1990.9998), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.tanh();
        double double0 = complex1.getImaginary();
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), double0, 0.01);
        Assert.assertEquals((-821.467079077), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex((-4833.562238711623), 0.0);
        Complex complex1 = complex0.tan();
        double double0 = complex1.getArgument();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(4.431474167603262, complex1.getReal(), 0.01);
        Assert.assertEquals((-4833.562238711623), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex((-2910.0), 0.375);
        double double0 = complex0.getArgument();
        Assert.assertEquals(3.141463787611125, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex(816.0703859455418, (-7.44321345601866E-11));
        Complex complex1 = complex0.exp();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-7.44321345601866E-11), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex((-34.04025), (-34.04025));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-34.04025), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.4309135730198863E-15), complex1.getReal(), 0.01);
        Assert.assertEquals((-8.141060257159392E-16), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals((-0.01227913205835274), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(2936.78, 2936.78);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(2.8986593397379055E-8, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.createComplex((-821.467079077), Double.NaN);
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.createComplex(217.428, 217.428);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(217.428, complex1.getImaginary(), 0.01);
        Assert.assertEquals(217.428, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        Complex complex1 = complex0.createComplex((-827.907716), 0.0);
        Assert.assertEquals((-827.907716), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.createComplex((-821.467079077), (-821.467079077));
        Assert.assertEquals((-821.467079077), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.cos();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-1.0));
        Complex complex1 = complex0.cos();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.8337300251311491, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.9888977057628651), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex((-4935.824852789067), (-4935.824852789067));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex((-784.6298038761496), 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-784.6298038761496), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-784.6298038761496), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex((-2910.0), 0.375);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.375, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.375), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2910.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-2910.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), (-0.12502530217170715));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-0.1263032054467564), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.12369854785465219), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-4935.824852789067), (-4935.824852789067));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.add(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex((-537.3287283), 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals(3.141592653589793, complex1.getImaginary(), 0.01);
        Assert.assertEquals(3.141592653589793, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-531.0421182357995), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex(0.11764700710773468, 0.11764700710773468);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.tan();
        Assert.assertEquals((-4.3092267245887), complex2.getImaginary(), 0.01);
        Assert.assertEquals(4.191590982420574, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex((-3506.16132), 0.0);
        complex0.nthRoot(2586);
        complex0.nthRoot(2586);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex((-1.7976931348623157E308), (-1.7976931348623157E308));
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex(0.946986354021607, (-1825123.2080466985));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.log();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.946986354021607, complex0.getReal(), 0.01);
        Assert.assertEquals((-1825123.2080466985), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-1.0));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.3465735902799727, complex1.getReal(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex((-1423.22057553), (-1575.394281947));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals((-1423.22057553), complex0.getReal(), 0.01);
        Assert.assertEquals((-1575.394281947), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-4833.562238711623), 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(1247.83918120466, 1247.83918120466);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertEquals(1247.83918120466, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1247.83918120466, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-1.0));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(2.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.exp();
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-827.907716), complex0.getImaginary(), 0.01);
        Assert.assertEquals(827.907716, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex((-2906.5201713629504), 1051.223862403);
        Complex complex1 = complex0.sinh();
        double double0 = complex1.abs();
        Assert.assertEquals(1051.223862403, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2906.5201713629504), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        double double0 = complex0.abs();
        Assert.assertEquals((-1990.9998), complex0.getImaginary(), 0.01);
        Assert.assertEquals(2815.69891984212, double0, 0.01);
        Assert.assertEquals((-1990.9998), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex((-681.7613765636032), Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals((-681.7613765636032), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex((-1621.72), (-1621.72));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals((-1621.72), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1621.72), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        double double0 = complex0.getImaginary();
        Assert.assertEquals((-2250.5343891326233), double0, 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2250.5343891326233), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex(2.85040095144011776E17, 2.85040095144011776E17);
        Complex complex1 = complex0.asin();
        complex1.nthRoot(1);
        Assert.assertEquals(2.85040095144011776E17, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex(2.85040095144011776E17, 2.85040095144011776E17);
        try {
            complex0.nthRoot((-1569));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -1,569
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1990.9998), complex0.getReal(), 0.01);
        Assert.assertEquals((-1990.9998), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex(816.0703859455418, (-7.44321345601866E-11));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(816.0703859455418, complex0.getReal(), 0.01);
        Assert.assertEquals((-7.44321345601866E-11), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex2.acos();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals((-848.2535720399901), complex2.getImaginary(), 0.01);
        Assert.assertEquals(20.34585603999006, complex1.getReal(), 0.01);
        Assert.assertEquals(20.34585603999006, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.sinh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-1990.9998), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1990.9998), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.exp();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-827.907716), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals((-1990.9998), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals((-1990.9998), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(608.5967, (-1.0));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.cos();
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(608.5967, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(2.85040095144011776E17, 2.85040095144011776E17);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.atan();
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(608.5967, (-1.0));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.asin();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(608.5967, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex(608.5967, (-1.0));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.acos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(608.5967, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex((-4833.562238711623), 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex2.sin();
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex(608.5967, (-1.0));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.subtract(complex1);
        Assert.assertEquals(608.5967, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex(1393.388328952631, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.negate();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1393.388328952631, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-978.4256457016027));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex(816.0703859455418, (-7.44321345601866E-11));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(1.0);
        Assert.assertEquals(816.0703859455418, complex0.getReal(), 0.01);
        Assert.assertEquals((-7.44321345601866E-11), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.multiply((-827.907716));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-827.907716), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(1393.388328952631, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(1393.388328952631, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex((-1423.22057553), (-1575.394281947));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1575.394281947), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1423.22057553), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(2.85040095144011776E17, 2.85040095144011776E17);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.sqrt();
        complex2.hashCode();
        Assert.assertEquals(2.85040095144011776E17, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        complex0.hashCode();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2250.5343891326233), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(816.0703859455418, (-7.44321345601866E-11));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(816.0703859455418, complex1.getReal(), 0.01);
        Assert.assertEquals((-7.44321345601866E-11), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex(0.0, (-827.907716));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt();
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-827.907716), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex((-1423.22057553), (-1575.394281947));
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1575.394281947), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1423.22057553), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex0.getReal(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        Complex complex1 = complex0.sqrt1z();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2250.534611302068, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex(2.85040095144011776E17, 2.85040095144011776E17);
        Complex complex1 = complex0.asin();
        complex1.divide(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex(2.85040095144011776E17, 2.85040095144011776E17);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex((-821.467079077), (-821.467079077));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-821.467079077), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-821.467079077), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-1990.9998), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1990.9998), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex((-1990.9998), (-1990.9998));
        Complex complex1 = complex0.tanh();
        double double0 = complex1.abs();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals((-1990.9998), complex0.getReal(), 0.01);
        Assert.assertEquals((-1990.9998), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(1104.83347668, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.asin();
        Assert.assertEquals(1104.83347668, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(2.85040095144011776E17, 2.85040095144011776E17);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.conjugate();
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(2.85040095144011776E17, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        Complex complex1 = complex0.sin();
        List<Complex> list0 = complex1.nthRoot(3953);
        Assert.assertEquals((-2250.5343891326233), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-1.5707963267948966), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        Complex complex1 = complex0.add(complex0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-2250.5343891326233), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-4501.068778265247), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        complex0.getField();
        Assert.assertEquals((-2250.5343891326233), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals("(0.0, -2250.5343891326233)", string0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2250.5343891326233));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.sinh();
        complex2.getImaginary();
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex((-1621.72), (-1621.72));
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals((-1621.72), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1621.72), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex(1393.388328952631, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex2.isInfinite())
        Assert.assertFalse(complex2.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }
}

