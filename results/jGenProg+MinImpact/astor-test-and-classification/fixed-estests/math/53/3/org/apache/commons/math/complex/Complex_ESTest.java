/**
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 22:52:26 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.041666663879186654);
        List<Complex> list0 = complex0.nthRoot(141);
        Assert.assertEquals(141, list0.size());
        Assert.assertEquals(0.041666663879186654, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(5173.0261, 0.0);
        Complex complex1 = complex0.createComplex(0.0, 1.4456468917292502E-16);
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.sqrt1z();
        Assert.assertEquals((-3.51596852386648E-8), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-35.8537), (-2652.52996862424));
        Complex complex1 = complex0.sin();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-35.8537), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2652.52996862424), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex((-35.8537), (-2652.52996862424));
        Complex complex1 = complex0.cosh();
        Assert.assertEquals((-2652.52996862424), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(9.65458915977126E14, complex1.getReal(), 0.01);
        Assert.assertEquals(1.592420062316902E15, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex((-1161.3383796285555), 0.875);
        complex0.hashCode();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1161.3383796285555), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.875, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(2141.533741478816, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(2141.533741478816);
        Complex complex2 = complex0.log();
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(1.5707963267948966, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex((-70.79353515102927), 4252.082413426917);
        Complex complex1 = new Complex(4252.082413426917, 4252.082413426917);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals(4252.082413426917, complex0.getImaginary(), 0.01);
        Assert.assertEquals(4252.082413426917, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex((-540.2415011), (-1527.87));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex((-540.2415011), (-1527.87));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals((-1.830547252686939E234), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1527.87), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0355622669425946E234), complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex((-56.0), (-56.0));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.sinh();
        Assert.assertEquals(5.454535530850916E23, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-8.923229702535873E23), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex3.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-2057.5076019785));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-1359.532930038079), (-1359.532930038079));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.negate();
        Complex complex3 = complex2.tanh();
        Assert.assertEquals((-1359.532930038079), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.9999999999999959), complex3.getReal(), 0.01);
        Assert.assertEquals((-3.2648688207659496E-15), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex((-1161.3383796285555), 0.875);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-1161.3383796285555), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.875), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1161.3383796285555, complex1.getReal(), 0.01);
        Assert.assertEquals(0.875, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex(1.2675934823758863E-8, 1.2675934823758863E-8);
        Complex complex1 = complex0.createComplex(1.2675934823758863E-8, (-612.7507034815));
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(7.767187980704565E-6, complex2.getReal(), 0.01);
        Assert.assertEquals((-7.767187980383208E-6), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-612.7507034815), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex((-540.2415011), (-1527.87));
        Complex complex1 = complex0.multiply((-1527.87));
        complex1.multiply((-540.2415011));
        Assert.assertEquals(2334386.7368999994, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-540.2415011), complex0.getReal(), 0.01);
        Assert.assertEquals((-1527.87), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(825418.782285657, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex(2141.533741478816, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.log();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(2141.533741478816, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.tan();
        boolean boolean0 = complex1.isNaN();
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(13.07, Double.NEGATIVE_INFINITY);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals(13.07, complex0.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.cosh();
        double double0 = complex1.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals((-2769.31654), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex((-8.0E298), (-8.0E298));
        Complex complex1 = complex0.pow(complex0);
        double double0 = complex1.getImaginary();
        Assert.assertEquals((-0.0), double0, 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.conjugate();
        double double0 = complex1.getArgument();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(2.356194490192345, double0, 0.01);
        Assert.assertEquals((-2769.31654), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex((-1359.532930038079), (-1359.532930038079));
        Complex complex1 = complex0.exp();
        double double0 = complex1.getReal();
        Assert.assertEquals((-0.0), double0, 0.01);
        Assert.assertEquals((-1359.532930038079), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.9734393506042344), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.22894503859050214), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex(0.097, (-2558.533));
        Complex complex1 = complex0.createComplex((-2558.533), (-2558.533));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2558.533), complex1.getReal(), 0.01);
        Assert.assertEquals((-2558.533), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2558.533), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex((-1359.532930038079), (-1359.532930038079));
        Complex complex1 = complex0.cos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1359.532930038079), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex((-1161.3383796285555), 0.875);
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.tan();
        Assert.assertEquals((-1.1353368384520741), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.875), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1161.3383796285555), complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.35084307978352747, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-1161.3383796285555), 0.875);
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.tan();
        Assert.assertEquals((-1161.3383796580295), complex2.getReal(), 0.01);
        Assert.assertEquals(0.8750000000374342, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex((-1161.3383796285555), 0.875);
        Complex complex1 = complex0.createComplex(1.0, (-597.564379));
        Complex complex2 = complex1.atan();
        Assert.assertEquals(1.570793526327005, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0016734567322914885), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex((-540.2415011), (-1527.87));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.add(complex1);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex((-8.0E298), (-8.0E298));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-8.0E298), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.6E299), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.6E299), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-8.0E298), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex(1803.25, 1803.25);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.acos();
        Assert.assertEquals((-5.806902117257145E151), complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex((-1095.0519230792), 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals((-49.83502284995071), complex2.getReal(), 0.01);
        Assert.assertEquals((-122.01335068977657), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex((-147.63214619358), (-147.63214619358));
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex(2018.77252, (-437.06772121056));
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex(5173.0261, 0.0);
        complex0.nthRoot(5192);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex(2.384185791015625E-7, 2.384185791015625E-7);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex((-1095.0519230792), 0.0);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex((-1235.4080998), 0.0);
        try {
            complex0.nthRoot((-1303));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -1,303
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.041666663879186654);
        Complex complex1 = complex0.createComplex(0.0, Double.NaN);
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.041666663879186654, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.041666663879186654);
        Complex complex1 = complex0.createComplex(0.0, Double.NaN);
        Complex complex2 = complex1.log();
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.041666663879186654, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex(1333.0, (-697.086));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.exp();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-697.086), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1333.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex((-2506.576926744), 6.283185307179586);
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2506.576926744), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex(2141.533741478816, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals((-2769.31654), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(4252.082413426917, 4252.082413426917);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex(13.07, Double.NEGATIVE_INFINITY);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(13.07, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex(0.1428571343421936, 0.1428571343421936);
        Complex complex1 = complex0.multiply(Double.NaN);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.1428571343421936, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.1428571343421936, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-1161.3383796285555), 0.875);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex(2141.533741478816, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(2141.533741478816, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex(0.0, (-4250.362101923));
        double double0 = complex0.abs();
        Assert.assertEquals(4250.362101923, double0, 0.01);
        Assert.assertEquals((-4250.362101923), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex((-56.0), (-56.0));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.asin();
        double double0 = complex2.abs();
        Assert.assertEquals((-56.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(5.454535530850916E23, complex1.getImaginary(), 0.01);
        Assert.assertEquals(8.923229702535873E23, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex((-1359.532930038079), (-1359.532930038079));
        double double0 = complex0.abs();
        Assert.assertEquals((-1359.532930038079), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1359.532930038079), complex0.getReal(), 0.01);
        Assert.assertEquals(1922.6699081526838, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex((-3226.169150867), (-3226.169150867));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-3226.169150867), complex0.getReal(), 0.01);
        Assert.assertEquals((-3226.169150867), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-2057.5076019785));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-2057.5076019785), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex((-1359.532930038079), (-1359.532930038079));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1359.532930038079), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1359.532930038079), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-2057.5076019785));
        Complex complex1 = complex0.sin();
        List<Complex> list0 = complex1.nthRoot(1850);
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-2057.5076019785), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.041666663879186654);
        Complex complex1 = complex0.createComplex(0.0, Double.NaN);
        List<Complex> list0 = complex1.nthRoot(141);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.041666663879186654, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.tanh();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals((-2769.31654), complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.tan();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex(0.0, 284.273236);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(11.922106273641415, complex1.getReal(), 0.01);
        Assert.assertEquals(284.273236, complex0.getImaginary(), 0.01);
        Assert.assertEquals(11.922106273641417, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(1333.0, (-697.086));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(1333.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-697.086), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-2057.5076019785));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.sin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2057.5076019785), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(2134.654061978907, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.cosh();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-2057.5076019785));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.cos();
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2057.5076019785), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex((-647.48728132004), (-1728.5761176272));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals((-6.062299065756121E280), complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-5.107843248861719E280), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1728.5761176272), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex(2134.654061978907, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.subtract(complex1);
        Assert.assertSame(complex2, complex1);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(2134.654061978907, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.041666663879186654);
        Complex complex1 = complex0.createComplex(0.0, Double.NaN);
        Complex complex2 = complex1.negate();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.041666663879186654, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(0.7853981633974483);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2769.31654), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.asin();
        Complex complex4 = complex3.multiply(Double.NaN);
        Assert.assertSame(complex4, complex3);
        Assert.assertEquals(2769.31654, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex((-1.0), (-2057.5076019785));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.pow(complex1);
        double double0 = complex2.getImaginary();
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2057.5076019785), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.asin();
        Complex complex4 = ((Complex) (complex3.readResolve()));
        Complex complex5 = complex0.pow(complex4);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertSame(complex5, complex3);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.tan();
        complex1.hashCode();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.negate();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.createComplex(0.0, 6.283185307179586);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        boolean boolean0 = complex0.equals("");
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex((-1702.811), 2427.00621899719);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2427.00621899719, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex0.divide(complex2);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals((-2769.31654), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.041666663879186654);
        Complex complex1 = complex0.createComplex(0.0, Double.NaN);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.041666663879186654, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex((-2769.31654), (-2769.31654));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.conjugate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.asin();
        Assert.assertEquals(15.23855307221878, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(2134.654061978907, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(2134.654061978907, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        Complex complex1 = complex0.tan();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.5707963267948966), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        complex0.getField();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.asin();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals("(0.0, -1440.651225469)", string0);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        complex0.asin();
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1440.651225469));
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-1440.651225469), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex((-540.2415011), (-1527.87));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.add(complex0);
        // AssertFixer: old assertion Assert.assertEquals((-1527.87), complex2.getImaginary(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals((-540.2415011), complex0.getReal(), 0.01)
        Assert.assertEquals(-540.2415011, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01)
        Assert.assertEquals(-0.0, complex1.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(complex2.isNaN())
        Assert.assertTrue(complex2.isNaN());
        // AssertFixer: old assertion Assert.assertEquals((-1527.87), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-1527.87, complex0.getImaginary(), 0.01);
    }
}

