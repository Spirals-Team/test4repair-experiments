/**
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 19:30:08 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(0.1428571343421936, 0.1428571343421936);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(3.834E-20, 3.834E-20);
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(3.834E-20, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2.9399112E-39, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-1620.912463), (-1620.912463));
        complex0.hashCode();
        Assert.assertEquals((-1620.912463), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1620.912463), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex((-247.34734023116), (-247.34734023116));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-247.34734023116), complex0.getImaginary(), 0.01);
        Assert.assertEquals(2.853698461755529E-215, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-247.34734023116), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2272.864018377333));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-12.750759897349784), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2272.864018377333), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex(1254.88681926421, 1.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex(132.80307, 132.80307);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(1.552636208478605E57, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(132.80307, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.7895965800142552E57, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex((-1183.6198), 2.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex0.pow(complex2);
        Assert.assertEquals((-0.11086736308355577), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-44882.558746960385), complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex((-3776.992), (-3776.992));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.negate();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(3.834E-20, 3.834E-20);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals((-1.7309213260062949E-18), complex2.getReal(), 0.01);
        Assert.assertEquals((-1.6706969948369786E-18), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-527.7236), 0.0);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-12122.990773685699), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex((-1183.6198), 2.0);
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1183.6198), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex((-2311.569747158), (-2311.569747158));
        Complex complex1 = complex0.multiply(6.283185307179586);
        Assert.assertEquals((-2311.569747158), complex0.getReal(), 0.01);
        Assert.assertEquals((-14524.021071863977), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2311.569747158), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-14524.021071863977), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex((-2311.569747158), (-2311.569747158));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-2311.569747158), complex0.getImaginary(), 0.01);
        Assert.assertEquals(8.092255707234425, complex1.getReal(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex((-3776.992), (-3776.992));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        boolean boolean0 = complex2.isNaN();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3776.992), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3776.992), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex((-1178.234866287275), 0.2222222089767456);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.2222222089767456, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1178.234866287275), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex((-527.7236), 0.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-527.7236), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex((-1608.7932301518388), (-1608.7932301518388));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2.356194490192345), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex((-1178.234866287275), 0.2222222089767456);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.2222222089767456, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex(482.110184148, 482.110184148);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(482.110184148, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2.9587192622697855E208), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2.368261090540792E209), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex(1875.25611370808, 2621.7954037016384);
        Complex complex1 = complex0.createComplex(0.0, 1875.25611370808);
        Complex complex2 = complex0.sqrt1z();
        Complex complex3 = complex1.divide(complex2);
        Assert.assertEquals((-0.33844571466828777), complex3.getReal(), 0.01);
        Assert.assertEquals(2621.795529865996, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex(3.834E-20, 3.834E-20);
        Complex complex1 = complex0.createComplex(3.834E-20, Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(3.834E-20, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex((-4565.482699), (-4565.482699));
        Complex complex1 = complex0.createComplex((-4565.482699), 0.0);
        Assert.assertEquals((-4565.482699), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.createComplex(Double.NaN, 1243.14);
        Assert.assertEquals(1243.14, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2272.864018377333));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals((-0.07818661390191392), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2272.864018377333), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.07818661390191392, complex2.getReal(), 0.01);
        Assert.assertEquals((-2272.864018377333), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-1620.912463), (-1620.912463));
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-1620.912463), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1620.912463), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex((-814.93), (-814.93));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-6.135494760517877E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5701827770108894), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex((-1183.6198), 2.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.atan();
        double double0 = complex2.getImaginary();
        Assert.assertEquals((-0.11086736308355577), double0, 0.01);
        Assert.assertEquals(3.139902922807716, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex((-247.34734023116), (-247.34734023116));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-6.55051435540431), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.7853961202696929), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2272.864018377333));
        Complex complex1 = new Complex((-2272.864018377333), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.add(complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex(132.80307, 132.80307);
        Complex complex1 = complex0.negate();
        Complex complex2 = complex0.add(complex1);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex((-1183.6198), 2.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.add(complex1);
        Assert.assertEquals((-1180.4798970771922), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex(29.884648696905675, 29.884648696905675);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(1.881028165283724E11, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-4.757390680852689E12), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-1178.234866287275), 0.2222222089767456);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.tan();
        Assert.assertEquals((-1.3586011416737181E-10), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.9999996398310286), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2430.7157139));
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex((-334.931158), 3.814697265625E-6);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex((-3776.992), (-3776.992));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.sqrt();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals((-3776.992), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3776.992), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex((-1178.234866287275), 0.2222222089767456);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.log();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex3.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.2222222089767456, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1178.234866287275), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2272.864018377333));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-2272.864018377333), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex((-3776.992), (-3776.992));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex0.subtract(complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex3.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3776.992), complex0.getReal(), 0.01);
        Assert.assertEquals((-3776.992), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex((-2311.569747158), (-2311.569747158));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2311.569747158), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex((-527.7236), 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(278492.19799696, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.log();
        Complex complex3 = complex1.divide(complex2);
        Assert.assertEquals(3.141592653589793, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-2311.569747158), (-2311.569747158));
        Complex complex1 = complex0.createComplex(0.0, (-2311.569747158));
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2311.569747158), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(29.884648696905675, 29.884648696905675);
        Complex complex1 = complex0.sinh();
        double double0 = complex1.abs();
        Assert.assertEquals((-4.757390680852689E12), complex1.getImaginary(), 0.01);
        Assert.assertEquals(29.884648696905675, complex0.getImaginary(), 0.01);
        Assert.assertEquals(4.761107934068489E12, double0, 0.01);
        Assert.assertEquals(29.884648696905675, complex0.getReal(), 0.01);
        Assert.assertEquals(1.881028165283724E11, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex((-2311.569747158), (-2311.569747158));
        Complex complex1 = complex0.cosh();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2311.569747158), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex(29.884648696905675, 29.884648696905675);
        double double0 = complex0.abs();
        Assert.assertEquals(42.26327549391945, double0, 0.01);
        Assert.assertEquals(29.884648696905675, complex0.getReal(), 0.01);
        Assert.assertEquals(29.884648696905675, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-542.63745593302));
        Assert.assertEquals((-542.63745593302), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex(0.07490822288864472, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.07490822288864472, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex(29.884648696905675, 29.884648696905675);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(29.884648696905675, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(29.884648696905675, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex((-1183.6198), 2.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(2.0, double0, 0.01);
        Assert.assertEquals((-1183.6198), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex(3.834E-20, 3.834E-20);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(7.668E-20, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(7.668E-20, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex(3.834E-20, 3.834E-20);
        complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        List<Complex> list0 = complex0.nthRoot(37);
        Assert.assertEquals(37, list0.size());
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        List<Complex> list0 = complex1.nthRoot(3189);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex((-3152.75), (-7.2251890923557935));
        Complex complex1 = complex0.tanh();
        complex1.nthRoot(1);
        Assert.assertEquals((-7.2251890923557935), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3152.75), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.nthRoot((-1264));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -1,264
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.tanh();
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex2.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2272.864018377333));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-33.711007240791055), complex1.getImaginary(), 0.01);
        Assert.assertEquals(33.71100724079105, complex1.getReal(), 0.01);
        Assert.assertEquals((-2272.864018377333), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(3.834E-20, 3.834E-20);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(1819.42, 803.558);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.sinh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1819.42, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(803.558, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.sin();
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        Complex complex3 = complex2.exp();
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.cosh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(1254.88681926421, 1.0);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.cos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(1254.88681926421, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex((-3152.75), (-7.2251890923557935));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.asin();
        Assert.assertTrue(complex3.equals(((Object) (complex1))));
        Assert.assertEquals((-3152.75), complex0.getReal(), 0.01);
        Assert.assertEquals((-7.2251890923557935), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex((-2311.569747158), (-2311.569747158));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2311.569747158), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2311.569747158), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex((-3152.75), (-7.2251890923557935));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-7.2251890923557935), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex((-3152.75), (-7.2251890923557935));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.subtract(complex1);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-3152.75), complex0.getReal(), 0.01);
        Assert.assertEquals((-7.2251890923557935), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex((-3776.992), (-3776.992));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        Complex complex3 = complex2.negate();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3776.992), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3776.992), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.multiply(131.80307);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex(1254.88681926421, 1.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply((-2950.0503184));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(1254.88681926421, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(132.80307, 132.80307);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(132.80307, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(132.80307, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(1254.88681926421, 1.0);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.multiply((-1.0));
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1254.88681926421, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(4510.74485, 0.2222222089767456);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.2222222089767456, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex(1254.88681926421, 1.0);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(1254.88681926421, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex((-3152.75), (-7.2251890923557935));
        Complex complex1 = complex0.tanh();
        complex1.hashCode();
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-7.2251890923557935), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3152.75), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(complex0);
        boolean boolean0 = complex0.equals(complex2);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex(4510.74485, 0.2222222089767456);
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertEquals(0.2222222089767456, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(4510.74485, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertEquals(2.5396240593052837, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.18687353237798543, complex1.getReal(), 0.01);
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex1.divide(complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex2.divide(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex((-2311.569747158), (-2311.569747158));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals((-2311.569747158), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals((-2311.569747158), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(3.834E-20, 3.834E-20);
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(3.834E-20, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt1z();
        double double0 = complex2.abs();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.acos();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1.569997424593803, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getField();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals("(1.5874010519681994, 1986.97752)", string0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.log();
        Complex complex3 = complex2.sqrt();
        complex1.pow(complex3);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(1986.97752, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex(1.5874010519681994, 1986.97752);
        Complex complex1 = ((Complex) (complex0.readResolve()));
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(1.5874010519681994, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1986.97752, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex((-2311.569747158), (-2311.569747158));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.add(complex1);
        // AssertFixer: old assertion Assert.assertEquals(0.0, complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-2311.569747158), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-2311.569747158, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(complex2.isNaN())
        Assert.assertTrue(complex2.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }
}

