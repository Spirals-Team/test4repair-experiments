/**
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 00:01:21 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(0.4770587682723999, 0.0);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-6.331009331992412E-18), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(1.266762260299142E-50, 1.266762260299142E-50);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(1.125505335526732E-25, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.266762260299142E-50, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.cos();
        Assert.assertEquals(1.0922309152948338E14, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(33.0175607983373, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf(317.21118353752);
        Complex complex1 = complex0.multiply(0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(317.21118353752, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.3360364354522668, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.8499580454078004), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex((-672.6), (-672.6));
        Complex complex1 = complex0.subtract((-672.6));
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-672.6), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.001486767766874814, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-1828.56737));
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1828.56737), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-1828.56737));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-2.6799673472427634E-18), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-1828.56737), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex((-1432.0));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1432.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf((-299.19058909465));
        Complex complex1 = complex0.subtract(16.4);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-315.59058909465), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf(2892.09155370274, 2892.09155370274);
        Complex complex1 = complex0.pow(2892.09155370274);
        Complex complex2 = complex1.subtract(7.749348772180658E175);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(2892.09155370274, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(1.266762260299142E-50, 1.266762260299142E-50);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals((-1.6046866241181912E-100), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-1915.3443032108191), (-1915.3443032108191));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(19.916846976918396, complex1.getReal(), 0.01);
        Assert.assertEquals((-1915.3443032108191), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-48.08352209138597), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex((-1023.473), (-1023.473));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1023.473), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1023.473), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4394452571868896, (-1.0));
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.4394452571868896, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0755516604093889, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.8745509271692353), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-1369.9618));
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1369.9618), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.22544817991626662), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.createComplex(1432.0, (-4374.5319180333));
        Complex complex2 = complex0.multiply(complex1);
        Complex complex3 = complex0.pow(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-5809.110936226141), complex2.getReal(), 0.01);
        Assert.assertEquals((-4374.5319180333), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex(459.18776149, 459.18776149);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex0.divide(459.18776149);
        Complex complex3 = complex1.subtract(complex2);
        Complex complex4 = complex2.subtract(complex3);
        Complex complex5 = complex4.pow(complex3);
        Assert.assertEquals((-0.19620548690659), complex5.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf((-1250.357468), (-1250.357468));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-1454.7659737), (-1454.7659737));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf((-1454.7659737));
        Complex complex1 = Complex.valueOf((-1454.7659737), (-1454.7659737));
        Complex complex2 = complex0.multiply(complex1);
        Complex complex3 = complex2.negate();
        Assert.assertEquals(2116344.0382353086, complex2.getReal(), 0.01);
        Assert.assertEquals(2116344.0382353086, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2116344.0382353086), complex3.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2116344.0382353086), complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf((-1454.7659737));
        Complex complex1 = Complex.valueOf((-1454.7659737), (-1454.7659737));
        Complex complex2 = complex1.tan();
        Complex complex3 = complex0.multiply(complex2);
        Assert.assertEquals((-1454.7659737), complex1.getReal(), 0.01);
        Assert.assertEquals(1454.7659737, complex3.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf((-299.19058909465));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-89515.00860280372), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.divide((-1.0004441581014705));
        Complex complex2 = complex0.createComplex(1432.0, (-4374.5319180333));
        Complex complex3 = complex0.subtract(complex2);
        Complex complex4 = complex3.reciprocal();
        Complex complex5 = complex1.multiply(complex4);
        Assert.assertEquals(1.388269604011484E-4, complex5.getReal(), 0.01);
        Assert.assertEquals((-2.741352390116988E-4), complex5.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf((-299.19058909465));
        Complex complex1 = complex0.multiply(4381);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-299.19058909465), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1310753.9708236617), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf((-1454.7659737), (-1454.7659737));
        Complex complex1 = complex0.multiply(1351);
        Assert.assertEquals((-1965388.8304686998), complex1.getReal(), 0.01);
        Assert.assertEquals((-1454.7659737), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1965388.8304686998), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1454.7659737), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-1828.56737));
        Complex complex1 = complex0.multiply((-520.6));
        Complex complex2 = complex1.multiply((-20.0));
        Assert.assertEquals(951952.172822, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(10412.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1828.56737), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
        Complex complex1 = complex0.divide((-1090.1593210719));
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex((-1.0356006160554071E245));
        Complex complex1 = complex0.acos();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.0356006160554071E245), complex0.getReal(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3660.0439462));
        double double0 = complex0.getReal();
        Assert.assertEquals((-3660.0439462), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-1872.1), (-1872.1));
        Complex complex1 = complex0.cosh();
        double double0 = complex1.getReal();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1872.1), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex((-782.427931129));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-782.427931129), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(459.18776149, 459.18776149);
        Complex complex1 = complex0.reciprocal();
        double double0 = complex1.getImaginary();
        Assert.assertEquals(459.18776149, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0010888791948147093, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0010888791948147093), double0, 0.01);
        Assert.assertEquals(459.18776149, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
        double double0 = complex0.getArgument();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(3.141592653589793, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex(4.01780853635105E197, 4.01780853635105E197);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(4.01780853635105E197, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex((-1915.3443032108191), (-1915.3443032108191));
        Complex complex1 = complex0.exp();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1915.3443032108191), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex(4.139493534401503, 4.139493534401503);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(4.139493534401503, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-52.74868509458444), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-34.02612860704615), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.createComplex(1432.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.0004441581014705), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf(6146.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(6146.0);
        Assert.assertEquals(6146.0, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex(4.139493534401503, 4.139493534401503);
        Complex complex1 = complex0.divide((-7.40238661307607E-8));
        Assert.assertEquals((-5.592106641781213E7), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-5.592106641781213E7), complex1.getReal(), 0.01);
        Assert.assertEquals(4.139493534401503, complex0.getImaginary(), 0.01);
        Assert.assertEquals(4.139493534401503, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex(4.139493534401503, 4.139493534401503);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(4.139493534401503, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-26.36764889355211), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-17.017382119646896), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf((-939.213137), 0.6881450095794239);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.6881450095794239, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.9996443692634647), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.conjugate();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3660.0439462));
        Complex complex1 = complex0.conjugate();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(boolean0);
        Assert.assertEquals(3660.0439462, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex((-1915.3443032108191), (-1915.3443032108191));
        Complex complex1 = complex0.multiply((-1));
        Complex complex2 = complex1.conjugate();
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(1915.3443032108191, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1915.3443032108191, complex2.getReal(), 0.01);
        Assert.assertEquals((-1915.3443032108191), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf((-939.213137), 0.6881450095794239);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.7853981633974483), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf((-299.19058909465));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.asin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex((-1023.473), (-1023.473));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.7853980440653622), complex1.getReal(), 0.01);
        Assert.assertEquals((-7.970677795524931), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf((-2.0697130057384643E245), 0.9999990246875953);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.add(complex1);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf((-2019.10587988545), (-2019.10587988545));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-2019.10587988545), complex0.getReal(), 0.01);
        Assert.assertEquals((-4038.2117597709), complex1.getReal(), 0.01);
        Assert.assertEquals((-4038.2117597709), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2019.10587988545), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.add(826.7351376433444);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(826.7351376433444, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4394452571868896, (-1.0));
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(1.4394452571868896, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex(1.7067952022610908, 0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(1.1281587313406138, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(2.022918657888705, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.5303849800103073), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex((-1915.3443032108191), (-1915.3443032108191));
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf(2507.0);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex(1174.262444217);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf(0.001396647363608656, 0.001396647363608656);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
        Assert.assertEquals(0.030296179060946258, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.sqrt();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.log();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1.0);
        Complex complex1 = complex0.exp();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex(1174.262444217);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(0.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf(459.18776149, 459.18776149);
        Complex complex1 = complex0.pow(459.18776149);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(459.18776149, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(459.18776149, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex((-3.4650891244084597E148), (-3.4650891244084597E148));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3.4650891244084597E148), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2.0);
        Complex complex1 = complex0.createComplex((-195.3837234663), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-195.3837234663), complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex((-1872.1), (-1872.1));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1872.1), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.createComplex((-1.0004441581014705), (-4374.5319180333));
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex1.divide(complex2);
        Assert.assertEquals(2.2874973327104465E-4, complex3.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.000228749733271), complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1.0);
        Complex complex1 = complex0.createComplex((-267.2428), (-267.2428));
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-267.2428), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-267.2428), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(1.266762260299142E-50, 1.266762260299142E-50);
        Complex complex1 = complex0.pow(37.841775856849004);
        double double0 = complex1.abs();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.createComplex((-806.1688217906), (-2625.69));
        double double0 = complex1.abs();
        Assert.assertEquals((-2625.69), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2746.6627287177516, double0, 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals((-806.1688217906), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
        double double0 = complex0.abs();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = Complex.valueOf((-1369.9618));
        double double0 = complex0.abs();
        Assert.assertEquals((-1369.9618), complex0.getReal(), 0.01);
        Assert.assertEquals(1369.9618, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex((-4.2365298585101096E-8), Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-4.2365298585101096E-8), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex((-1023.473), (-1023.473));
        double double0 = complex0.getArgument();
        Assert.assertEquals((-2.356194490192345), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1090.1593210719), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf((-1250.357468), (-1250.357468));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1250.357468), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1250.357468), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf(6146.0, Double.POSITIVE_INFINITY);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(6146.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf((-2801.9384936), Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.createComplex(1432.0, Double.POSITIVE_INFINITY);
        List<Complex> list0 = complex1.nthRoot(1444);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(1432.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf((-2.0697130057384643E245), 0.9999990246875953);
        try {
            complex0.nthRoot((-1679));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -1,679
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf(3747.0, 20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(3747.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2.0);
        Complex complex1 = complex0.multiply(1805);
        Complex complex2 = complex1.tanh();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.08781092785587577, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf((-1454.7659737), (-1454.7659737));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sin();
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.1752011936438014), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1454.7659737), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.createComplex(1432.0, (-4374.5319180333));
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.tan();
        Assert.assertEquals(1.0, complex3.getImaginary(), 0.01);
        Assert.assertFalse(complex3.isInfinite());
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertEquals(4373.531473875199, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1433.0004441581016), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf((-1454.7659737));
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1454.7659737), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.21165325025208648), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1.0);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.multiply((-0.0));
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.20926809361535204, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.20926809361535206, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.sinh();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf((-1872.1));
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.pow(complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals((-1872.1), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf((-1872.1));
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.cos();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1872.1), complex0.getReal(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.multiply((-0.0));
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.asin();
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.acos();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = Complex.valueOf((-1872.1));
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1872.1), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf((-1872.1));
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.subtract(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals((-1872.1), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = Complex.valueOf((-1872.1));
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex0.multiply(complex1);
        Complex complex3 = complex2.sqrt1z();
        Assert.assertEquals((-1872.1), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertSame(complex3, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1.0004441581014705), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.0004441581014705), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2.0);
        Complex complex1 = complex0.createComplex((-195.3837234663), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(1805);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-195.3837234663), complex1.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1.0);
        Complex complex1 = complex0.multiply((-474));
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.multiply(1);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.createComplex(1432.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1432.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf(2892.09155370274, 2892.09155370274);
        Complex complex1 = complex0.pow(2892.09155370274);
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex0.pow(complex2);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2892.09155370274, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf((-2.0697130057384643E245), 0.9999990246875953);
        complex0.hashCode();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.9999990246875953, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2.0697130057384643E245), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = Complex.valueOf(0.0, 1.3480763914637323E214);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = new Complex(459.18776149, 459.18776149);
        Complex complex1 = complex0.multiply(Double.NaN);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(459.18776149, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(459.18776149, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf((-299.19058909465));
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-299.19058909465), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals((-4.323066195029328E129), complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertTrue(boolean0);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        ComplexField complexField0 = complex0.getField();
        boolean boolean0 = complex0.equals(complexField0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1.0004441581014705), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.0004441581014705), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf(459.18776149, 459.18776149);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.log();
        Assert.assertEquals((-6.4760327831226725), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.7853981633974483), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0010888791948147093), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), 1175.2580466093546);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1175.2580466093546, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.createComplex((-1.0004441581014705), (-4374.5319180333));
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.reciprocal();
        Assert.assertEquals((-2.2864817733069675E-4), complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf((-1454.7659737), (-1454.7659737));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1454.7659737), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1454.7659737), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = new Complex((-1432.0));
        Complex complex1 = complex0.divide(0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals((-1432.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = Complex.valueOf((-1872.1));
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.reciprocal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1872.1), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf((-2019.10587988545), (-2019.10587988545));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2019.10587988545), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.08781127502621154, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf(388.914277610333);
        Complex complex1 = complex0.pow(388.914277610333);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = Complex.valueOf((-1250.357468), (-1250.357468));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.multiply((-1250.357468));
        Assert.assertEquals((-1563393.7977833708), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1250.357468), complex1.getReal(), 0.01);
        Assert.assertEquals(1563393.7977833708, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.add((-1361.6197772));
        Assert.assertEquals((-1361.6197772), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0875862700108075, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = Complex.valueOf((-2.0697130057384643E245), 0.9999990246875953);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply(1410.62);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.9999990246875953, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1.0);
        double double0 = complex0.abs();
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(1.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = new Complex((-2300.343), Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-2300.343), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.multiply((-0.0));
        Complex complex2 = complex1.pow(complex1);
        complex2.nthRoot(1);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = Complex.valueOf(317.21118353752);
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals(317.21118353752, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals("(-0.0, 0.0875862700108075)", string0);
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0);
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        List<Complex> list0 = complex0.nthRoot(1);
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        boolean boolean0 = complex1.isNaN();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertTrue(boolean0)
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.reciprocal();
        Complex complex3 = complex2.sin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-1.0004441581014705), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-1.0004441581014705, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertSame(complex3, complex2)
        Assert.assertNotSame(complex3, complex2);
        // AssertFixer: old assertion Assert.assertEquals((-1.0004441581014705), complex0.getReal(), 0.01)
        Assert.assertEquals(-1.0004441581014705, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex((-0.0), 0.0875862700108075);
        Complex complex1 = complex0.multiply((-0.0));
        Complex complex2 = complex1.reciprocal();
        Complex complex3 = complex2.cosh();
        // AssertFixer: old assertion Assert.assertSame(complex3, complex2)
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex1.isInfinite())
        Assert.assertFalse(complex1.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01)
        Assert.assertEquals(-0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.subtract(complex0);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.negate();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        complex1.hashCode();
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.divide(0.0);
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.conjugate();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }
}

