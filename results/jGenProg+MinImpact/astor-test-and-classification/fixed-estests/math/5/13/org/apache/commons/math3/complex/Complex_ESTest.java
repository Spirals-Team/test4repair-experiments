/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 17:07:22 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.valueOf((-5000.623713498819), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals(8.49601402345757E-18, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-5000.623713498819), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(6.331009331992412E-18, complex1.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        Complex complex1 = complex0.createComplex(0.0, 4.351284159444109E-305);
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.sqrt1z();
        Assert.assertEquals((-8.267394495544304E-153), complex3.getImaginary(), 0.01);
        Assert.assertEquals(8.267394495544304E-153, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf((-2816.558476184), (-2816.558476184));
        complex0.hashCode();
        Assert.assertEquals((-2816.558476184), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2816.558476184), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt1z();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf(2.010216236114502, (-4279.355451847193));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(2.010216236114502, complex0.getReal(), 0.01);
        Assert.assertEquals(2.336799993806886E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0977057972772969E-7, complex1.getReal(), 0.01);
        Assert.assertEquals((-4279.355451847193), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex((-3788.5), (-3788.5));
        Complex complex1 = complex0.divide((-255.080946));
        Assert.assertEquals(14.852148149082057, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3788.5), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3788.5), complex0.getReal(), 0.01);
        Assert.assertEquals(14.852148149082057, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2696.04404760878));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.6235429026214991), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2696.04404760878), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf((-2816.558476184), (-2816.558476184));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(1.7752161538008013E-4, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.77521607920877E-4), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1346.64517));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.subtract(0.5784112215042114);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1.0));
        Complex complex1 = complex0.subtract((-1.0));
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf(7.4364594917181125E270);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(7.4364594917181125E270, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-20.0));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf(3244.075310917336, 3244.075310917336);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(3244.075310917336, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(3244.075310917336, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals((-115.1459619056616), complex1.getReal(), 0.01);
        Assert.assertEquals((-1942.4261870584926), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.050956334249614E49), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3.0723328196302926E49), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        Complex complex1 = complex0.sin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.14004134394184709), Double.NaN);
        Complex complex1 = complex0.pow(complex0);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf(2921.84044986927, (-2276.4423879183));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(2921.8403433830945, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf((-2816.558476184), (-2816.558476184));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.7752161165047865E-4, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex((-1137.7), (-3661.402796458617));
        Complex complex1 = complex0.pow((-1.8720659413032488));
        Assert.assertEquals((-6.94254319225026E-8), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.8275837136618835E-7), complex1.getReal(), 0.01);
        Assert.assertEquals((-3661.402796458617), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0, (-210.87084));
        Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.subtract(complex0);
        Complex complex3 = complex2.negate();
        Assert.assertEquals((-210.87084), complex3.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(210.87084, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(1.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2.9374821418009058E-30);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertEquals(4621.532597506612, complex2.getReal(), 0.01);
        Assert.assertEquals((-213.62830041192504), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf((-5000.623713498819), (-20.0));
        Complex complex1 = complex0.multiply(0);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-5000.623713498819), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(3244.075310917336, 3244.075310917336);
        Complex complex1 = complex0.multiply((-1931));
        Assert.assertEquals((-6264309.425381376), complex1.getReal(), 0.01);
        Assert.assertEquals(3244.075310917336, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-6264309.425381376), complex1.getImaginary(), 0.01);
        Assert.assertEquals(3244.075310917336, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf(1.122932337832262E-7, 20.0);
        Complex complex1 = complex0.multiply((-0.9512604321419217));
        Assert.assertEquals(1.122932337832262E-7, complex0.getReal(), 0.01);
        Assert.assertEquals((-1.068201100952456E-7), complex1.getReal(), 0.01);
        Assert.assertEquals((-19.025208642838432), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf(1.122932337832262E-7, 20.0);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply(4389.9779533654455);
        Assert.assertEquals(20.024984394500787, complex1.getReal(), 0.01);
        Assert.assertEquals((-4.923497675791965E-4), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.1215312988115378E-7), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex((-2263.83), (-2263.83));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf((-3014.703677490358), (-1147.0));
        Complex complex1 = complex0.divide(0.0);
        boolean boolean0 = complex1.isNaN();
        Assert.assertEquals((-3014.703677490358), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-1147.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex((-5186.7807652429), 604.3);
        Complex complex1 = complex0.pow(919.84606895375);
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(604.3, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex((-20.0), 2.05597910889115E159);
        Complex complex1 = complex0.tan();
        double double0 = complex1.getReal();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2.05597910889115E159, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-3788.5), (-3788.5));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3788.5), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3788.5), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = Complex.valueOf(548.18842297, 548.18842297);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(548.18842297, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(548.18842297, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf(2921.84044986927, (-2276.4423879183));
        Complex complex1 = complex0.sqrt1z();
        double double0 = complex1.getArgument();
        Assert.assertEquals(0.9089220320575612, double0, 0.01);
        Assert.assertEquals((-2276.4423879183), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf(1988.4974, (-1418.9));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-0.6197647135442157), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf(906.34552705179, 1148.118);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1148.118, complex0.getImaginary(), 0.01);
        Assert.assertEquals(906.34552705179, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0, (-210.87084));
        Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-210.87084), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0, (-210.87084));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(1.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf((-3962.23840194571), (-3962.23840194571));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.sin();
        Assert.assertEquals(1.2619129692158576E-4, complex3.getReal(), 0.01);
        Assert.assertEquals((-1.261912955819185E-4), complex3.getImaginary(), 0.01);
        Assert.assertFalse(complex3.isInfinite());
        Assert.assertEquals((-1.2619129625175213E-4), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.divide(6.283185307179586);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex((-2263.83), (-2263.83));
        Complex complex1 = complex0.divide(1195.13);
        Assert.assertEquals((-1.8942123451005328), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2263.83), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2263.83), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.8942123451005328), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf(548.18842297, 548.18842297);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        Assert.assertEquals(548.18842297, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(548.18842297, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = Complex.valueOf((-2816.558476184), (-2816.558476184));
        Complex complex1 = complex0.createComplex((-2816.558476184), (-2816.558476184));
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-2816.558476184), complex1.getReal(), 0.01);
        Assert.assertEquals((-2816.558476184), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex((-2929.745039524602), (-2929.745039524602));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf((-6648261.113891727), (-6648261.113891727));
        Complex complex1 = complex0.cosh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-6648261.113891727), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf(1988.4974, (-1418.9));
        Complex complex1 = complex0.cos();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1418.9), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf((-4989.11090975245));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-4819.141468032337), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf((-3014.703677490358), (-1147.0));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1147.0), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex((-2929.745039524602), (-2929.745039524602));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.atan();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0, (-210.87084));
        Complex complex1 = complex0.atan();
        Assert.assertEquals(1.570773837960644, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.004742168272480134), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf((-2816.558476184), (-2816.558476184));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-8.982991790963066), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.785398147640487), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf(4132.45);
        Complex complex1 = complex0.asin();
        double double0 = complex1.getImaginary();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertEquals((-9.019772896328925), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf((-1070.442552), (-2672.7));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.add(complex0);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1070.442552), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-2672.7), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.add(3513.286286431844);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.add(3513.286286431844);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1942.4261870584926), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1942.4261870584926), complex2.getImaginary(), 0.01);
        Assert.assertEquals(3398.140324526182, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf(2042.29);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(8.314974126896233, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2195.1618326);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-8.38715828306827), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-20.0));
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0005255294816535), (-1.0005255294816535));
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex(1533.8742, 1533.8742);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.5685449228299222E-7), (-1.5685449228299222E-7));
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf((-3014.703677490358), (-1147.0));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(10.267104321394834, complex1.getReal(), 0.01);
        Assert.assertEquals((-55.8580084556974), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1147.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.14004134394184709), Double.NaN);
        Complex complex1 = complex0.sqrt();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.14004134394184709), Double.NaN);
        Complex complex1 = complex0.log();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf((-1070.442552), (-2672.7));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-1070.442552), complex0.getReal(), 0.01);
        Assert.assertEquals((-2672.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.exp();
        Assert.assertEquals((-115.1459619056616), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1942.4261870584926, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1942.4261870584926, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-115.1459619056616), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.negate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(20.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex((-20.0), 2.05597910889115E159);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.multiply(0.0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2.05597910889115E159, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.14004134394184709), Double.NaN);
        Complex complex1 = complex0.multiply(1.0294301092654604E-8);
        Assert.assertSame(complex1, complex0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf(2921.84044986927, (-2276.4423879183));
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.14004134394184709), Double.NaN);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertSame(complex1, complex0);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf(7.4364594917181125E270);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertEquals(7.4364594917181125E270, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(157.686);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(157.6828291095768, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = Complex.valueOf((-552.586));
        Complex complex1 = complex0.pow((-1108.8));
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf((-1070.442552), (-2672.7));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-2140.885104), complex1.getReal(), 0.01);
        Assert.assertEquals((-2672.7), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-5345.4), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1070.442552), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf(961.7);
        Complex complex1 = complex0.createComplex(1.0, 961.7);
        double double0 = complex1.abs();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(961.7, complex0.getReal(), 0.01);
        Assert.assertEquals(961.7005199125142, double0, 0.01);
        Assert.assertEquals(961.7, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf(7.4364594917181125E270);
        Complex complex1 = complex0.acos();
        double double0 = complex1.abs();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(7.4364594917181125E270, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        double double0 = complex0.abs();
        Assert.assertEquals(20.0, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-601.768552535));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-601.768552535), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(7.091600108064668E-8, Double.NaN);
        Assert.assertEquals(7.091600108064668E-8, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 4.466959125843237E-8);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(4.466959125843237E-8, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = Complex.valueOf(4132.45);
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(4132.45, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        List<Complex> list0 = complex0.nthRoot(37);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf(1.3166970112139726E161);
        Complex complex1 = complex0.sinh();
        List<Complex> list0 = complex1.nthRoot(547);
        Assert.assertEquals(1.3166970112139726E161, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = Complex.valueOf((-5000.623713498819), (-20.0));
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        List<Complex> list0 = complex0.nthRoot(107);
        Assert.assertEquals(107, list0.size());
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf(1.122932337832262E-7, 20.0);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals((-1.1215312988115378E-7), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(20.024984394500787, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.tanh();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        Complex complex1 = complex0.tan();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(4.351284159444109E-305, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf((-2816.558476184), (-2816.558476184));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.pow((-2816.558476184));
        Complex complex3 = complex2.tan();
        Assert.assertEquals(1.7752161165047865E-4, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-1.7752161165047865E-4), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.pow((-3964.0));
        Complex complex2 = complex1.tan();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.14004134394184709), Double.NaN);
        Complex complex1 = complex0.sinh();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.sin();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.pow(598.28786824999);
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex2.cos();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.atan();
        Assert.assertSame(complex2, complex1);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.pow(598.28786824999);
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex2.asin();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.acos();
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf(4132.45);
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(4132.45, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        Complex complex1 = complex0.subtract((-1.8921091400297595E93));
        Assert.assertEquals(1.8921091400297595E93, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.subtract(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.sqrt1z();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.negate();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1942.4261870584926, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-115.1459619056616), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(811.199155064084);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf(1.3166970112139726E161);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals(1.3166970112139726E161, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(450);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf((-1070.442552), (-2672.7));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply((-4037));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2672.7), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1070.442552), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.14004134394184709), Double.NaN);
        Complex complex1 = complex0.multiply(1);
        Assert.assertSame(complex1, complex0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.multiply(192);
        Complex complex2 = complex1.subtract((-1603.651501462926));
        Assert.assertEquals((-2236.348498537074), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.pow(598.28786824999);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf((-3014.703677490358), (-1147.0));
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3014.703677490358), complex0.getReal(), 0.01);
        Assert.assertEquals((-1147.0), complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf(1.3166970112139726E161);
        Complex complex1 = complex0.sinh();
        complex1.hashCode();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.3166970112139726E161, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = new Complex(0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex((-2929.745039524602), (-2929.745039524602));
        Complex complex1 = Complex.valueOf((-2929.745039524602));
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals((-2929.745039524602), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2929.745039524602), complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf((-4989.11090975245));
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals((-1.5705958902833224), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertTrue(boolean0);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf(1.122932337832262E-7, 20.0);
        boolean boolean0 = complex0.equals(")");
        Assert.assertEquals(1.122932337832262E-7, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2.9374821418009058E-30);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-3.404276015060034E29), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(2.9374821418009058E-30, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = Complex.valueOf((-115.1459619056616), 1942.4261870584926);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.reciprocal();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-115.1459619056616), complex0.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(1942.4261870584926, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0, (-210.87084));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(1.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-210.87084), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertEquals(2.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf(961.7);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide(9.306541421999056E-216);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(961.7, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex0.divide(complex2);
        Assert.assertEquals(2.298172133459915E304, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2195.1618326);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(4.5554731060076553E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.pow(598.28786824999);
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex1.divide(complex2);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = Complex.valueOf(1.122932337832262E-7, 20.0);
        Complex complex1 = complex0.createComplex(20.0, Double.NaN);
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertEquals(1.122932337832262E-7, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf(277.1999456172774);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(277.1999456172774, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf((-3014.703677490358), (-1147.0));
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex1.add((-4666.73421464907));
        Assert.assertEquals((-3014.703677490358), complex0.getReal(), 0.01);
        Assert.assertEquals((-1147.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = Complex.valueOf((-552.586));
        Complex complex1 = complex0.pow((-1108.8));
        Complex complex2 = complex1.log();
        Assert.assertEquals((-3.141592653589793), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-552.586), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tanh();
        double double0 = complex1.abs();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1346.64517));
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-1346.64517), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        String string0 = complex0.toString();
        Assert.assertEquals("(4.351284159444109E-305, 0.0)", string0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        complex0.getField();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        Complex complex0 = new Complex(4.351284159444109E-305);
        double double0 = complex0.getArgument();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex0.add(complex1);
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.add(complex1);
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.cosh();
        // AssertFixer: old assertion Assert.assertSame(complex3, complex1)
        Assert.assertNotSame(complex3, complex1);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.0), (-0.0));
        Complex complex1 = complex0.reciprocal();
        boolean boolean0 = complex0.equals(complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex1.equals(((Object) (complex0))))
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(boolean0)
        Assert.assertFalse(boolean0);
    }
}

