/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 21 18:33:17 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(2.0568656302182574E254);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-20.0));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.createComplex(0.0, 20.0);
        Complex complex3 = complex2.divide(complex1);
        Complex complex4 = complex3.tanh();
        Assert.assertEquals((-1.0), complex4.getReal(), 0.01);
        Assert.assertEquals(0.0, complex4.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertEquals(6.331009331992412E-18, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex((-2850.302165426358), (-2850.302165426358));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals((-0.7071067811865475), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.7071067811865476, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf((-1577.0), 1148.95839018299);
        Complex complex1 = complex0.sqrt();
        complex1.hashCode();
        Assert.assertEquals(42.00096615401872, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1148.95839018299, complex0.getImaginary(), 0.01);
        Assert.assertEquals(13.67776143493613, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf((-1173.27519694));
        Complex complex1 = complex0.sqrt1z();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(1173.2747707824435, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf(851.091747535, (-1635.0));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-1635.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(851.091747535, complex0.getReal(), 0.01);
        Assert.assertEquals(2.50499239392373E-4, complex1.getReal(), 0.01);
        Assert.assertEquals(4.8122456549807755E-4, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex((-1861.1799), (-1861.1799));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-1861.1799), complex0.getReal(), 0.01);
        Assert.assertEquals(2.6864678691189387E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1861.1799), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2.6864678691189387E-4), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        Complex complex1 = complex0.add((-1996.06945399616));
        Complex complex2 = complex1.atan();
        Assert.assertEquals(1.5706936691959736, complex2.getReal(), 0.01);
        Assert.assertEquals(2.7838377171790274E-4, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf((-910.038), (-910.038));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-17.25798651033276), (-17.25798651033276));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-1.000000000000002), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-17.25798651033276), complex0.getReal(), 0.01);
        Assert.assertEquals((-17.25798651033276), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-8.49844389169778E-17), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.subtract(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertEquals(2.2146463048385474E8, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf((-910.038), (-910.038));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.subtract(0.0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-2326.5297));
        Complex complex1 = complex0.subtract(2789.026842893414);
        Assert.assertEquals((-2326.5297), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2326.5297), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2789.026842893414), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf(693.4588702, 693.4588702);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-4.921244136767381E300), complex1.getReal(), 0.01);
        Assert.assertEquals(5.414727977293244E300, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-709.8167712));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(9.30642365257687E307, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(324.65);
        Complex complex1 = complex0.sin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.8752520433693641), complex1.getReal(), 0.01);
        Assert.assertEquals(324.65, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-2776.0), (-2776.0));
        Complex complex1 = complex0.sin();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2776.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-2776.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-709.8167712));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0014088142751395166), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.valueOf((-17.25798651033276), (-17.25798651033276));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals((-8.188255735347848E-43), complex1.getReal(), 0.01);
        Assert.assertEquals((-2.3422072495238052E-42), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(354.5634053124503, 354.5634053124503);
        Complex complex1 = complex0.pow(13597.677080209787);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(354.5634053124503, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-1577.0), 1148.95839018299);
        Complex complex1 = complex0.pow((-1577.0));
        Assert.assertEquals((-1577.0), complex0.getReal(), 0.01);
        Assert.assertEquals(1148.95839018299, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf((-910.038), (-910.038));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(910.038, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-910.038), complex2.getImaginary(), 0.01);
        Assert.assertEquals(910.038, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-910.038), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf((-1173.27519694));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals((-1376574.1877545046), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.multiply(1);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.multiply((-1899.1120411));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex((-272.71));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(3.141592653589793, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex((-915.8));
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.isNaN();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-915.8), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.log();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf(1628.785245823);
        double double0 = complex0.getReal();
        Assert.assertEquals(1628.785245823, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(3162.154591570679, double0, 0.01);
        Assert.assertEquals(3162.154591570679, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = Complex.valueOf(202.3);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(202.3, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        Complex complex1 = complex0.sqrt1z();
        double double0 = complex1.getArgument();
        Assert.assertEquals((-0.7853981383955023), double0, 0.01);
        Assert.assertEquals(3162.154591570679, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(1258.44894563155, 1258.44894563155);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1258.44894563155, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf((-910.038), (-910.038));
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.exp();
        Assert.assertEquals((-910.0380000000004), complex2.getReal(), 0.01);
        Assert.assertEquals((-910.0380000000005), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf((-1577.0), 1148.95839018299);
        Complex complex1 = complex0.add(1148.95839018299);
        Complex complex2 = complex1.exp();
        Assert.assertEquals((-9.663901306707762E-187), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1148.95839018299, complex1.getImaginary(), 0.01);
        Assert.assertEquals(8.244011609690058E-187, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-20.0));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.divide(complex0);
        double double0 = complex2.getReal();
        Assert.assertEquals(0.07853981633974483, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.18447519344944177), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf((-1577.0), 1148.95839018299);
        Complex complex1 = complex0.add(1148.95839018299);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.5240632998460847, complex2.getReal(), 0.01);
        Assert.assertEquals(1148.95839018299, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf(742.8233480450688, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(1.0);
        Assert.assertEquals(742.8233480450688, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf(324.65);
        Complex complex1 = complex0.divide((-1.8472516879728875E59));
        Assert.assertEquals(324.65, complex0.getReal(), 0.01);
        Assert.assertEquals((-1.7574757252286508E-57), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = Complex.valueOf(851.091747535, (-1635.0));
        Complex complex1 = complex0.divide(851.091747535);
        Assert.assertEquals((-1635.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(851.091747535, complex0.getReal(), 0.01);
        Assert.assertEquals((-1.9210619827244453), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        Complex complex1 = complex0.createComplex((-20.0), Double.POSITIVE_INFINITY);
        Assert.assertEquals(3162.154591570679, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(3162.154591570679, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-17.25798651033276), (-17.25798651033276));
        Complex complex1 = complex0.createComplex(839.56370091728, 0.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(839.56370091728, complex1.getReal(), 0.01);
        Assert.assertEquals((-17.25798651033276), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-17.25798651033276), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = Complex.valueOf((-2776.0), (-2776.0));
        Complex complex1 = complex0.createComplex((-2776.0), (-2776.0));
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2776.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-2776.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf(693.4588702, 693.4588702);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(693.4588702, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-5.414727977293244E300), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-4.921244136767381E300), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex((-2850.302165426358), (-2850.302165426358));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-2850.302165426358), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-2850.302165426358), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf((-17.25798651033276), (-17.25798651033276));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-0.028955864819200657), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5418080371351164), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.subtract(0.0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(9.899360663146222E7, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertTrue(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf((-910.038), (-910.038));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(7861.458944561726, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-910.038), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-15.53574484781078), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex((-1861.1799), (-1861.1799));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.add(complex0);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1861.1799), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-3342.405426), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1671.202713), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        Complex complex1 = Complex.valueOf((-1671.202713), (-50.856567));
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-50.856567), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-3342.405426), complex2.getReal(), 0.01);
        Assert.assertEquals((-1671.202713), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf(742.8233480450688, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.add((-5187.47879281521));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4444.655444770141), complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(2.0568656302182574E254);
        Complex complex1 = complex0.acos();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2.0568656302182574E254, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = Complex.valueOf(324.65);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(6.475892487546267, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex(26.684513325362474, 1344.30808363);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(10.285635932742075, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf(4.921244136767381E300);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.7999197335480384E-103));
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex((-1464.67904), (-1419.77));
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf((-1317.0), (-1317.0));
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-1577.0), 1148.95839018299);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.multiply((-686.82));
        Assert.assertEquals((-9394.160108742833), complex2.getReal(), 0.01);
        Assert.assertEquals(42.00096615401872, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-28847.10357390314), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf(693.4588702, 693.4588702);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.sqrt();
        Assert.assertEquals(693.4588702, complex0.getReal(), 0.01);
        Assert.assertEquals(5.414727977293244E300, complex1.getImaginary(), 0.01);
        Assert.assertEquals(693.4588702, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals((-4.921244136767381E300), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf(693.4588702, 693.4588702);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.log();
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(693.4588702, complex0.getReal(), 0.01);
        Assert.assertEquals(693.4588702, complex0.getImaginary(), 0.01);
        Assert.assertEquals(5.414727977293244E300, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.921244136767381E300), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.exp();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf((-17.25798651033276), (-17.25798651033276));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals((-17.25798651033276), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-17.25798651033276), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf((-471.0486259));
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-471.0486259), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex((-3878.38331727), (-3878.38331727));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(0.0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3878.38331727), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(3162.154591570679, complex0.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(3162.154591570679, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = Complex.valueOf(851.091747535, (-1635.0));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1635.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex2.multiply(complex0);
        Assert.assertEquals(3162.154591570679, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3162.154591570679, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf((-1173.27519694));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.sqrt1z();
        Complex complex3 = complex2.multiply(complex1);
        Assert.assertNotSame(complex3, complex1);
        Assert.assertFalse(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(1173.2747707824435, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.add(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex((-3459.3925047), (-3459.3925047));
        Complex complex1 = complex0.pow(complex0);
        double double0 = complex1.abs();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = Complex.valueOf((-17.25798651033276), (-17.25798651033276));
        Complex complex1 = complex0.tan();
        double double0 = complex1.abs();
        Assert.assertEquals((-1.000000000000002), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-17.25798651033276), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-8.49844389169778E-17), complex1.getReal(), 0.01);
        Assert.assertEquals(1.000000000000002, double0, 0.01);
        Assert.assertEquals((-17.25798651033276), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        Complex complex1 = complex0.sinh();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(3162.154591570679, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3162.154591570679, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        double double0 = complex0.abs();
        Assert.assertEquals(1671.202713, double0, 0.01);
        Assert.assertEquals((-1671.202713), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf((-1173.27519694));
        double double0 = complex0.getArgument();
        Assert.assertEquals(3.141592653589793, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = Complex.valueOf((-1577.0), 1148.95839018299);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1577.0), complex0.getReal(), 0.01);
        Assert.assertEquals(1148.95839018299, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf((-17.25798651033276), (-17.25798651033276));
        double double0 = complex0.getImaginary();
        Assert.assertEquals((-17.25798651033276), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-17.25798651033276), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf((-879.87825989), Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, 2029.889886077213);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-3815.8157524367753));
        List<Complex> list0 = complex0.nthRoot(1093);
        Assert.assertEquals(1093, list0.size());
        Assert.assertEquals((-3815.8157524367753), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
        List<Complex> list0 = complex0.nthRoot(1369);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex(1575.676914315, 1575.676914315);
        try {
            complex0.nthRoot((-261));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -261
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex(20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf(324.65);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(324.65, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf(851.091747535, (-1635.0));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex2.tanh();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals((-1635.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex(20.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2.2371609442247427, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tan();
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf(693.4588702, 693.4588702);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.7071067811865475, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.pow(0.0);
        Complex complex2 = complex1.sinh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf(3162.154591570679, 3162.154591570679);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex2.sin();
        Assert.assertEquals(3162.154591570679, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(3162.154591570679, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = Complex.valueOf(1.2942728582966776E171);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.2942728582966776E171, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf(693.4588702, 693.4588702);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.cos();
        Assert.assertEquals((-4.921244136767381E300), complex1.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(693.4588702, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(693.4588702, complex0.getImaginary(), 0.01);
        Assert.assertEquals(5.414727977293244E300, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(1575.676914315, 1575.676914315);
        Complex complex1 = complex0.cos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1575.676914315, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.pow(0.0);
        Complex complex2 = complex1.atan();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.asin();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1671.202713), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex((-198.2861481), (-198.2861481));
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-198.2861481), complex0.getReal(), 0.01);
        Assert.assertEquals((-198.2861481), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.subtract(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex((-1861.1799), (-1861.1799));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex1.subtract(complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals((-1861.1799), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = new Complex((-1018.0));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex((-1018.0));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf((-2306.724993));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals((-2306.724993), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf((-17.25798651033276), (-17.25798651033276));
        Complex complex1 = complex0.multiply(37);
        Assert.assertEquals((-17.25798651033276), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-638.5455008823121), complex1.getReal(), 0.01);
        Assert.assertEquals((-638.5455008823121), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-17.25798651033276), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf((-1173.27519694));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-2145621202));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1173.27519694), complex0.getReal(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.multiply(1369);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf((-1317.0), (-1317.0));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1317.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = Complex.valueOf(1.2942728582966776E171);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.conjugate();
        Complex complex3 = complex2.asin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.2942728582966776E171, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = new Complex((-1317.0), Double.NaN);
        complex0.hashCode();
        Assert.assertEquals((-1317.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        Complex complex1 = Complex.valueOf((-1671.202713), (-50.856567));
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals((-1671.202713), complex0.getReal(), 0.01);
        Assert.assertEquals((-50.856567), complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1671.202713), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1671.202713), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.pow(0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf((-910.038), (-910.038));
        boolean boolean0 = complex0.equals("j=UM5VsQ>");
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-910.038), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-910.038), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-1671.202713), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf((-1173.27519694));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1173.27519694), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf((-1671.202713));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-5.983714556116809E-4), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1671.202713), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-3815.8157524367753));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-3815.8157524367753), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(2.620671607011951E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.pow(0.0);
        Complex complex2 = complex1.reciprocal();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = new Complex((-1861.1799), (-1861.1799));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1861.1799), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf((-1173.27519694));
        Complex complex1 = complex0.divide((-1173.27519694));
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = new Complex((-1861.1799), (-1861.1799));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-1861.1799), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1861.1799), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf(4.921244136767381E300);
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(4.921244136767381E300, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex1.acos();
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.divide(3.141592653589793);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = new Complex(1575.676914315, 1575.676914315);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.divide(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = new Complex(1575.676914315, 1575.676914315);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf((-910.038), (-910.038));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-910.038), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = Complex.valueOf(742.8233480450688, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(742.8233480450688, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = new Complex((-1861.1799), (-1861.1799));
        Complex complex1 = complex0.add((-1861.1799));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1861.1799), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1861.1799), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3722.3598), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf(324.65);
        Complex complex1 = complex0.pow(324.65);
        Complex complex2 = complex1.add(1951.4);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = new Complex((-1861.1799), (-1861.1799));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.reciprocal();
        Complex complex3 = complex2.pow(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals((-1861.1799), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex3.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf((-2306.724993));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-8.436731179182697), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2306.724993), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = new Complex((-284.6175), Double.POSITIVE_INFINITY);
        Assert.assertEquals((-284.6175), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-20.0));
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = new Complex(1575.676914315, 1575.676914315);
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals("(1575.676914315, 1575.676914315)", string0);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = new Complex(1575.676914315, 1575.676914315);
        complex0.getField();
        Assert.assertEquals(1575.676914315, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1575.676914315, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.negate();
        Complex complex3 = complex2.divide(complex1);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.reciprocal();
        List<Complex> list0 = complex1.nthRoot(7);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1, list0.size());
        // AssertFixer: old assertion Assert.assertFalse(complex1.isInfinite())
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex0.add(complex1);
        Complex complex3 = complex2.tan();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertSame(complex3, complex2)
        Assert.assertNotSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.reciprocal();
        double double0 = complex1.abs();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, double0, 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }
}

