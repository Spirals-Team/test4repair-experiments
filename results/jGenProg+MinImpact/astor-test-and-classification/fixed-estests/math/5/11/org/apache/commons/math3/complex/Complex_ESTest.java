/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 22:05:23 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(2587.39159, 2587.39159);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.valueOf(((double) (27)), 20.0);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-4.747867666998207E-18), complex1.getReal(), 0.01);
        Assert.assertEquals(27.0, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf((-171.090052), 1.5707184113485153);
        complex0.hashCode();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-171.090052), complex0.getReal(), 0.01);
        Assert.assertEquals(1.5707184113485153, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf(9.161006128687137E202);
        Complex complex1 = complex0.log();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertFalse(boolean0);
        Assert.assertEquals(467.3371447968277, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex(2928.894, 2928.894);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.reciprocal();
        Complex complex3 = complex2.add((-2269.8152817398));
        Complex complex4 = complex3.sqrt();
        Complex complex5 = complex4.reciprocal();
        Assert.assertEquals(0.02099425319774604, complex5.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex5.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf((-6197.0));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex0.divide(complex2);
        Assert.assertEquals((-78.72102641607259), complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2.2371609442247427), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 6.283185307179586);
        Complex complex1 = new Complex((-1949.11264418), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals((-4584.251305375071), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-4577.139464490192), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.cosh();
        Complex complex4 = complex3.subtract((-2929.320741474));
        Assert.assertTrue(complex4.isInfinite());
        Assert.assertEquals(8.027892833695438, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1535.7796644865898), complex2.getReal(), 0.01);
        Assert.assertTrue(complex4.equals(((Object) (complex3))));
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf((-692.0), (-692.0));
        Complex complex1 = complex0.subtract((-692.0));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-692.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-692.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex2.subtract((-2929.320741474));
        Assert.assertEquals(2927.314917822668, complex3.getReal(), 0.01);
        Assert.assertEquals((-11.374532677516328), complex3.getImaginary(), 0.01);
        Assert.assertEquals((-8.027892833695438), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf((-1424.2578), 1.8995553996578656E216);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0019992866761095853);
        Complex complex1 = complex0.sqrt();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0019992866761095853, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf((-468.0323998239), 2405.8);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals((-0.015587306280841352), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.012847127424127825, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2.4258259770489514E8), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex(468.920371998374, 468.920371998374);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals((-1.635847839565152E203), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals(468.920371998374, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-171.090052), 1.5707184113485153);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex0.asin();
        Complex complex3 = complex2.add(complex1);
        Complex complex4 = complex3.pow(complex2);
        Assert.assertEquals(5.95161767291322E-7, complex4.getImaginary(), 0.01);
        Assert.assertEquals((-2.951720371785496E-7), complex4.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex((-524.56230479756), (-3189.258043359077));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(3.0529345980094926E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-5.021401176561257E-5), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.valueOf((-171.090052), 1.5707184113485153);
        Complex complex1 = complex0.pow(3.132412258434117);
        Assert.assertEquals((-3736776.6048552697), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-9162832.961492294), complex1.getReal(), 0.01);
        Assert.assertEquals(1.5707184113485153, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.pow((-2298.0));
        Assert.assertEquals((-4574.78327), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-524.948), 0.6144464015960693);
        Complex complex1 = complex0.pow(682.0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.6144464015960693, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf((-771.466767), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(771.466767, complex1.getReal(), 0.01);
        Assert.assertEquals((-771.466767), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.negate();
        Assert.assertEquals((-2.356194490192345), complex2.getReal(), 0.01);
        Assert.assertEquals((-9.468035375071281), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf((-468.0323998239), 2405.8);
        Complex complex1 = complex0.add(1046.64206437406);
        Complex complex2 = complex1.multiply((-609));
        Assert.assertEquals(578.60966455016, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1465132.2000000002), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-352373.2857110474), complex2.getReal(), 0.01);
        Assert.assertEquals(2405.8, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf((-468.0323998239), 2405.8);
        Complex complex1 = complex0.multiply(0);
        Assert.assertEquals((-468.0323998239), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2405.8, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf(1.5007857288519654E-41);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-1.5707963267948966), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.134857098306787E-82, complex0.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(2.995732273553991, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        boolean boolean0 = complex1.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex((-1949.11264418), Double.POSITIVE_INFINITY);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-1949.11264418), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = Complex.valueOf(134.7818655766, 336.0);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(134.7818655766, double0, 0.01);
        Assert.assertEquals(336.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(1.0, 1.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(1.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex((-1456.68), (-1456.68));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1456.68), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1456.68), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf(372.74009);
        double double0 = complex0.getArgument();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(372.74009, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf(134.7818655766, 336.0);
        Complex complex1 = complex0.sin();
        double double0 = complex1.getArgument();
        Assert.assertEquals((-1.2641777990337995), double0, 0.01);
        Assert.assertEquals(336.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(134.7818655766, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf((-920.9535707756313));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-920.9535707756313), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf((-1424.2578), 1.8995553996578656E216);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = Complex.valueOf(213.53215892624, 4939.280053535);
        Complex complex1 = complex0.multiply((-100.54975440643));
        Complex complex2 = complex1.sinh();
        Complex complex3 = complex2.divide(3318.153952049);
        Assert.assertEquals(213.53215892624, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertEquals(4939.280053535, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.divide((-1.4356011804377797E-9));
        Assert.assertEquals((-1.3931445775142855E10), complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf(1.5007857288519654E-41);
        Complex complex1 = complex0.createComplex(1.5007857288519654E-41, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.5007857288519654E-41, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(1.5007857288519654E-41, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex(151.06795, 0.0);
        Complex complex1 = complex0.createComplex(0.0, 151.06795);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(151.06795, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf((-1424.2578), 1.8995553996578656E216);
        Complex complex1 = complex0.createComplex((-71.7), 0.029533116008052057);
        Assert.assertEquals((-71.7), complex1.getReal(), 0.01);
        Assert.assertEquals(1.8995553996578656E216, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.029533116008052057, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1424.2578), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.createComplex(3859.32, (-1.0008013172195225));
        Assert.assertEquals((-4574.78327), complex0.getImaginary(), 0.01);
        Assert.assertEquals(3859.32, complex1.getReal(), 0.01);
        Assert.assertEquals((-4574.78327), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1.0008013172195225), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.cosh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2.4258259770489514E8, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.cos();
        Assert.assertEquals((-4574.783244146902), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-4574.783298794298), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf(6.283185307179586);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.conjugate();
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.5650219162346277E-8), complex3.getImaginary(), 0.01);
        Assert.assertEquals(6.283185307179586, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf((-171.090052), 1.5707184113485153);
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-1.564952010719868), complex1.getReal(), 0.01);
        Assert.assertEquals(5.365341647580878E-5, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf(9.161006128687137E202);
        Complex complex1 = complex0.asin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(9.161006128687137E202, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 6.283185307179586);
        Complex complex1 = new Complex((-1949.11264418), Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.add(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.6492800268960003E-8);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(1.6492800268960003E-8, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(3.2985600537920006E-8, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf(134.7818655766, 336.0);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals(1.2638276042953526E145, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-3.991836088308965E145), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.add((-2298.0));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.add((-1.0953484767704112E226));
        Assert.assertEquals((-4574.78327), complex0.getReal(), 0.01);
        Assert.assertEquals((-4574.78327), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4574.78327), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0953484767704112E226), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4565123573071036E164);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf(134.7818655766, 336.0);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(1.2638276042953526E145, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
        Assert.assertEquals((-3.991836088308965E145), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-298.74643482133644), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), 0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(3.141592653589793, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex(392.6);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), 0.0);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = Complex.valueOf((-920.9535707756313));
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf((-1617.1158517425));
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf(372.74009);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-771.466767), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.log();
        Assert.assertEquals((-771.466767), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.NaN);
        Complex complex1 = complex0.exp();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf((-524.948), 0.6144464015960693);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.6144464015960693, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-524.948), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-4574.78327), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf((-771.466767), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-771.466767), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf((-6197.0));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(78.72102641607259, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.add(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-1532.638071833), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3065.276143666), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1532.638071833), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 6.283185307179586);
        double double0 = complex0.abs();
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(6.283185307179586, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex((-524.56230479756), (-3189.258043359077));
        Complex complex1 = complex0.sin();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals((-524.56230479756), complex0.getReal(), 0.01);
        Assert.assertEquals((-3189.258043359077), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(1.0, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-771.466767));
        Complex complex1 = complex0.multiply(0.3615458607673645);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-771.466767), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(3.141592653589793, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.NaN);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf((-1617.1158517425));
        double double0 = complex0.getReal();
        Assert.assertEquals((-1617.1158517425), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = Complex.valueOf((-6197.0));
        double double0 = complex0.getImaginary();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-6197.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        Complex complex1 = complex0.multiply(578);
        Complex complex2 = complex0.multiply(complex1);
        Complex complex3 = complex2.sinh();
        complex3.nthRoot(578);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-231200.0), complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals((-2.6237896112852915E-78), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        complex1.nthRoot(1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf((-1424.2578), 1.8995553996578656E216);
        try {
            complex0.nthRoot((-2045222521));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -2,045,222,521
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals((-1.0), complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = Complex.valueOf(2116.552272682451, 1075.8877456782);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tanh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(2116.552272682451, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1075.8877456782, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(2080.9);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4565123573071036E164);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf((-1424.2578), 1.8995553996578656E216);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.8995553996578656E216, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.NaN);
        Complex complex1 = complex0.tan();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf(537.4685893499498);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(1.8681563953472125, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.NaN);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.sinh();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1532.638071833), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.cos();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf((-4574.78327), (-4574.78327));
        Complex complex1 = complex0.cos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-4574.78327), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.asin();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.subtract(867.0219275841489);
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex(2080.9);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.subtract(2080.9);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf(1075.8877456782);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(1075.8877456782, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = Complex.valueOf((-171.090052), 1.5707184113485153);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1.5707184113485153, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-171.090052), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex((-1949.11264418), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(1.0016001590267064E-9);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1949.11264418), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0019992866761095853);
        Complex complex1 = complex0.pow(Double.NaN);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0019992866761095853, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1730463525082348E-7, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(1);
        Assert.assertEquals(1.1730463525082348E-7, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0019992866761095853);
        Complex complex1 = complex0.multiply(1159);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0019992866761095853, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.cosh();
        Complex complex4 = complex3.sinh();
        complex4.multiply(1628);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals((-1535.7796644865898), complex2.getReal(), 0.01);
        Assert.assertEquals(8.027892833695438, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex1, complex2);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        Complex complex1 = complex0.multiply(578);
        Complex complex2 = complex1.tan();
        Assert.assertEquals(6.559474028213229E-80, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-11560.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.divide(complex1);
        Complex complex3 = complex2.sinh();
        Complex complex4 = complex3.sinh();
        Complex complex5 = complex0.multiply(complex4);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(2.752965829310998E-74, complex3.getImaginary(), 0.01);
        Assert.assertEquals(2.4258259770489514E8, complex3.getReal(), 0.01);
        Assert.assertEquals(1.1348570983067865E-82, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex5.isNaN());
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = Complex.valueOf(2481.83889, 2481.83889);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(2481.83889, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex0);
        Assert.assertEquals(2481.83889, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = Complex.valueOf((-771.466767), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sinh();
        complex1.hashCode();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-771.466767), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.asin();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-4.035453190878201), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.7850856634991735), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = Complex.valueOf((-20.0), 2.6527209281921387);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex(0.0);
        boolean boolean0 = complex0.equals("");
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf((-171.090052), 1.5707184113485153);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals((-0.00584431607457455), complex2.getReal(), 0.01);
        Assert.assertEquals((-5.365341645492227E-5), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.005844382598658898), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = new Complex(0.0, 6.283185307179586);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.reciprocal();
        Assert.assertEquals(1.772453850905516, complex3.getImaginary(), 0.01);
        Assert.assertEquals(1.772453850905516, complex3.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0019992866761095853);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0019992866761095853, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = Complex.valueOf(2149.570977354336, 2149.570977354336);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(2149.570977354336, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2149.570977354336, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = Complex.valueOf((-6197.0));
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex1.sqrt();
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-6197.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = Complex.valueOf(6.283185307179586);
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertEquals(6.283185307179586, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        Complex complex1 = complex0.divide(4.0050423896052334E-4);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2.8335707538382554E-79, complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.134857098306787E-82, complex0.getReal(), 0.01);
        Assert.assertEquals((-49937.049485189964), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf((-771.466767), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals((-771.466767), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.multiply(complex2);
        Complex complex4 = complex3.exp();
        Complex complex5 = complex2.divide(complex4);
        Assert.assertEquals((-24658.149125334156), complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex5.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.atan();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = Complex.valueOf((-1532.638071833));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals((-1532.638071833), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf((-171.090052), 1.5707184113485153);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.5707184113485153, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-171.090052), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.NaN);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex0.add(complex1);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-0.050041729278491265), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.pow(complex0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals("(1.134857098306787E-82, -20.0)", string0);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-20.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(1.134857098306787E-82, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        Complex complex0 = Complex.valueOf(1.134857098306787E-82, (-20.0));
        complex0.getField();
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.134857098306787E-82, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test165() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        List<Complex> list0 = complex0.nthRoot(1685);
        Assert.assertEquals(1685, list0.size());
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test166() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4565123573071036E164);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.cosh();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.atan();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.acos();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex0.subtract(complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.subtract(complex0);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        boolean boolean0 = complex0.equals(complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex1.equals(((Object) (complex0))))
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(boolean0)
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.reciprocal();
        // AssertFixer: old assertion Assert.assertFalse(complex1.equals(((Object) (complex0))))
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.divide(0.0);
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.conjugate();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.reciprocal();
        double double0 = complex1.abs();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, double0, 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }
}

