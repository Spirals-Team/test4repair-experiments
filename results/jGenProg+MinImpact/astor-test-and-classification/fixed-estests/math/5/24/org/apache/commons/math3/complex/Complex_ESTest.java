/**
 * This file was automatically generated by EvoSuite
 * Wed Jan 25 06:14:17 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex((-20.0));
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf(3729.82776, 3729.82776);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(3729.82776, complex0.getReal(), 0.01);
        Assert.assertEquals(0.7071067811865475, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.7071067811865476, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.createComplex(8.076688578001343E11, 1.0);
        Complex complex2 = complex0.subtract(complex1);
        boolean boolean0 = complex0.equals(complex2);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getReal(), 0.01);
        Assert.assertEquals(8.076688578001343E11, complex1.getReal(), 0.01);
        Assert.assertEquals((-8.076688578001343E11), complex2.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0000000139409033), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-1.3940903373095245E-8), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex1.getReal(), 0.01);
        Assert.assertEquals(3.586568148553108E7, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-3.5865681485531084E7), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(1.5625030994415283);
        Complex complex1 = complex0.createComplex(0.0, (-1372.06));
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(7.288311006807283E-4, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-1372.06), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf(3729.82776, 3729.82776);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.multiply(27);
        Complex complex3 = complex2.tanh();
        Complex complex4 = complex0.divide(complex3);
        Assert.assertEquals(1139.3296362096748, complex4.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertEquals((-1139.3296362096748), complex4.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf((-1973.47773));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1973.47773), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf((-1333.76241), (-2697.88314944));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.tanh();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1333.76241), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.557407724654902), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2697.88314944), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf(850.3960066774001, (-658.38986));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals((-1.3940903373095247E-8), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.6543612251060553E-24), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf((-621.302), 1.0);
        Complex complex1 = complex0.pow((-621.302));
        Complex complex2 = complex1.subtract((-648.288735606356));
        Assert.assertEquals(648.288735606356, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf(4652.35736, 2395.2438);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(4652.35736, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals((-1.9434878685797844E-16), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3215.0));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3215.0), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf((-3010.0), (-1.7959243076374794E242));
        Complex complex1 = complex0.pow((-3010.0));
        Complex complex2 = complex1.sinh();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals((-3010.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(790.939570117, 5.047801139699057E-90);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(5.047801139699057E-90, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(790.939570117, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex((-606.59), (-606.59));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(3.5643506993891495E262, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.pow(complex1);
        Assert.assertEquals((-1.2246467991473532E-16), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf(2485.046700581, 2485.046700581);
        Complex complex1 = complex0.pow(2485.046700581);
        Complex complex2 = complex1.subtract(2485.046700581);
        Complex complex3 = complex2.negate();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-1.3940903373095247E-8), complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(110);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf(4348.09496, 4348.09496);
        Complex complex1 = complex0.multiply((-970));
        Assert.assertEquals((-4217652.1112), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(4348.09496, complex0.getReal(), 0.01);
        Assert.assertEquals((-4217652.1112), complex1.getReal(), 0.01);
        Assert.assertEquals(4348.09496, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf((-33.57155313872), (-33.57155313872));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(((double) (-939)));
        Assert.assertEquals((-33.57155313872), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals((-33.57155313872), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex(0.0, (-144.99716523));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-17.741865039051046), complex1.getReal(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex((-1166.77612470597), (-1166.77612470597));
        Complex complex1 = complex0.divide(((double) (0)));
        boolean boolean0 = complex1.isNaN();
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1166.77612470597), complex0.getReal(), 0.01);
        Assert.assertEquals((-1166.77612470597), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf(4348.09496, 4348.09496);
        Complex complex1 = complex0.exp();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(4348.09496, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.cosh();
        double double0 = complex1.getReal();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, double0, 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex(2214.3519);
        Complex complex1 = complex0.multiply((-1836));
        double double0 = complex1.getReal();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4065550.0884000002), double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2214.3519, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf(589.805227, 589.805227);
        Complex complex1 = complex0.negate();
        double double0 = complex1.getImaginary();
        Assert.assertEquals(589.805227, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-589.805227), complex1.getReal(), 0.01);
        Assert.assertEquals((-589.805227), double0, 0.01);
        Assert.assertEquals(589.805227, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = Complex.valueOf((-3010.0), (-1.7959243076374794E242));
        Complex complex1 = complex0.sinh();
        double double0 = complex1.getArgument();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2.356194490192345, double0, 0.01);
        Assert.assertEquals((-3010.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.7959243076374794E242), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.sqrt();
        Complex complex3 = complex1.divide(complex2);
        Assert.assertEquals((-0.009910226533823546), complex3.getReal(), 0.01);
        Assert.assertEquals((-0.023925403304146515), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(1.0000000000000002, complex2.getReal(), 0.01);
        Assert.assertEquals((-5.933479276166677E-17), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.divide(1.1413677466646359E297);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.divide(0.6619024276733398);
        Assert.assertEquals((-2.1061870738409378E-8), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getReal(), 0.01);
        Assert.assertEquals((-2.1061870738409378E-8), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex(1333.5128729510554, Double.NaN);
        Complex complex1 = complex0.createComplex(1333.5128729510554, Double.NaN);
        Assert.assertEquals(1333.5128729510554, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf((-1333.76241), (-2697.88314944));
        Complex complex1 = complex0.createComplex((-1333.76241), (-2697.88314944));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2697.88314944), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-1333.76241), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = Complex.valueOf(0.007469640681223658, 2663.0487059515);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(43.06146382607565, complex2.getImaginary(), 0.01);
        Assert.assertEquals(44.4647877755929, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf((-190.2480038467), (-1174.5925758508108));
        Complex complex1 = complex0.cos();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1174.5925758508108), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf((-33.57155313872), (-33.57155313872));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.cos();
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-33.57155313872), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-33.57155313872), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-1.9434878685797844E-16), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.9999999999999999, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-1.320972037315105E-7));
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-1.320972037315105E-7), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1.1413677466646359E297, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-1333.76241), (-2697.88314944));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2697.88314944), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.7853981633974483), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-1.5703221143904893), complex1.getReal(), 0.01);
        Assert.assertEquals((-4.7421226222123535E-4), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex((-20.0));
        Complex complex1 = complex0.pow(1.6779589653015137);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.asin();
        Assert.assertEquals((-129.22330916913842), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex((-1086.282003));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
        Assert.assertEquals(7.6836631066415695, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf((-3010.0), (-1.7959243076374794E242));
        Complex complex1 = complex0.pow((-3010.0));
        Complex complex2 = complex1.asin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3010.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf(2485.046700581, 2485.046700581);
        Complex complex1 = complex0.pow(2485.046700581);
        Complex complex2 = complex0.add(complex1);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.add(((double) (1223)));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf((-3010.0), (-1.7959243076374794E242));
        Complex complex1 = complex0.pow((-3010.0));
        Complex complex2 = complex1.add((-1.5707963267948966));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
        Assert.assertEquals((-3010.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf(0.007469640681223658, 2663.0487059515);
        Complex complex1 = complex0.multiply(2663.0487059515);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.acos();
        Assert.assertEquals(16.60522002253047, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-0.24497866312686414), complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex((-880.3293589));
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(2.14614200592041, 2.14614200592041);
        // Undeclared exception!
        complex0.nthRoot(6085);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex((-1086.282003));
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf((-33.57155313872), (-33.57155313872));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals((-33.57155313872), complex0.getReal(), 0.01);
        Assert.assertEquals((-33.57155313872), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.log();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(1.1413677466646359E297, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = Complex.valueOf((-648.288735606356), (-3201.5169));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply((-1326.894787080629));
        Assert.assertEquals((-3201.5169), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-648.288735606356), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf((-190.2480038467), (-1174.5925758508108));
        Complex complex1 = complex0.multiply(20.0);
        Complex complex2 = complex1.exp();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3804.9600769339995), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-23491.851517016217), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex(1792.419482, 1792.419482);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.subtract((-1228.24295));
        Complex complex3 = complex2.divide(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex0.add(complex1);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf((-3010.0), (-1.7959243076374794E242));
        Complex complex1 = complex0.pow((-3010.0));
        double double0 = complex1.abs();
        Assert.assertEquals((-1.7959243076374794E242), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-3010.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        Complex complex1 = complex0.subtract((-1.3940903373095247E-8));
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.3940903373095247E-8, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.log();
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.3940903373095247E-8), (-1.3940903373095247E-8));
        double double0 = complex0.abs();
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.3940903373095247E-8), complex0.getReal(), 0.01);
        Assert.assertEquals(1.9715414621964128E-8, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(1256.190758012, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(1256.190758012, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf((-3010.0), (-1.7959243076374794E242));
        double double0 = complex0.getArgument();
        Assert.assertEquals((-3010.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.5707963267948966), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        double double0 = complex0.getReal();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(0.0);
        complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = Complex.valueOf(589.805227, 589.805227);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(589.805227, double0, 0.01);
        Assert.assertEquals(589.805227, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        List<Complex> list0 = complex0.nthRoot(1223);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.pow(2086.8084);
        List<Complex> list0 = complex1.nthRoot(2819);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        try {
            complex0.nthRoot((-951));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -951
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3215.0));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-3215.0), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf(2485.046700581, 2485.046700581);
        Complex complex1 = complex0.pow(2485.046700581);
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(2485.046700581, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2485.046700581, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, 0.6080870628356934);
        Complex complex1 = complex0.tanh();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-6.331009331992412E-18), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-1304.92574284));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-1304.92574284), complex0.getImaginary(), 0.01);
        Assert.assertEquals(25.543352783454253, complex1.getReal(), 0.01);
        Assert.assertEquals((-25.54335278345425), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0004709793065558E-5, 1.0004709793065558E-5);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.atan();
        Complex complex4 = complex3.sqrt();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-49976.46212052636), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertSame(complex4, complex3);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2391.6214339613925));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-2391.6214339613925), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex((-1082.0), 7421.5990320434);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.cos();
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals((-1082.0), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(7421.5990320434, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, 0.6080870628356934);
        Complex complex1 = complex0.atan();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex(1333.5128729510554, Double.NaN);
        Complex complex1 = complex0.asin();
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(1333.5128729510554, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-1.3169578969248166), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf(2485.046700581, 2485.046700581);
        Complex complex1 = complex0.pow(2485.046700581);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.acos();
        Assert.assertEquals(2485.046700581, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(2485.046700581, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, 0.6080870628356934);
        Complex complex1 = complex0.subtract(0.6080870628356934);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.pow(2086.8084);
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(1333.5128729510554, Double.NaN);
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1333.5128729510554, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2391.6214339613925));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.negate();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-2391.6214339613925), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf(2485.175723233846);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2485.175723233846, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply(1.0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0004709793065558E-5, 1.0004709793065558E-5);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals(1.0004709793065558E-5, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1.0004709793065558E-5, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.pow(2086.8084);
        Complex complex2 = complex1.multiply(0.0);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply((-520));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf(2485.046700581, 2485.046700581);
        Complex complex1 = complex0.pow(2485.046700581);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.multiply(2147483588);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2485.046700581, complex0.getReal(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(2485.046700581, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = Complex.valueOf(4348.09496, 4348.09496);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(4348.09496, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = Complex.valueOf((-1333.76241), (-2697.88314944));
        Complex complex1 = complex0.subtract(Double.NaN);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals((-2697.88314944), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1333.76241), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.pow(2086.8084);
        complex1.hashCode();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = Complex.valueOf((-1333.76241), (-2697.88314944));
        complex0.hashCode();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1333.76241), complex0.getReal(), 0.01);
        Assert.assertEquals((-2697.88314944), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.createComplex(2.0, 3727.69296222401);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals(3727.69296222401, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = Complex.valueOf(2.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf(2485.046700581, 2485.046700581);
        Complex complex1 = complex0.pow(2485.046700581);
        Complex complex2 = complex1.exp();
        boolean boolean0 = complex0.equals(complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(2485.046700581, complex0.getReal(), 0.01);
        Assert.assertEquals(2485.046700581, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertEquals(2.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.tanh();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-1054.38), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1054.38), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-35.675611388558885), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.023925403304146515, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.009910226533823546, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = new Complex(1792.419482, Double.NaN);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(1792.419482, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-4.742123688608454E-4), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2391.6214339613925));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-2391.6214339613925), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.divide((-1054.38));
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1054.38), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1054.38), complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = new Complex(1333.5128729510554, 1.5838762427747586E-8);
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1.5838762427747586E-8, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1333.5128729510554, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf(2485.046700581, 2485.046700581);
        Complex complex1 = complex0.pow(2485.046700581);
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.divide(1.0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1.1413677466646359E297, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.cosh();
        Assert.assertEquals(1.1413677466646359E297, complex0.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2391.6214339613925));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sinh();
        Complex complex3 = complex0.divide(complex2);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals((-2391.6214339613925), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex3, complex1);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf(4348.09496, 4348.09496);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tan();
        Complex complex3 = complex2.divide(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(4348.09496, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = new Complex(1333.5128729510554, Double.NaN);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(1333.5128729510554, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.add((-1054.38));
        Assert.assertEquals((-2108.76), complex1.getReal(), 0.01);
        Assert.assertEquals((-1054.38), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1054.38), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = new Complex(1333.5128729510554, Double.NaN);
        Complex complex1 = complex0.add(1333.5128729510554);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(1333.5128729510554, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.acos();
        Complex complex3 = complex2.add(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1054.38), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2391.6214339613925));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sinh();
        double double0 = complex2.abs();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals((-2391.6214339613925), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.exp();
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.1413677466646359E297, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        String string0 = complex0.toString();
        Assert.assertEquals("(-1054.38, -1054.38)", string0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1054.38), complex1.getReal(), 0.01);
        Assert.assertEquals((-1054.38), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf((-1054.38), (-1054.38));
        complex0.getField();
        Assert.assertEquals((-1054.38), complex0.getReal(), 0.01);
        Assert.assertEquals((-1054.38), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = Complex.valueOf((-1333.76241), (-2697.88314944));
        List<Complex> list0 = complex0.nthRoot(1);
        Assert.assertEquals((-2697.88314944), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals((-1333.76241), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = Complex.valueOf((-3010.0), (-1.7959243076374794E242));
        Complex complex1 = complex0.pow((-3010.0));
        Complex complex2 = complex1.reciprocal();
        Complex complex3 = complex2.tan();
        // AssertFixer: old assertion Assert.assertSame(complex3, complex2)
        Assert.assertNotSame(complex3, complex2);
        // AssertFixer: old assertion Assert.assertEquals((-3010.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-3010.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex1.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1413677466646359E297);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.reciprocal();
        Complex complex3 = complex2.reciprocal();
        // AssertFixer: old assertion Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1.1413677466646359E297, complex0.getReal(), 0.01);
    }
}

