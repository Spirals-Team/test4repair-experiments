/**
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 01:24:39 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), 0.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf(((double) (1869)), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-4.038132658329949E-18), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1869.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(20.0, 20.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(6.331009331992412E-18, complex1.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf((-2274.407482543), (-2665.207527413561));
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals((-2.3008340151931557), complex2.getReal(), 0.01);
        Assert.assertEquals((-5.44656488752185E-4), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf((-2274.407482543), (-2665.207527413561));
        complex0.hashCode();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2274.407482543), complex0.getReal(), 0.01);
        Assert.assertEquals((-2665.207527413561), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf(2.4168487931443637E-264, 2.4168487931443637E-264);
        Complex complex1 = complex0.cosh();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2.4168487931443637E-264, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5624021291732788, 0.5624021291732788);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-1.0839125757726482), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.7099266152173171, complex2.getReal(), 0.01);
        Assert.assertEquals(0.64562328581238, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.42286173649709907, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-448.76818266229924));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0022283219680761237, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-448.76818266229924), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5624021291732788, 0.5624021291732788);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-0.8890435758751326), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.5624021291732788, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.8890435758751326, complex1.getReal(), 0.01);
        Assert.assertEquals(0.5624021291732788, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tanh();
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf((-2274.407482543), (-2665.207527413561));
        Complex complex1 = complex0.subtract(1250.556226);
        Assert.assertEquals((-2665.207527413561), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2665.207527413561), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3524.9637085429995), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf((-1123.463), (-1123.463));
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals((-1123.4627774737796), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1123.4632225262644, complex1.getReal(), 0.01);
        Assert.assertEquals((-1123.463), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf((-84.5152909118), (-84.5152909118));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(0.9998987564269313, complex2.getReal(), 0.01);
        Assert.assertEquals((-4.534098318862483E-4), complex2.getImaginary(), 0.01);
        Assert.assertEquals(4.183741132262795, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf((-2274.407482543), (-2665.207527413561));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals((-2665.207527413561), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2274.407482543), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf((-1225.07543));
        Complex complex1 = complex0.pow((-1225.07543));
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1898510456085205);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.negate();
        Assert.assertEquals((-0.6447833052550985), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals(1.1898510456085205, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-799.317), 1610.850330275683);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals((-2575160.106889936), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1610.850330275683, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1955931.1200602772), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(3091958.0236757468, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.valueOf((-1123.463), (-1123.463));
        Complex complex1 = complex0.multiply((-1386));
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-3.4987327794868674E9), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5624021291732788, 0.5624021291732788);
        Complex complex1 = complex0.multiply(0);
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(0.5624021291732788, complex0.getReal(), 0.01);
        Assert.assertEquals(0.5624021291732788, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.5624021291732788), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.5624021291732788), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-104.593572));
        Complex complex1 = complex0.createComplex((-104.593572), (-104.593572));
        Complex complex2 = complex1.multiply(1102);
        Assert.assertEquals((-115262.116344), complex2.getReal(), 0.01);
        Assert.assertEquals((-104.593572), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-104.593572), complex1.getReal(), 0.01);
        Assert.assertEquals((-104.593572), complex0.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-115262.116344), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(0.16607704758644104);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf((-3371.816415139676));
        Complex complex1 = complex0.createComplex((-3371.816415139676), (-1915.73845));
        Complex complex2 = complex1.multiply(2796.7202452683773);
        Assert.assertEquals((-9430027.231549375), complex2.getReal(), 0.01);
        Assert.assertEquals((-5357784.507754061), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1915.73845), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3371.816415139676), complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-3371.816415139676), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(724.03072);
        Complex complex1 = complex0.pow(724.03072);
        boolean boolean0 = complex1.isNaN();
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5624021291732788, 0.5624021291732788);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.5624021291732788, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.5624021291732788, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf((-392.4142), 2965.826709428165);
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-392.4142), complex0.getReal(), 0.01);
        Assert.assertEquals(2965.826709428165, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1898510456085205);
        Complex complex1 = complex0.divide((-1732.4));
        Complex complex2 = complex1.log();
        double double0 = complex2.getImaginary();
        Assert.assertEquals((-3.141592653589793), double0, 0.01);
        Assert.assertEquals((-7.283434881809217), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3.141592653589793, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf((-1123.463), (-1123.463));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2.356194490192345), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex(3488.068, 4202.07522510794);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(4202.07522510794, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.valueOf((-84.5152909118), (-84.5152909118));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-5.98057322732106E-38), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-84.5152909118), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.8818362683475257E-37), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = Complex.valueOf(1.044972933711096, 1.044972933711096);
        Complex complex1 = complex0.createComplex(1.044972933711096, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.044972933711096, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1.044972933711096, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf(1086.3067);
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1.0), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1086.3067, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf((-723.138463956), 3237.76509);
        Complex complex1 = complex0.divide((-723.138463956));
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-4.4773791623356445), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(3237.76509, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-723.138463956), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.createComplex(2.626694269417481, Double.NaN);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(2.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(2.626694269417481, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf((-2274.407482543), (-2665.207527413561));
        Complex complex1 = complex0.createComplex((-3053.949), 0.0);
        Assert.assertEquals((-2665.207527413561), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3053.949), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-2274.407482543), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf((-3371.816415139676));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals((-2.0589061015936716), complex2.getReal(), 0.01);
        Assert.assertEquals((-1.3153647438935996), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf((-3371.816415139676));
        Complex complex1 = complex0.createComplex((-3371.816415139676), (-1915.73845));
        Complex complex2 = complex1.cosh();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-1915.73845), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-3371.816415139676), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = Complex.valueOf((-2228.14));
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.7311374533314429), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), 0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.40808206181339196, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf(0.5624021291732788, 0.5624021291732788);
        Complex complex1 = complex0.cos();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.9833300952867933, complex1.getReal(), 0.01);
        Assert.assertEquals(0.5624021291732788, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.3159445906176793), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-723.138463956), 3237.76509);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.conjugate();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-723.138463956), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = Complex.valueOf(1774.65478976, (-2113.35));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2113.35), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(1774.65478976, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex(249.5692400895052, 249.5692400895052);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.conjugate();
        Complex complex3 = complex2.asin();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(2.268209606591524E107, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.1963129804179443E108), complex2.getReal(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-723.138463956), 3237.76509);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.asin();
        Assert.assertEquals(0.8813735870195428, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(3237.76509, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-723.138463956), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf(656.536791);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex2.add(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(656.536791, complex3.getReal(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(0.0, 2.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(4.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf(2.4168487931443637E-264, 2.4168487931443637E-264);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.add(complex1);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(2.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf((-84.5152909118), (-84.5152909118));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-169.0305818236), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-169.0305818236), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-84.5152909118), complex0.getReal(), 0.01);
        Assert.assertEquals((-84.5152909118), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = Complex.valueOf(656.536791);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.acos();
        Complex complex3 = complex2.negate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf((-3371.816415139676));
        Complex complex1 = complex0.acos();
        Assert.assertEquals(3.141592653589793, complex1.getReal(), 0.01);
        Assert.assertEquals((-8.816354032301472), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf((-184.342131091676), (-184.342131091676));
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf((-84.5152909118), (-84.5152909118));
        // Undeclared exception!
        complex0.nthRoot(520234);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.833351586679361E-8));
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf(400.735012308839, 400.735012308839);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex(0.0);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1898510456085205);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.5677954320242012, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.pow(0.0);
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf((-2228.14));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.log();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2228.14), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.exp();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf(724.03072);
        Complex complex1 = complex0.pow(724.03072);
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-1123.463), (-1123.463));
        Complex complex1 = complex0.negate();
        Assert.assertEquals(1123.463, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1123.463), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1123.463, complex1.getReal(), 0.01);
        Assert.assertEquals((-1123.463), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex(2076.091493, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.add(complex0);
        Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(4152.182986, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf((-3371.816415139676));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3371.816415139676), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.pow(0.0);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.pow(0.0);
        Complex complex2 = complex1.multiply(complex0);
        Complex complex3 = complex0.add(complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.add(complex0);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(20.0, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex((-2793.6726803545), 2951.96362);
        double double0 = complex0.abs();
        Assert.assertEquals(4064.3199011350716, double0, 0.01);
        Assert.assertEquals((-2793.6726803545), complex0.getReal(), 0.01);
        Assert.assertEquals(2951.96362, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 7.398931951182883E-4);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(7.398931951182883E-4, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf((-1225.07543));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1225.07543), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = Complex.valueOf((-3134.09162), 284.4551);
        double double0 = complex0.getReal();
        Assert.assertEquals(284.4551, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3134.09162), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        double double0 = complex0.getImaginary();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex(249.5692400895052, 249.5692400895052);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        List<Complex> list0 = complex2.nthRoot(1985);
        Assert.assertEquals((-2.268209606591524E107), complex1.getImaginary(), 0.01);
        Assert.assertEquals(249.5692400895052, complex0.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(249.5692400895052, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.1963129804179443E108), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        List<Complex> list0 = complex1.nthRoot(1538);
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf((-104.593572));
        try {
            complex0.nthRoot((-698));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -698
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf((-2228.14));
        List<Complex> list0 = complex0.nthRoot(1159);
        Assert.assertEquals((-2228.14), complex0.getReal(), 0.01);
        Assert.assertEquals(1159, list0.size());
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf(1080.1788841271455, (-7.667998948729528E-9));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.tanh();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.divide(1.05387548454467E-309);
        Complex complex2 = complex1.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex((-5.667682106730711E-8));
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-5.6676821067307175E-8), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf((-799.317), 1610.850330275683);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.pow(complex0);
        Complex complex4 = complex3.exp();
        Complex complex5 = complex4.asin();
        Assert.assertEquals(6.520986801036798E-164, complex3.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf((-799.317), 1610.850330275683);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.asin();
        Assert.assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex3.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.sin();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 0.0);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.cos();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1898510456085205);
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex1.asin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.1898510456085205, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.acos();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = Complex.valueOf(1005.23581245461);
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1005.23581245461, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.subtract((-20.0));
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf((-2228.14));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals((-2228.14), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-420.41958));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(1.2428488853188662E148);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(7);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex((-735.5));
        Complex complex1 = complex0.pow(1861.05325);
        Complex complex2 = complex1.multiply(2045221651);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf((-2228.14));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(1073741824);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2228.14), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf(656.536791);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex1.multiply(complex2);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = new Complex((-2292.846194121), (-2292.846194121));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2292.846194121), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf((-2228.14));
        Complex complex1 = complex0.cosh();
        complex1.hashCode();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2228.14), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        complex0.hashCode();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf((-392.4142), 2965.826709428165);
        Complex complex1 = complex0.sqrt1z();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(392.4141780777073, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2965.826709428165, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2965.8268751146384, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf(1080.1788841271455, (-7.667998948729528E-9));
        Complex complex1 = complex0.divide(0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-7.667998948729528E-9), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(1080.1788841271455, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.subtract(0.0);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.divide(1.05387548454467E-309);
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), 0.0);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-0.05006261743217589), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.reciprocal();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
        Assert.assertEquals((-5.686999699981705E-4), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex0.pow(complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = new Complex((-5.667682106730711E-8));
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0);
        Complex complex1 = complex0.pow(Double.NaN);
        Complex complex2 = complex1.divide(0.0020034600688347837);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2.0, complex0.getReal(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.divide(1.05387548454467E-309);
        Complex complex2 = complex0.exp();
        Complex complex3 = complex2.divide(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.divide(1.05387548454467E-309);
        Complex complex2 = complex1.divide(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = Complex.valueOf((-1123.463), (-1123.463));
        Complex complex1 = complex0.subtract((-1123.463));
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf((-2228.14));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2228.14), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.NaN);
        Complex complex1 = complex0.conjugate();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = new Complex((-5.667682106730711E-8));
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-5.667682106730711E-8), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = Complex.valueOf(1.1898510456085205);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1.1898510456085205, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf((-1123.463), (-1123.463));
        Complex complex1 = complex0.add((-1123.463));
        Assert.assertEquals((-1123.463), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1123.463), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2246.926), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = Complex.valueOf((-1123.463), (-1123.463));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.7853980643615911), complex1.getReal(), 0.01);
        Assert.assertEquals((-8.063891929123733), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        Complex complex1 = complex0.exp();
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = new Complex(Double.NaN);
        double double0 = complex0.abs();
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 0.0);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = Complex.valueOf((-1758.3964353));
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1758.3964353), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = Complex.valueOf((-104.593572));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals((-5.671753712254591E-212), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.7170447473695958E-212), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals("(0.0, 0.0)", string0);
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Complex complex0 = Complex.valueOf((-2228.14));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2228.14), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2228.14), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        Complex complex0 = Complex.valueOf((-1225.07543));
        complex0.getField();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1225.07543), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test165() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test166() throws Throwable {
        Complex complex0 = Complex.valueOf((-104.593572));
        Complex complex1 = complex0.pow((-104.593572));
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.7170447473695958E-212), complex1.getReal(), 0.01);
        Assert.assertEquals((-5.671753712254591E-212), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test167() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        // AssertFixer: old assertion Assert.assertFalse(complex1.equals(((Object) (complex0))))
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }
}

