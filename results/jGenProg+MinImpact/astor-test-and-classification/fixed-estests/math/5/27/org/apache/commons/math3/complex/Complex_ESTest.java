/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 17:25:45 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf(537.2343967975116);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-6.331009331992412E-18), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 20.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex(0.0, ((double) (3409)));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(41.28559070668603, complex2.getReal(), 0.01);
        Assert.assertEquals((-3409.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-41.28559070668603), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex((-3927.8604), (-3927.8604));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals((-5.196827986388168), complex2.getReal(), 0.01);
        Assert.assertEquals(0.5801273766404779, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.pow(complex0);
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf(537.13679122);
        Complex complex1 = complex0.exp();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.8860120104182793E233, complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1825.6133));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-3.0004216302258215E-7), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-1825.6133), complex0.getImaginary(), 0.01);
        Assert.assertEquals(5.477609633747941E-4, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex(3125.54239, 3125.54239);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(1.5997223445112193E-4, complex1.getReal(), 0.01);
        Assert.assertEquals(3125.54239, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.5997223445112193E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals(3125.54239, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-374.35056927552));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0026713023833706247), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-374.35056927552), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf(0.9915887594344042);
        Complex complex1 = complex0.divide((-2001.79201092));
        Assert.assertEquals((-4.953505429261263E-4), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.9915887594344042, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 20.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.05004172927849131, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-19.0), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-6.203097420189161), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(6.283185307179586, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf(1097.0, (-3256.320795));
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.subtract((-712.758955215328));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf((-374.35056927552));
        Complex complex1 = complex0.subtract((-374.35056927552));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-374.35056927552), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(1.9803689272433392E-303, Double.NaN);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.9803689272433392E-303, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(537.13679122);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(891.2697493043772, 891.2697493043772);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals((-891.2694688057283), complex1.getImaginary(), 0.01);
        Assert.assertEquals(891.2697493043772, complex0.getReal(), 0.01);
        Assert.assertEquals(891.2697493043772, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf(1002.7688);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.7518350605744594), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex(1048.790438495, 1048.790438495);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1048.790438495, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1048.790438495, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex((-2001.79201092), 8.43556335894391E-11);
        Complex complex1 = complex0.sin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-6.974101484297594E-11), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.5625695867704237, complex1.getReal(), 0.01);
        Assert.assertEquals((-2001.79201092), complex0.getReal(), 0.01);
        Assert.assertEquals(8.43556335894391E-11, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.pow((-2641.4));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf(770.997, 0.3615458607673645);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.negate();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf(2763.0, 2763.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-2763.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2763.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-2763.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2763.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(3322.60425851, 3322.60425851);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2.2079398117337573E7, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf(891.2697493043772, 891.2697493043772);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(891.2697493043772, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-891.2697493043772), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf((-151.284), 1754.7438451388437);
        Complex complex1 = complex0.multiply(2329);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1754.7438451388437, complex0.getImaginary(), 0.01);
        Assert.assertEquals(4086798.4153283667, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-352340.436), complex1.getReal(), 0.01);
        Assert.assertEquals((-151.284), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.multiply((-898));
        Assert.assertEquals(17960.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply((-967));
        Assert.assertEquals((-2715.159683885397), complex0.getReal(), 0.01);
        Assert.assertEquals((-2625559.236242932), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.multiply(244.89669);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-664933.6194049801), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2715.159683885397), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        Complex complex1 = complex0.multiply(8.403887374207366E221);
        Assert.assertEquals((-1.1985002285428854E225), complex1.getReal(), 0.01);
        Assert.assertEquals((-1426.126), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1426.126), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.1985002285428854E225), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex0))));
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1825.6133));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-1825.6133), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.571344087867839), complex1.getImaginary(), 0.01);
        Assert.assertEquals(7.5096714143784515, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.pow((-1457.521));
        boolean boolean0 = complex1.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex((-1029.86021781), (-1029.86021781));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.add(complex0);
        boolean boolean0 = complex2.isInfinite();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        double double0 = complex1.getReal();
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf((-623.8383447515364), (-623.8383447515364));
        double double0 = complex0.getReal();
        Assert.assertEquals((-623.8383447515364), double0, 0.01);
        Assert.assertEquals((-623.8383447515364), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf(2.3416513526430908E-7);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(2.3416513526430908E-7, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex(1.9803689272433392E-303, Double.NaN);
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(1.9803689272433392E-303, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf(3433845.4188, (-1988.4971642));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-1988.4971642), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex((-9.684925795536813E116), (-7.7244279338702935));
        Complex complex1 = complex0.pow(9.684925795536813E116);
        Complex complex2 = complex1.divide(172.73129053);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.createComplex(9.357622912219837E-14, Double.NaN);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(9.357622912219837E-14, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2715.159683885397), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.createComplex((-20.0), (-2.092998451547496));
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-20.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-2.092998451547496), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-151.284), 1754.7438451388437);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(1754.7438451388437, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2.4824733617934477E65), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.1170323718847616E64), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals(2715.159499734159, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.cos();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.40808206181339196, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1825.6133));
        Complex complex1 = complex0.cos();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1825.6133), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf(770.997, 0.3615458607673645);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.conjugate();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf((-151.284), 1754.7438451388437);
        Complex complex1 = complex0.conjugate();
        double double0 = complex1.getArgument();
        Assert.assertEquals((-1.6567979598679072), double0, 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-151.284), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf(0.9915887594344042);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.9915887594344042, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf(283.0, 3892.547955);
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(1.570777747509628, complex2.getReal(), 0.01);
        Assert.assertEquals((-2.5555037354003766E-4), complex2.getImaginary(), 0.01);
        Assert.assertEquals(3892.547955, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf(6.283185307179586);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.asin();
        Assert.assertEquals((-2.4492935982947064E-16), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.add(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(40.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf(2763.0, 2763.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.add(3.141592653589793);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        Complex complex1 = complex0.add((-1426.126));
        Assert.assertEquals((-1426.126), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2852.252), complex1.getReal(), 0.01);
        Assert.assertEquals((-1426.126), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
        Complex complex1 = complex0.divide(1.5692921723471877E-213);
        Complex complex2 = complex1.acos();
        Assert.assertEquals(4.00383396915938E213, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf(537.13679122);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(6.979399108396686, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf(3433845.4188299784, (-1988.4971642));
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.acos();
        Assert.assertEquals(13.16979643063896, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals((-2.676791728414971), complex2.getReal(), 0.01);
        Assert.assertEquals((-3.1425740167701424), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-3.6882538673612966), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf((-1528.5627590101421), (-1696.76295975207));
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex(1568.78549);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf((-623.8383447515364), (-623.8383447515364));
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.log();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex((-1188.60940159142));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.exp();
        Assert.assertEquals((-1188.60940159142), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf((-151.284), 1754.7438451388437);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-151.284), complex0.getReal(), 0.01);
        Assert.assertEquals(151.284, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1754.7438451388437, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1754.7438451388437), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf(6.283185307179586);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(6.283185307179586, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf(283.0, 3892.547955);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply(3892.547955);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(283.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(3892.547955, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(949.48033673, 949.48033673);
        Complex complex1 = complex0.pow(949.48033673);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex(0.0, 1240.70230452529);
        Complex complex1 = complex0.pow(1240.70230452529);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf((-374.35056927552));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(140138.3487169059, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf(3541.7, 3541.7);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.multiply(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(3541.7, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex0.multiply(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(2715.159499734159, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf(1002.7688);
        Complex complex1 = new Complex(0.0, ((double) (3409)));
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.2941533587562335), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.add(complex1);
        Assert.assertEquals((-2715.159683885397), complex0.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(2715.159499734159, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf((-1862.0));
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1862.0, double0, 0.01);
        Assert.assertEquals((-1862.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1825.6133));
        double double0 = complex0.abs();
        Assert.assertEquals(1825.6135738805433, double0, 0.01);
        Assert.assertEquals((-1825.6133), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex(4938.7, 4938.7);
        Complex complex1 = complex0.pow(complex0);
        double double0 = complex1.abs();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-427.413649167007));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-427.413649167007), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, (-1057.19));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals((-1057.19), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex((-1029.86021781), (-1029.86021781));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1029.86021781), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1029.86021781), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        double double0 = complex0.getReal();
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        double double0 = complex0.getImaginary();
        Assert.assertEquals((-1426.126), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1426.126), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf(537.13679122);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.asin();
        complex2.nthRoot(1272);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(1.8860120104182793E233, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        List<Complex> list0 = complex1.nthRoot(281);
        Assert.assertEquals(1, list0.size());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf(1122.8);
        try {
            complex0.nthRoot((-1915));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -1,915
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        List<Complex> list0 = complex0.nthRoot(281);
        Assert.assertEquals(281, list0.size());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1426.126), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1426.126), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf(892.073163826997, 892.073163826997);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(892.073163826997, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(892.073163826997, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex((-9.684925795536813E116), (-7.7244279338702935));
        Complex complex1 = complex0.pow(9.684925795536813E116);
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-7.7244279338702935), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-2.092998451547496), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-2.2371609442247427), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(36.845349094113345, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2715.159499734159, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf(3541.7, 3541.7);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.sqrt();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex(1.9803689272433392E-303, Double.NaN);
        Complex complex1 = complex0.sinh();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.9803689272433392E-303, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.sin();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.asin();
        Assert.assertEquals((-2715.159683885397), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(2715.159499734159, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.acos();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(2230.47683997153, 2230.47683997153);
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertEquals(2230.47683997153, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2230.47683997153, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.subtract(244.89669);
        Complex complex4 = complex3.cosh();
        Assert.assertEquals((-2715.159683885397), complex0.getReal(), 0.01);
        Assert.assertEquals(2715.159499734159, complex1.getImaginary(), 0.01);
        Assert.assertSame(complex4, complex3);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex((-1188.60940159142));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex((-1188.60940159142));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1188.60940159142), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.negate();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.multiply((-1894));
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf(3541.7, 3541.7);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.multiply(1472);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(3541.7, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(281);
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf(3541.7, 3541.7);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.cos();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(3541.7, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf(3433845.4188, (-1988.4971642));
        Complex complex1 = complex0.createComplex(1222.6863442828724, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-1988.4971642), complex0.getImaginary(), 0.01);
        Assert.assertEquals(3433845.4188, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1222.6863442828724, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = Complex.valueOf(Double.NaN, (-915.1911185493));
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.cos();
        complex2.hashCode();
        Assert.assertEquals(2715.159499734159, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = new Complex((-1.3282890219894906E230), (-1.3282890219894906E230));
        complex0.hashCode();
        Assert.assertEquals((-1.3282890219894906E230), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.3282890219894906E230), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.multiply((-16.426851972882993));
        boolean boolean0 = complex2.equals(complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1426.126), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex2))));
        Assert.assertFalse(boolean0);
        Assert.assertEquals(16.426851972882993, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf(537.13679122);
        Complex complex1 = complex0.asin();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertEquals((-6.979399108378917), complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.tanh();
        boolean boolean0 = complex1.equals(complex3);
        Assert.assertEquals(2715.159499734159, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex3.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-2715.159683885397), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        Complex complex1 = complex0.subtract(0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-1426.126), complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-1426.126), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = new Complex(0.0);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf(537.13679122);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex2.reciprocal();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = new Complex((-2001.79201092), 8.43556335894391E-11);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-2.1051167574766924E-17), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.99552398323546E-4), complex1.getReal(), 0.01);
        Assert.assertEquals((-2001.79201092), complex0.getReal(), 0.01);
        Assert.assertEquals(8.43556335894391E-11, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf(3541.7, 3541.7);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.reciprocal();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(3541.7, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(2.823502837620352E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf(892.073163826997, 892.073163826997);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.negate();
        Assert.assertEquals(892.073163826997, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals(892.073163826997, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(0.0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf((-2715.159683885397));
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertEquals((-2715.159683885397), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = new Complex((-1.3282890219894906E230), (-1.3282890219894906E230));
        Complex complex1 = complex0.divide(864.52009412);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.3282890219894906E230), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.5364466725803101E227), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.5364466725803101E227), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.3282890219894906E230), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = new Complex(1.9803689272433392E-303, Double.NaN);
        Complex complex1 = complex0.divide(3415.6);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.9803689272433392E-303, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.acos();
        Complex complex3 = complex2.divide(complex1);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = Complex.valueOf(892.073163826997, 892.073163826997);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        Complex complex2 = complex0.divide(complex1);
        Complex complex3 = complex2.tan();
        Assert.assertEquals(892.073163826997, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertSame(complex3, complex2);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(892.073163826997, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = Complex.valueOf(2763.0, 2763.0);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(2763.0, complex0.getReal(), 0.01);
        Assert.assertEquals(2763.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.tan();
        Complex complex3 = complex1.add(complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = new Complex((-1.3282890219894906E230), (-1.3282890219894906E230));
        Complex complex1 = complex0.exp();
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.3282890219894906E230), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = new Complex(1092.0, Double.NaN);
        double double0 = complex0.abs();
        Assert.assertEquals(1092.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = new Complex(8.43556335894391E-11, Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(8.43556335894391E-11, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf((-1426.126), (-1426.126));
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals((-1426.126), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1426.126), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = new Complex((-1.3282890219894906E230), (-1.3282890219894906E230));
        String string0 = complex0.toString();
        Assert.assertEquals("(-1.3282890219894906E230, -1.3282890219894906E230)", string0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-8.865509317335288), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        complex0.getField();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = new Complex((-2001.79201092), 8.43556335894391E-11);
        double double0 = complex0.getArgument();
        Assert.assertEquals(3.141592653589751, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.add(0.0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3541.7));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-7083.4), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3541.7), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }
}

