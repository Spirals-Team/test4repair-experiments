/**
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 19:56:51 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf((-1516.055032), (-1516.055032));
        List<Complex> list0 = complex0.nthRoot(7);
        Assert.assertEquals(7, list0.size());
        Assert.assertEquals((-1516.055032), complex0.getReal(), 0.01);
        Assert.assertEquals((-1516.055032), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.valueOf(1315.093172695, (-368.8700234));
        try {
            complex0.nthRoot((-127));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -127
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-20.0));
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-6.331009331992412E-18), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex(20.0, 20.0);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(6.331009331992412E-18, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sqrt1z();
        complex1.hashCode();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-618.0));
        complex0.hashCode();
        Assert.assertEquals((-618.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.createComplex((-1196.46250254), 2118.235);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2118.235, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-1196.46250254), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf(3.0357834799588566E112, 0.0);
        Complex complex1 = complex0.pow(3.0357834799588566E112);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2723.384039433458);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(2723.384039433458, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3.6719022566058244E-4), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-4.178986446726112E-4), complex2.getReal(), 0.01);
        Assert.assertEquals(4.178985473638801E-4, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf(2.3718718327094683E-102);
        Complex complex1 = Complex.valueOf(2.3718718327094683E-102, 2.3718718327094683E-102);
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.tanh();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex3.isInfinite());
        Assert.assertEquals(2.3718718327094683E-102, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2.3718718327094683E-102), complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf(3.0357834799588566E112, 0.0);
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(3.0357834799588566E112, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.atan();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals((-4.178985473640197E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1194.8921241118499), complex2.getReal(), 0.01);
        Assert.assertEquals((-1196.4620846414527), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf((-21.247258288803927), (-21.247258288803927));
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.subtract(((double) (-2398)));
        Assert.assertEquals((-21.247258288803927), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-21.247258288803927), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf((-932.805));
        Complex complex1 = complex0.subtract(2.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-934.805), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.subtract(0.0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf(2.6474285478041252E281);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1196.46250254), complex0.getReal(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-4.35799392139009E85));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.9865113875892452, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.35799392139009E85), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals((-2.2146463048385474E8), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-9.899360663146222E7), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(4.178985960182935E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.178985960182935E-4), complex1.getReal(), 0.01);
        Assert.assertEquals((-1196.46250254), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf(1315.093172695, (-368.8700234));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex((-2463.385), (-2463.385));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex((-1.2116165315442256E-158), (-20.0));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals((-2.214167111268761E-14), complex1.getReal(), 0.01);
        Assert.assertEquals(5.053355973198446E-15, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex((-3.5727227900139915E148), 1265.2);
        Complex complex1 = complex0.pow(1265.2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1265.2, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.negate();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(6.215254247046592E171);
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-6.215254247046592E171), complex1.getReal(), 0.01);
        Assert.assertEquals(6.215254247046592E171, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf(3.0357834799588566E112, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.negate();
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals((-3.0357834799588566E112), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex(271.6164247011, 271.6164247011);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(2017.9764294756283, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex((-4384.2), (-4384.2));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-3.8442419279999994E7), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(734);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex((-2266.0464), (-2266.0464));
        Complex complex1 = complex0.multiply(408);
        Assert.assertEquals((-924546.9312000001), complex1.getReal(), 0.01);
        Assert.assertEquals((-2266.0464), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-924546.9312000001), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2266.0464), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf((-7.475571347653619E-8), (-7.475571347653619E-8));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.multiply((-7.475571347653619E-8));
        Assert.assertEquals((-1.174260057242915E-7), complex2.getReal(), 0.01);
        Assert.assertEquals((-5.588416709457696E-15), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.log();
        Assert.assertEquals(3.3423058638339636, complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.subtract(complex0);
        boolean boolean0 = complex2.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex((-2017.8692), (-1470.52231));
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals((-2017.8692), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1470.52231), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf((-2432.4315051593067), 4622.26);
        Complex complex1 = new Complex(0.0);
        Complex complex2 = complex1.pow(complex0);
        double double0 = complex2.getReal();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(4622.26, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex(0.0);
        complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex((-1512.0), (-1512.0));
        Complex complex1 = complex0.multiply((-1512.0));
        double double0 = complex1.getImaginary();
        Assert.assertEquals(2286144.0, double0, 0.01);
        Assert.assertEquals(2286144.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1512.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-1512.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        double double0 = complex0.getArgument();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.pow(0.0);
        double double0 = complex1.getArgument();
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0965324942770584E171), (-1.0965324942770584E171));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0965324942770584E171), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf((-21.247258288803927), (-21.247258288803927));
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-21.247258288803927), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-21.247258288803927), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = Complex.valueOf(1.2244183812423448E-7);
        Complex complex3 = complex2.divide(complex1);
        Assert.assertEquals((-1.4649706805771917E-4), complex3.getImaginary(), 0.01);
        Assert.assertEquals((-4.178985960182935E-4), complex1.getReal(), 0.01);
        Assert.assertEquals(4.178985960182935E-4, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide((-8.188758163994317E-228));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-4384.2), (-4384.2));
        Complex complex1 = complex0.divide(3157.50612598);
        Assert.assertEquals((-4384.2), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-4384.2), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.388500869064591), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.388500869064591), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex((-1.2116165315442256E-158), (-20.0));
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.2116165315442256E-158), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex((-268.6626969259), (-268.6626969259));
        Complex complex1 = complex0.createComplex(0.0, Double.NaN);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-268.6626969259), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0965324942770584E171), (-1.0965324942770584E171));
        Complex complex1 = complex0.createComplex((-1.0965324942770584E171), 0.0);
        Assert.assertEquals((-1.0965324942770584E171), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1.0965324942770584E171), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0965324942770584E171), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.createComplex(1.2244183812423448E-7, (-1196.46250254));
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-1196.46250254), complex1.getImaginary(), 0.01);
        Assert.assertEquals(8.35797192036587E-4, complex2.getImaginary(), 0.01);
        Assert.assertEquals(8.553259652916887E-14, complex2.getReal(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getReal(), 0.01);
        Assert.assertEquals(1.2244183812423448E-7, complex1.getReal(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf((-726.3440215755556), (-726.3440215755556));
        Complex complex1 = complex0.subtract((-726.3440215755556));
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-726.3440215755556), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.8044076667550508), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf((-1156.2919224), 20.0);
        Complex complex1 = complex0.cosh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.cos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex(271.6164247011, 271.6164247011);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(5.9928248421355E116, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-4.536571961143047E117), complex1.getImaginary(), 0.01);
        Assert.assertEquals(271.6164247011, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = Complex.valueOf(1.2244183812423448E-7);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(1.2244183812423448E-7, complex0.getReal(), 0.01);
        Assert.assertEquals(1.2244183812423448E-7, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2723.384039433458);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2723.384039433458), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2723.384039433458, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-618.0));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.asin();
        Assert.assertEquals((-1.2386819825679067E268), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-1.0));
        Complex complex1 = complex0.asin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(1440.5525133635751, 1440.5525133635751);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.add(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.add(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex((-1.0));
        Complex complex1 = complex0.multiply(161);
        Complex complex2 = complex1.add(((double) (161)));
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-161.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.add((-333.61891803));
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1196.46250254), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1530.08142057), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf(3116.06290102687);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(8.73747274749694, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf(1.2244183812423448E-7);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707962043530586, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex((-20.0), 0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-3.6882538673612966), complex1.getImaginary(), 0.01);
        Assert.assertEquals(3.141592653589793, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf(1800.615597233);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex((-3.5727227900139915E148), 1265.2);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf((-2437.9601601705));
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(15.741521454785138, complex1.getReal(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-38.00339458852934), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0058765411376953, Double.NaN);
        Complex complex1 = complex0.sqrt();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.subtract(complex0);
        Complex complex3 = complex2.log();
        Assert.assertSame(complex3, complex2);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertSame(complex3, complex1);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0058765411376953, Double.NaN);
        Complex complex1 = complex0.exp();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf(3116.06290102687);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(9709848.003155991, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-618.0));
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-618.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex((-4384.2), (-4384.2));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertEquals((-4384.2), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-4384.2), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-618.0));
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-618.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.pow(0.0);
        Complex complex2 = complex0.add(complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-40.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-40.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf(6.215254247046592E171);
        double double0 = complex0.abs();
        Assert.assertEquals(6.215254247046592E171, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(6.215254247046592E171, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2723.384039433458);
        double double0 = complex0.abs();
        Assert.assertEquals(2723.384039433458, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(2723.384039433458, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2877.132257));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-2877.132257), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(1894.285176, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1894.285176, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 1802.0284043909);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertEquals(1802.0284043909, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf((-2432.4315051593067), 4622.26);
        double double0 = complex0.getReal();
        Assert.assertEquals((-2432.4315051593067), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(4622.26, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-20.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
        List<Complex> list0 = complex0.nthRoot(37);
        Assert.assertEquals(1, list0.size());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = Complex.valueOf((-2432.4315051593067), 4622.26);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf(3.0357834799588566E112, 0.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(3.0357834799588566E112, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.createComplex(1249.0, 1249.0);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.tanh();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(1249.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = Complex.valueOf(6.215254247046592E171);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.8487854656676722E-177, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex((-4384.2), (-4384.2));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.tan();
        Complex complex3 = complex2.sqrt();
        Assert.assertEquals(0.7071067811865475, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-4384.2), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex2.tan();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-618.0));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-17.578395831246944), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(17.578395831246947, complex1.getReal(), 0.01);
        Assert.assertEquals((-618.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0058765411376953, Double.NaN);
        Complex complex1 = complex0.sinh();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.8487854656676722E-177, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, 232.49847327425027);
        Complex complex1 = complex0.sin();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.cosh();
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf(6.215254247046592E171);
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-0.9765540307068639), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.pow((-207.5));
        Complex complex3 = complex2.atan();
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-618.0));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-7.119636292597486), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1196.46250254), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2723.384039433458);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.subtract(0.0014280059953080126);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(2723.384039433458, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.pow((-207.5));
        Complex complex3 = complex2.sqrt1z();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = Complex.valueOf((-1196.46250254), (-1196.46250254));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1196.46250254), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1196.46250254), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf((-21.247258288803927), (-21.247258288803927));
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-2398));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-21.247258288803927), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex0.getReal(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.multiply(1);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf((-21.247258288803927), (-21.247258288803927));
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-21.247258288803927), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        Complex complex1 = complex0.acos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
        Assert.assertEquals(4.231000988846797E177, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf((-21.247258288803927), (-21.247258288803927));
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.atan();
        Complex complex3 = complex1.multiply(complex1);
        Complex complex4 = complex3.subtract(complex2);
        boolean boolean0 = complex4.equals(complex1);
        Assert.assertFalse(boolean0);
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertEquals((-21.247258288803927), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex4.equals(((Object) (complex3))));
        Assert.assertEquals((-0.023523754387530894), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.5472551968066053), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf(3.0357834799588566E112, 0.0);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(3.0357834799588566E112, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf((-21.247258288803927), (-21.247258288803927));
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex0.getReal(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf((-726.3440215755556), (-726.3440215755556));
        Complex complex1 = complex0.subtract((-726.3440215755556));
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.001376758079223728, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-726.3440215755556), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.pow((-207.5));
        Complex complex3 = complex2.reciprocal();
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf(6.215254247046592E171);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex0.reciprocal();
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex2))));
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertTrue(boolean0);
        Assert.assertEquals(6.215254247046592E171, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.6089446388700623E-172, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf(1315.093172695, (-368.8700234));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(1315.093172695, complex0.getReal(), 0.01);
        Assert.assertEquals((-368.8700234), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0058765411376953, Double.NaN);
        Complex complex1 = complex0.divide((-4057.3195413510816));
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = new Complex(1440.5525133635751, 1440.5525133635751);
        Complex complex1 = new Complex(0.0, 0.0);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1440.5525133635751, complex0.getReal(), 0.01);
        Assert.assertEquals(1440.5525133635751, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = new Complex(1440.5525133635751, 1440.5525133635751);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex1.divide(complex2);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = new Complex((-1.2116165315442256E-158), (-20.0));
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals((-1.2116165315442256E-158), complex0.getReal(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.conjugate();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0965324942770584E171), (-1.0965324942770584E171));
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-1.0965324942770584E171), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0965324942770584E171), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.0965324942770584E171), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0965324942770584E171, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf((-21.247258288803927), (-21.247258288803927));
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals((-21.247258288803927), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-21.247258288803927), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.add(complex0);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf((-1516.055032), (-1516.055032));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.pow((-207.5));
        Complex complex3 = complex2.add((-207.5));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.subtract(complex0);
        double double0 = complex2.abs();
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = new Complex(5.515817703577808E-8, Double.POSITIVE_INFINITY);
        Assert.assertEquals(5.515817703577808E-8, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf(6.215254247046592E171);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.negate();
        boolean boolean0 = complex0.equals(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex2.asin();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = new Complex(1.8487854656676722E-177);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals("(4.231000988846797E177, -551.3)", string0);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = Complex.valueOf((-21.247258288803927), (-21.247258288803927));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertEquals((-21.247258288803927), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-21.247258288803927), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        ComplexField complexField0 = complex0.getField();
        boolean boolean0 = complex0.equals(complexField0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(4.231000988846797E177, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1.3030013499246722E-175), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Complex complex0 = new Complex(4.231000988846797E177, (-551.3));
        Complex complex1 = complex0.pow((-207.5));
        Assert.assertEquals((-551.3), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex0.subtract(complex1);
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex0.multiply(complex1);
        Complex complex3 = complex2.multiply(0.0);
        // AssertFixer: old assertion Assert.assertFalse(complex1.isInfinite())
        Assert.assertTrue(complex1.isInfinite());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertSame(complex3, complex2)
        Assert.assertNotSame(complex3, complex2);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        List<Complex> list0 = complex1.nthRoot(392);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertTrue(complex1.isNaN())
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(1, list0.size());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.cos();
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.acos();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        complex1.hashCode();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
    }
}

