/**
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 21:26:14 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(0.0, (-5.806792575852521E10));
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-6.331009331992412E-18), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(6.331009331992412E-18, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-6.331009331992412E-18), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf(729.76636);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(19.101906643695095, complex2.getReal(), 0.01);
        Assert.assertEquals(19.1019066436951, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf(0.8109631538391113, (-1915.8870826903));
        Complex complex1 = new Complex(0.8109631538391113, 749.8269906031034);
        Complex complex2 = complex0.divide(complex1);
        Complex complex3 = complex2.sin();
        Assert.assertEquals((-0.553446167063423), complex3.getReal(), 0.01);
        Assert.assertEquals(0.00320242924523849, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-2.5551013614845726), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0038449619024894504), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf((-3789.3030825698897));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex0.pow((-3789.3030825698897));
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertEquals(61.5573154269246, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.equals(((Object) (complex2))));
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf((-3789.3030825698897));
        Complex complex1 = complex0.sqrt();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(61.5573154269246, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf(305.39, (-2990.8682112440392));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(3.378747775947393E-5, complex1.getReal(), 0.01);
        Assert.assertEquals((-2990.8682112440392), complex0.getImaginary(), 0.01);
        Assert.assertEquals(305.39, complex0.getReal(), 0.01);
        Assert.assertEquals(3.309011204326453E-4, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf((-3199.09319383));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3.1258858039167833E-4), complex1.getReal(), 0.01);
        Assert.assertEquals((-3199.09319383), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-3789.3030825698897));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-0.01624502291993405), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(61.5573154269246, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.createComplex((-1.0), (-1.0));
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf(1315.4366447687942, 1315.4366447687942);
        try {
            complex0.nthRoot((-130));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -130
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf((-3199.09319383), 0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3199.09319383), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.tan();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0904271124793968E-8), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex((-2351.42110351), 20.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals((-15.9645468091218), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-19.214914336500826), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.subtract(0.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.subtract((-2944.21110737638));
        Assert.assertEquals(2924.21110737638, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(2.1376680994038112E209, 3344.885753);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(3344.885753, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.5879028388541522, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(44.61076103363403, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals((-1.0904271124793968E-8), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0904271124793968E-8), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2.2146463048385474E8), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-9.899360663146222E7), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-483.38));
        Complex complex1 = complex0.sin();
        Assert.assertEquals((-483.38), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.4125655199931645, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex(2926.1449900954567, 2926.1449900954567);
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.369719167842365E-14), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf(387.3711917546, 3864.59);
        Complex complex1 = complex0.pow(387.3711917546);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3864.59, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0119363182315487E10);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.1890312876301551E-16, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals((-88780.76774825575), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex(0.0, (-5.806792575852521E10));
        Complex complex1 = complex0.multiply(1358);
        Assert.assertEquals((-7.885624318007723E13), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-5.806792575852521E10), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf(1174.03);
        Complex complex1 = complex0.multiply(795);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(933353.85, complex1.getReal(), 0.01);
        Assert.assertEquals(1174.03, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.multiply(3.141592653589793);
        Assert.assertEquals(140.14883913431447, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf(45.65764624400638, 45.65764624400638);
        Complex complex1 = complex0.multiply((-1691.573953395837));
        Assert.assertEquals(45.65764624400638, complex0.getReal(), 0.01);
        Assert.assertEquals(45.65764624400638, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-77233.28515972245), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-77233.28515972245), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.divide(4098.878410756728);
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.log();
        Assert.assertEquals(0.0, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.log();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-3.141592653589793), complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(770.55669241, 770.55669241);
        Complex complex1 = complex0.cos();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(770.55669241, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        Complex complex1 = complex0.sqrt();
        double double0 = complex1.getReal();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(44.61076103363403, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex(4.184049381430498E220);
        double double0 = complex0.getReal();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(4.184049381430498E220, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.pow(complex0);
        double double0 = complex2.getImaginary();
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1.0));
        double double0 = complex0.getImaginary();
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.0), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex((-740.857));
        Complex complex1 = complex0.multiply((-740.857));
        double double0 = complex1.getArgument();
        Assert.assertEquals(548869.094449, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), double0, 0.01);
        Assert.assertEquals((-740.857), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf(45.65764624400638, 45.65764624400638);
        Complex complex1 = complex0.createComplex(1426.2286012, (-1691.573953395837));
        double double0 = complex1.getArgument();
        Assert.assertEquals((-0.8703001013938871), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(45.65764624400638, complex0.getReal(), 0.01);
        Assert.assertEquals(45.65764624400638, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.exp();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf(1315.4366447687942, 1315.4366447687942);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1315.4366447687942, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.exp();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.999999989095729, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1.2818329484612675E10), complex2.getImaginary(), 0.01);
        Assert.assertEquals(4.8988409540957E9, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-2617.885749), 3.817173955083142E-32);
        Complex complex1 = complex0.divide((-2617.885749));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(3.817173955083142E-32, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.4581132719566754E-35), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2617.885749), complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex((-5.635173762130303E-9), Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-5.635173762130303E-9), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(7.683303374506067E-5, (-20.0));
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(7.683303374506067E-5, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1008.448);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(1008.448, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.999994745363449), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0));
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.conjugate();
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf(45.65764624400638, 45.65764624400638);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(45.65764624400638, complex1.getReal(), 0.01);
        Assert.assertEquals(45.65764624400638, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(45.65764624400638, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-45.65764624400638), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.divide(4098.878410756728);
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-2.6603060720654166E-12), complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-1.0904271124793968E-8), complex1.getReal(), 0.01);
        Assert.assertEquals((-5.551115123125783E-17), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex(323.714586527438, 1.568413405104933E58);
        Complex complex1 = complex0.asin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.asin();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(4.491247886165094, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        Complex complex1 = complex0.pow(0.0);
        Complex complex2 = complex1.asin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf((-1712.14106384), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1712.14106384), complex0.getReal(), 0.01);
        Assert.assertEquals((-3424.28212768), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.add(complex1);
        Assert.assertEquals((-3.425678490702391E-8), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2.000000399840279, complex2.getReal(), 0.01);
        Assert.assertEquals((-6.851356981404782E-8), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf(305.39, (-2990.8682112440392));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.add(305.39);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(305.39, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1008.448);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(1008.448, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.add(2.0);
        Assert.assertEquals((-18.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf(729.76636);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(7.285871139322426, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        Complex complex1 = complex0.divide(4098.878410756728);
        Complex complex2 = complex1.acos();
        Complex complex3 = complex2.log();
        Assert.assertEquals(0.4515827052911484, complex3.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex(20.0, 2.3416513526430908E-7);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        complex0.nthRoot(2723);
        complex0.nthRoot(2723);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex((-1765.4192590114474), (-2354.61245668602));
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-866.72168572));
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf(387.3711917546, 3864.59);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf(305.39, (-2990.8682112440392));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.negate();
        Complex complex4 = complex3.exp();
        Assert.assertNotSame(complex4, complex2);
        Assert.assertSame(complex4, complex3);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(305.39, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2990.8682112440392), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = Complex.valueOf(3253.80873890346, 3253.80873890346);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3253.80873890346, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3253.80873890346, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf((-1712.14106384), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-1712.14106384), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = Complex.valueOf((-3789.3030825698897));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex1.divide(complex2);
        Assert.assertEquals(0.0, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-18.78985644094231), complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0119363182315487E10);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2.0119363182315487E10, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(0.23633739352226257, 0.0);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.23633739352226257, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        Complex complex1 = complex0.sqrt();
        double double0 = complex1.abs();
        Assert.assertEquals(44.61076103363403, double0, 0.01);
        Assert.assertEquals(44.61076103363403, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        double double0 = complex0.abs();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), (-1.0));
        double double0 = complex0.abs();
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.4142135623730951, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex(2.0, Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex((-479.8635609069017), Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-479.8635609069017), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0904271124793968E-8));
        double double0 = complex0.getArgument();
        Assert.assertEquals(3.141592653589793, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals((-1990.12), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0));
        double double0 = complex0.getReal();
        Assert.assertEquals((-1.0), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex((-4617.261), 20.0);
        Complex complex1 = complex0.cosh();
        List<Complex> list0 = complex1.nthRoot(3529);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4358816851573668E7);
        Complex complex1 = complex0.exp();
        List<Complex> list0 = complex1.nthRoot(228);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals((-1.557407724654902), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf((-3789.3030825698897));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(3789.3030825698897, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3253.8088157364955), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4358816851573668E7);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex((-2351.42110351), 20.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0339901347966377E-18), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2351.42110351), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf((-1990.12));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.multiply(complex1);
        Complex complex3 = complex2.tan();
        Assert.assertEquals((-6252.146371762119), complex2.getReal(), 0.01);
        Assert.assertEquals(1.0, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertEquals((-8.289097334845847), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0119363182315487E10);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(2.0119363182315487E10, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(0.0, (-985.3));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(22.195720308203562, complex1.getReal(), 0.01);
        Assert.assertEquals((-22.19572030820356), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-985.3), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0119363182315487E10);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(2.0119363182315487E10, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex((-4617.261), 20.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide((-1.1124565511436785E-7));
        Complex complex3 = complex2.asin();
        Complex complex4 = complex3.sin();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertSame(complex4, complex3);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply(((double) (3)));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex((-2351.42110351), 20.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.multiply(complex1);
        Complex complex4 = complex3.cosh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertSame(complex4, complex3);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex((-4617.261), 20.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.cos();
        Complex complex3 = complex2.cos();
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0119363182315487E10);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2.0119363182315487E10, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex((-2351.42110351), 20.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.asin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.acos();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = new Complex((-4617.261), 20.0);
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertEquals((-4617.261), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = Complex.valueOf((-985.3), 0.23363645883191295);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex2.subtract(0.23363645883191295);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.23363645883191295, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-985.3), complex0.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf(729.76636);
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(729.76636, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0119363182315487E10);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2.0119363182315487E10, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-1.0));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4358816851573668E7);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.multiply(1.4358816851573668E7);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf(342.08217915, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(37);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(342.08217915, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = new Complex((-2351.42110351), 20.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(1);
        Assert.assertEquals((-2351.42110351), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0119363182315487E10);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(Integer.MAX_VALUE);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2.0119363182315487E10, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.multiply(21);
        Assert.assertEquals((-3253.8088157364955), complex0.getReal(), 0.01);
        Assert.assertEquals((-68329.9851304664), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-68329.9851304664), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        complex0.hashCode();
        Assert.assertEquals((-3253.8088157364955), complex0.getReal(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = new Complex(2926.1449900954567, 2926.1449900954567);
        Complex complex1 = complex0.createComplex(2926.1449900954567, 2926.1449900954567);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(2926.1449900954567, complex1.getReal(), 0.01);
        Assert.assertEquals(2926.1449900954567, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf(2.0119363182315487E10);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.acos();
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4358816851573668E7);
        Complex complex1 = complex0.exp();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf(0.8109631538391113, (-1915.8870826903));
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertEquals((-1915.8870826903), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.8109631538391113, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf((-3789.3030825698897));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3789.3030825698897), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.tan();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = new Complex(5.33839690397E-312, 5.33839690397E-312);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = new Complex(0.0, (-5.806792575852521E10));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(1.7221210968659158E-11, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-5.806792575852521E10), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(1.5366606592920722E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5366606592920722E-4), complex1.getReal(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getReal(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4358816851573668E7);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = new Complex((-740.857));
        Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = new Complex((-740.857));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-740.857), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(0.0);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = new Complex((-740.857));
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-740.857), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide(1436.6376210371998);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = Complex.valueOf(305.39, (-2990.8682112440392));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-2990.8682112440392), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(305.39, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.sinh();
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf(729.76636);
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(729.76636, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf(305.39, (-2990.8682112440392));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.conjugate();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
        Assert.assertEquals((-2990.8682112440392), complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(305.39, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-3253.8088157364955), complex0.getReal(), 0.01);
        Assert.assertEquals(3253.8088157364955, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex1.getReal(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4358816851573668E7);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1.4358816851573668E7, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4358816851573668E7);
        Complex complex1 = complex0.add((-1990.12));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.435682673157367E7, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.add(((double) (-281)));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-1.0), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = new Complex((-4617.261), 20.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.acos();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = new Complex((-4617.261), 20.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.asin();
        Complex complex3 = complex0.add(complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = Complex.valueOf((-1712.14106384), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals((-1712.14106384), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test165() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals("(0.0, 0.0)", string0);
    }

    @Test(timeout = 4000)
    public void test166() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test167() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        complex0.getField();
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3253.8088157364955), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test168() throws Throwable {
        Complex complex0 = new Complex((-3253.8088157364955), (-3253.8088157364955));
        Complex complex1 = complex0.pow(Double.NaN);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals((-3253.8088157364955), complex0.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3253.8088157364955), complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.reciprocal();
        boolean boolean0 = complex2.isNaN();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-1.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-1.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(boolean0)
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.reciprocal();
        Complex complex3 = complex2.log();
        // AssertFixer: old assertion Assert.assertSame(complex3, complex2)
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-1.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-1.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf((-3789.3030825698897));
        Complex complex1 = complex0.pow((-3789.3030825698897));
        Complex complex2 = complex1.reciprocal();
        complex2.hashCode();
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex1.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.0));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.reciprocal();
        double double0 = complex2.abs();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, double0, 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-1.0), complex0.getReal(), 0.01)
        Assert.assertEquals(-1.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }
}

