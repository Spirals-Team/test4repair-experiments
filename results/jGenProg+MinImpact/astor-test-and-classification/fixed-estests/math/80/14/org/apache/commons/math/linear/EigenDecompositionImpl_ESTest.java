/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 13:08:27 GMT 2017
 */


package org.apache.commons.math.linear;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import org.junit.Test;

public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1024.0;
        doubleArray0[1] = 1024.0;
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = 1024.0;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.2599210498948732));
        try {
            eigenDecompositionImpl0.getEigenvector(3575);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // 3575
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1596.19;
        doubleArray0[1] = 1206.800501661735;
        doubleArray0[2] = 2.2250738585072014E-308;
        doubleArray0[3] = 545.2666808264;
        doubleArray0[4] = -2089.394368977046;
        double[] doubleArray1 = new double[7];
        doubleArray1[4] = 545.2666808264;
        doubleArray1[5] = -2089.394368977046;
        doubleArray1[6] = 1.232595164407831E-28;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2089.394368977046));
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[6] = 1594.1297103641625;
        doubleArray0[7] = 1594.1297103641625;
        double[] doubleArray1 = new double[7];
        doubleArray1[6] = 1.232595164407831E-28;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        double[] doubleArray0 = new double[0];
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-3452.85474834145));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // -1
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.3261501537875;
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1594.3261501537875);
        double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
        Assert.assertEquals(1594.3261501537875, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = -2089.394368977046;
        doubleArray0[6] = -860.0;
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        double double0 = eigenDecompositionImpl0.getRealEigenvalue(6);
        Assert.assertEquals((-860.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1594.3261501537875);
        eigenDecompositionImpl0.getImagEigenvalue(1);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.1297103641625;
        doubleArray0[1] = 1594.1297103641625;
        doubleArray0[4] = -2089.394368977046;
        doubleArray0[5] = 1.232595164407831E-28;
        doubleArray0[6] = 1594.1297103641625;
        doubleArray0[7] = 1594.1297103641625;
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 1594.1297103641625;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        double double0 = eigenDecompositionImpl0.getDeterminant();
        Assert.assertEquals(4.226518899160214E-6, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.3261501537875;
        doubleArray0[3] = 545.2666808264;
        doubleArray0[4] = -2089.394368977046;
        doubleArray0[5] = 1.232595164407831E-28;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 1594.3261501537875;
        doubleArray1[6] = 1594.3261501537875;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1594.3261501537875);
        double double0 = eigenDecompositionImpl0.getDeterminant();
        Assert.assertEquals((-1.4465574530838033E-6), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(((double[]) (null)), ((double[]) (null)), 0.9999999999999998);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(((RealMatrix) (null)), 0.0);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1594.263281089076);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getD()));
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-2089.394368977046));
        eigenDecompositionImpl1.getVT();
        Assert.assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = 1595.3406490856407;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 1595.3406490856407;
        doubleArray1[2] = 1595.3406490856407;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1596.369708876828;
        doubleArray0[1] = 1596.369708876828;
        doubleArray0[2] = 1596.369708876828;
        doubleArray0[5] = 1596.369708876828;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1596.369708876828;
        doubleArray1[1] = 1596.369708876828;
        doubleArray1[2] = 1596.369708876828;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1596.369708876828;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1596.369708876828;
        doubleArray1[1] = 1596.369708876828;
        doubleArray1[2] = 1596.369708876828;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 1594.3261501537875;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 0.208202242386567;
        doubleArray1[1] = 0.208202242386567;
        doubleArray1[2] = 1594.3261501537875;
        doubleArray1[3] = 1594.3261501537875;
        doubleArray1[4] = 1594.3261501537875;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.3261501537875;
        doubleArray0[2] = 2541875.873064197;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1.570796326794897;
        doubleArray1[1] = 1594.3261501537875;
        doubleArray1[2] = 545.2666808264;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 1594.3261501537875;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 0.208202242386567;
        doubleArray1[2] = -2083.3215888705427;
        doubleArray1[3] = 1594.3261501537875;
        doubleArray1[4] = 1594.3261501537875;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1597.0506853082893;
        doubleArray0[1] = 1597.0506853082893;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1597.0506853082893;
        doubleArray1[1] = 1597.0506853082893;
        doubleArray1[2] = 1597.0506853082893;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getV()));
        EigenDecompositionImpl eigenDecompositionImpl1 = null;
        try {
            eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-2089.394368977046));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // 
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 1594.3261501537875;
        doubleArray0[4] = -2083.3215888705427;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 0.208202242386567;
        doubleArray1[1] = 1594.3261501537875;
        doubleArray1[2] = 1594.3261501537875;
        doubleArray1[3] = 1594.3261501537875;
        doubleArray1[4] = 1594.3261501537875;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.3261501537875;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1.232595164407831E-28;
        doubleArray1[1] = 2.2250738585072014E-308;
        doubleArray1[2] = 1594.3261501537875;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 1594.3261501537875;
        doubleArray0[4] = -2089.394368977046;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1.232595164407831E-28;
        doubleArray1[1] = 1594.3261501537875;
        doubleArray1[2] = 2.2250738585072014E-308;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 2541895.8420986566;
        doubleArray0[5] = 2541895.8420986566;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 1594.3261501537875;
        doubleArray1[2] = 545.2666808264;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.263281089076;
        doubleArray0[1] = 1594.263281089076;
        doubleArray0[2] = 1594.263281089076;
        doubleArray0[3] = 545.2666808264;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 1594.263281089076;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2089.394368977046));
        Assert.assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.263281089076;
        doubleArray0[1] = 1594.263281089076;
        doubleArray0[2] = 1594.263281089076;
        doubleArray0[3] = 545.2666808264;
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2089.394368977046));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // 
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        try {
            double[] doubleArray0 = new double[8];
            double[] doubleArray1 = new double[7];
            doubleArray1[0] = -854.3414;
            doubleArray1[1] = 2.2250738585072014E-308;
            doubleArray1[2] = 1594.1297103641625;
            EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
            Assert.assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
            org.junit.Assert.fail("Expecting exception: InvalidMatrixException");
        } catch (InvalidMatrixException expectedException__InvalidMatrixException) {
            org.junit.Assert.assertTrue(true);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1595.3406490856407;
        doubleArray0[1] = 1595.3406490856407;
        doubleArray0[5] = 1.232595164407831E-28;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 1595.3406490856407;
        doubleArray1[2] = 1595.3406490856407;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getD()));
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-1159.55));
        Assert.assertEquals((-0.0), eigenDecompositionImpl1.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[4] = -2089.394368977046;
        doubleArray0[6] = -860.0;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 1595.3406490856407;
        doubleArray1[6] = 1.232595164407831E-28;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getD()));
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-1159.55));
        Assert.assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 2.2250738585072014E-308;
        doubleArray1[3] = 2.2250738585072014E-308;
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // cannot solve degree 3 equation
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1.570796326794897;
        doubleArray1[1] = 1594.3261501537875;
        doubleArray1[2] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getV()));
        Assert.assertNotNull(array2DRowRealMatrix0);
        eigenDecompositionImpl0.getSolver();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        double double0 = eigenDecompositionImpl0.getDeterminant();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1594.263281089076);
        eigenDecompositionImpl0.getVT();
        try {
            eigenDecompositionImpl0.getEigenvector(105472366);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // 105472366
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        eigenDecompositionImpl0.getV();
        eigenDecompositionImpl0.getVT();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        eigenDecompositionImpl0.getVT();
        eigenDecompositionImpl0.getVT();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1.2599210498948732));
        eigenDecompositionImpl0.getD();
        eigenDecompositionImpl0.getD();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        eigenDecompositionImpl0.getSolver();
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getV()));
        Assert.assertEquals(8, array2DRowRealMatrix0.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getV()));
        Array2DRowRealMatrix array2DRowRealMatrix1 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getV()));
        Assert.assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.3261501537875;
        doubleArray0[4] = -2089.394368977046;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 1.570796326794897;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getV()));
        EigenDecompositionImpl eigenDecompositionImpl1 = null;
        try {
            eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-2089.394368977046));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // eigen decomposition of assymetric matrices not supported yet
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
        Assert.assertArrayEquals(new double[]{ 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 }, doubleArray2, 0.01);
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        try {
            eigenDecompositionImpl0.getRealEigenvalue(247);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // 247
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        try {
            eigenDecompositionImpl0.getImagEigenvalue((-2931));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // -2931
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        eigenDecompositionImpl0.getImagEigenvalues();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[4] = -2089.394368977046;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 1594.263281089076;
        doubleArray1[4] = 545.2666808264;
        doubleArray1[5] = 1594.263281089076;
        doubleArray1[6] = 1.232595164407831E-28;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1594.263281089076);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getD()));
        // AssertFixer: old assertion Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01)
        Assert.assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-2089.394368977046));
        eigenDecompositionImpl1.getVT();
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, eigenDecompositionImpl1.getDeterminant(), 0.01)
        Assert.assertEquals(-0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1594.1297103641625;
        doubleArray0[6] = 1594.1297103641625;
        doubleArray0[7] = 1594.1297103641625;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = -854.3414;
        doubleArray1[1] = 2.2250738585072014E-308;
        doubleArray1[2] = 1594.1297103641625;
        doubleArray1[3] = 545.2666808264;
        doubleArray1[4] = 545.2666808264;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
        ArrayRealVector arrayRealVector0 = ((ArrayRealVector) (eigenDecompositionImpl0.getEigenvector(2)));
        // AssertFixer: old assertion Assert.assertEquals(3.762680446458874E25, eigenDecompositionImpl0.getDeterminant(), 0.01)
        Assert.assertEquals(-1.4014430327416827E24, eigenDecompositionImpl0.getDeterminant(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(arrayRealVector0.isNaN())
        Assert.assertTrue(arrayRealVector0.isNaN());
    }
}

