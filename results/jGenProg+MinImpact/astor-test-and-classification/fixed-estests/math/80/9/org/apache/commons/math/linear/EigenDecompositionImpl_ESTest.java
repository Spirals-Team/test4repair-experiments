/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 00:16:03 GMT 2017
 */


package org.apache.commons.math.linear;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import org.junit.Test;

public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 13.0;
        doubleArray0[1] = 13.0;
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3590.0));
        Assert.assertEquals(169.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        double[] doubleArray0 = new double[0];
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 1.2599210498948732);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // -1
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 27.0);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getV()));
        EigenDecompositionImpl eigenDecompositionImpl1 = null;
        try {
            eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-75.0));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // 
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 0.4636476090008061;
        doubleArray0[2] = 0.4636476090008061;
        doubleArray0[3] = 27.0;
        doubleArray0[5] = 2290.204006019856;
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        double double0 = eigenDecompositionImpl0.getRealEigenvalue(3);
        Assert.assertEquals(0.4636476090008061, double0, 0.01);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[4] = -1711.0;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 3051.0;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        double double0 = eigenDecompositionImpl0.getRealEigenvalue(6);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
        Assert.assertEquals((-1711.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.4161468365471424));
        eigenDecompositionImpl0.getImagEigenvalue(0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1621.31973);
        ArrayRealVector arrayRealVector0 = ((ArrayRealVector) (eigenDecompositionImpl0.getEigenvector(1)));
        Assert.assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 13.0;
        doubleArray0[1] = 0.7853981633974483;
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.7853981633974483);
        double double0 = eigenDecompositionImpl0.getDeterminant();
        Assert.assertEquals(10.210176124166829, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = 13.0;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.7853981633974483);
        double double0 = eigenDecompositionImpl0.getDeterminant();
        Assert.assertEquals((-169.0), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        try {
            eigenDecompositionImpl0.getRealEigenvalue(11);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // 11
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(((double[]) (null)), ((double[]) (null)), 0.0);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(((RealMatrix) (null)), 0.4636476090008061);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getD()));
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-75.0));
        DecompositionSolver decompositionSolver0 = eigenDecompositionImpl1.getSolver();
        Assert.assertFalse(decompositionSolver0.isNonSingular());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 3051.0;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        eigenDecompositionImpl0.getVT();
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 13.0;
        doubleArray0[1] = 0.7853981633974483;
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.7853981633974483);
        eigenDecompositionImpl0.getVT();
        Assert.assertEquals(10.210176124166829, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = -2260.0;
        doubleArray0[2] = 27.0;
        doubleArray0[5] = 2289.76758731064;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 3051.1801669;
        doubleArray1[1] = 0.4636476090008061;
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 2289.76758731064;
        doubleArray1[4] = 2289.76758731064;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 27.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = -2260.0;
        doubleArray0[2] = -2260.0;
        doubleArray0[4] = 27.0;
        doubleArray0[5] = 1621.31973;
        doubleArray0[6] = 3058.2668417302098;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 3058.2668417302098;
        doubleArray1[1] = -2260.0;
        doubleArray1[2] = -2260.0;
        doubleArray1[3] = 1621.31973;
        doubleArray1[5] = -2260.0;
        doubleArray1[6] = -2260.0;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        Assert.assertEquals(7.00724863437055E26, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[4] = 27.0;
        doubleArray0[5] = 1621.31973;
        doubleArray0[6] = 3058.2668417302098;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 3058.2668417302098;
        doubleArray1[1] = -2260.0;
        doubleArray1[2] = -2260.0;
        doubleArray1[3] = 1621.31973;
        doubleArray1[5] = -2260.0;
        doubleArray1[6] = -2260.0;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        Assert.assertEquals((-1.0681123597222672E25), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 0.4636476090008061;
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 2290.204006019856;
        doubleArray1[4] = 1621.31973;
        doubleArray1[5] = 2290.204006019856;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = 0.4636476090008061;
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 2289.76758731064;
        doubleArray1[4] = 2289.76758731064;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 27.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 0.4636476090008061;
        doubleArray0[2] = 0.4636476090008061;
        doubleArray0[5] = 2290.2;
        doubleArray0[6] = -1711.0;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 0.4636476090008061;
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 2290.2;
        doubleArray1[4] = 1621.31973;
        doubleArray1[5] = -1711.0;
        doubleArray1[6] = 0.4636476090008061;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.NEGATIVE_INFINITY);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // 
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 3051.1801669;
        doubleArray1[1] = 0.4636476090008061;
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 3.6051036931894487E-4;
        doubleArray1[4] = 3.6051036931894487E-4;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 27.0);
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = -2260.0;
        doubleArray0[2] = -2260.0;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 3051.1801669;
        doubleArray1[1] = 0.4636476090008061;
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 2290.204006019856;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[4] = 27.0;
        doubleArray0[5] = 1621.31973;
        doubleArray0[6] = 3058.2668417302098;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = -2260.0;
        doubleArray1[2] = -2260.0;
        doubleArray1[3] = 1621.31973;
        doubleArray1[5] = -2260.0;
        doubleArray1[6] = -2260.0;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[1] = 0.4636476090008061;
        double[] doubleArray1 = new double[7];
        doubleArray1[1] = 0.4636476090008061;
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 0.4636476090008061;
        doubleArray1[4] = 1621.31973;
        doubleArray1[5] = 1621.31973;
        doubleArray1[6] = 0.4636476090008061;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = 0.4636476090008061;
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 0.4636476090008061;
        doubleArray1[4] = 1621.31973;
        doubleArray1[5] = 1621.31973;
        doubleArray1[6] = 0.4636476090008061;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = 0.4636476090008061;
        doubleArray0[5] = 2290.204006019856;
        doubleArray0[6] = 3051.1801669;
        double[] doubleArray1 = new double[7];
        doubleArray1[0] = 3051.1801669;
        doubleArray1[5] = 2290.204006019856;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getD()));
        EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-75.0));
        Assert.assertEquals((-0.0), eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[2] = 1621.31973;
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 4.2655301513150334E-9;
        doubleArray1[3] = 4.2655301513150334E-9;
        EigenDecompositionImpl eigenDecompositionImpl0 = null;
        try {
            eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 27.0);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // cannot solve degree 3 equation
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 4.2655301513150334E-9;
        doubleArray1[3] = 4.2655301513150334E-9;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 27.0);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        eigenDecompositionImpl0.getVT();
        DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
        Assert.assertFalse(decompositionSolver0.isNonSingular());
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.7853981633974483);
        double double0 = eigenDecompositionImpl0.getDeterminant();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.4161468365471424));
        try {
            eigenDecompositionImpl0.getEigenvector(16);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // 16
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.4161468365471424));
        eigenDecompositionImpl0.getV();
        try {
            eigenDecompositionImpl0.getEigenvector(16);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // 16
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-0.4161468365471424));
        eigenDecompositionImpl0.getV();
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getVT()));
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
        Assert.assertNotNull(array2DRowRealMatrix0);
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 13.0);
        eigenDecompositionImpl0.getVT();
        eigenDecompositionImpl0.getVT();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 27.0);
        eigenDecompositionImpl0.getD();
        eigenDecompositionImpl0.getD();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        eigenDecompositionImpl0.getVT();
        eigenDecompositionImpl0.getV();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        eigenDecompositionImpl0.getV();
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getV()));
        Assert.assertEquals(8, array2DRowRealMatrix0.getRowDimension());
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        doubleArray1[0] = 13.0;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.7853981633974483);
        Array2DRowRealMatrix array2DRowRealMatrix0 = ((Array2DRowRealMatrix) (eigenDecompositionImpl0.getVT()));
        EigenDecompositionImpl eigenDecompositionImpl1 = null;
        try {
            eigenDecompositionImpl1 = new EigenDecompositionImpl(((RealMatrix) (array2DRowRealMatrix0)), (-1405.152663927232));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // eigen decomposition of assymetric matrices not supported yet
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
        Assert.assertNotSame(doubleArray2, doubleArray0);
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        eigenDecompositionImpl0.getRealEigenvalue(6);
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        double[] doubleArray0 = new double[2];
        double[] doubleArray1 = new double[1];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3590.0));
        try {
            eigenDecompositionImpl0.getImagEigenvalue(559);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // 559
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        double[] doubleArray0 = new double[8];
        double[] doubleArray1 = new double[7];
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.4636476090008061);
        eigenDecompositionImpl0.getImagEigenvalues();
        Assert.assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = -2260.0;
        doubleArray0[1] = 0.4636476090008061;
        doubleArray0[2] = -2260.0;
        doubleArray0[5] = 2290.204006019856;
        doubleArray0[6] = -1711.0;
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 3051.1801669;
        doubleArray1[4] = 1620.532409312168;
        doubleArray1[5] = 2290.204006019856;
        doubleArray1[6] = 0.4636476090008061;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        eigenDecompositionImpl0.getSolver();
        // AssertFixer: old assertion Assert.assertEquals(4.049417419963444E27, eigenDecompositionImpl0.getDeterminant(), 0.01)
        Assert.assertEquals(1.0854025202051654E16, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = -2260.0;
        doubleArray0[1] = 0.4636476090008061;
        doubleArray0[2] = -2260.0;
        doubleArray0[6] = -1711.0;
        doubleArray0[7] = 3051.1801669;
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 2290.204006019856;
        doubleArray1[4] = 1620.532409312168;
        doubleArray1[5] = 2290.204006019856;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        // AssertFixer: old assertion Assert.assertEquals(5.928952300594424E27, eigenDecompositionImpl0.getDeterminant(), 0.01)
        Assert.assertEquals(1.9877851520647664E23, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = -2260.0;
        doubleArray0[1] = 0.4636476090008061;
        doubleArray0[2] = -2260.0;
        double[] doubleArray1 = new double[7];
        doubleArray1[2] = 0.4636476090008061;
        doubleArray1[3] = 3051.1801669;
        doubleArray1[4] = 1620.532409312168;
        doubleArray1[5] = 2290.204006019856;
        doubleArray1[6] = 0.4636476090008061;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        // AssertFixer: old assertion Assert.assertEquals((-1.1181228301156119E29), eigenDecompositionImpl0.getDeterminant(), 0.01)
        Assert.assertEquals(2.6292334761131573E8, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = -2260.0;
        doubleArray0[1] = 0.4636476090008061;
        doubleArray0[2] = -2260.0;
        doubleArray0[4] = 0.4636476090008061;
        doubleArray0[6] = -1711.0;
        double[] doubleArray1 = new double[7];
        doubleArray0[3] = 2290.204006019856;
        doubleArray1[4] = 1620.532409312168;
        doubleArray1[5] = 2290.204006019856;
        doubleArray1[6] = 0.4636476090008061;
        EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2260.0));
        // AssertFixer: old assertion Assert.assertEquals((-3.1666711706345592E16), eigenDecompositionImpl0.getDeterminant(), 0.01)
        Assert.assertEquals(-2.5294314210405695E15, eigenDecompositionImpl0.getDeterminant(), 0.01);
    }
}

