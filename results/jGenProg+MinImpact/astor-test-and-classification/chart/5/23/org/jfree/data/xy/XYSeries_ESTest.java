/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 12 22:26:37 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import javax.swing.JLayeredPane;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((double) (-9999), (double) 9999, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.add((Number) 9999, (Number) 9999);
      xYSeries0.add((double) 9999, 0.0);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) 12, (Number) 1023);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYDataItem xYDataItem0 = new XYDataItem(486.6163922, (double) 0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add((double) 0, (Number) 59, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      xYSeries0.add((double) 0, (-1435.21));
      xYSeries0.add((Number) 1952801640, (Number) integer0, true);
      xYSeries0.update(1952801640, (Number) null);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "DSkTu4 OaB$b", false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-554), (-554));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYDataItem xYDataItem0 = new XYDataItem(486.6163922, (double) 0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(486.6163922, (Number) 0, false);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double(0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) "DSkTu4 OaB$b", false, false);
      xYSeries0.addOrUpdate((Number) double0, (Number) double0);
      xYSeries0.remove((Number) double0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = new Double((-1.0));
      XYSeries xYSeries0 = new XYSeries((Comparable) "DSkTu4 OaB$b", false, false);
      xYSeries0.addOrUpdate((Number) double0, (Number) double0);
      xYSeries0.remove((Number) double0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9, (Number) 1734438260);
      xYDataItem0.setY(0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      xYSeries0.add(xYDataItem0);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.add(0.0, (-321.0415293898), false);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-321.0415293898), xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      xYSeries0.addOrUpdate(1285.4394926261, 1285.4394926261);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(1285.4394926261, xYDataItem0.getXValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1285.4394926261, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      xYSeries0.add(Double.NaN, (Number) (byte)18, false);
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(0, int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add(0.0, (double) 4);
      xYSeries0.addOrUpdate((Number) 4, (Number) 4);
      int int0 = xYSeries0.indexOf(4);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "caret-end-line");
      xYSeries0.addOrUpdate(0.0, 1.439700122492924);
      assertEquals(1, xYSeries0.getItemCount());
      
      Double double0 = (Double)xYSeries0.getY(0);
      assertEquals(1.439700122492924, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (double) 0);
      xYSeries0.add(xYDataItem0);
      Double double0 = (Double)xYSeries0.getX(0);
      xYSeries0.updateByIndex(0, double0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add(0.0, (double) 4);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.add(0.0, (-321.0415293898), false);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-321.0415293898), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      xYSeries0.add((Number) 4, (Number) integer0, true);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(200.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), 44, 0, 1493, 1493, (-6425));
      Week week0 = new Week((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 1417L);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0, false, false);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1967), (-1967));
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 2);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.addOrUpdate(0.0, (double) (-745));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 1417L);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1967), 893602898);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1363));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double(1.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) "DSkTu4 OaB$b", false, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) double0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultKeyedValues2DDataset0, (-9999), 1019);
      List list0 = slidingCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-3077));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "0gktpfC");
      // Undeclared exception!
      try { 
        xYSeries0.getX((-3536));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-903));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 9223372036854775807L);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1440), (-745));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1335), (-1335));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8);
      xYSeries0.add((Number) 22, (Number) (byte)9, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "caret-end-line");
      xYSeries0.addOrUpdate(0.0, 1.439700122492924);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1913), 1663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      List list0 = defaultKeyedValuesDataset0.getKeys();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      Object[][] objectArray0 = new Object[4][6];
      Object[] objectArray1 = new Object[6];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      java.util.Vector vector0 = defaultTableModel0.getDataVector();
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 9999, (Number) 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, (double) 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 1, (-539.45706762708));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      xYSeries0.add((double) 0, (-1435.21));
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, (double) 1952801640);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9, (Number) 1734438260);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((Number) 9999, (Number) 9999);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 9999, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Week week0 = new Week(0, 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (short) (-21267), (Number) 6, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 7);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((Number) 9999, (Number) 9999, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 9999, (Number) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Year year0 = new Year((-2878));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, (Number) (byte)18, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultKeyedValues2DDataset0, (-9999), 1019);
      List list0 = slidingCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-1.0), 4662.643380056108, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.addOrUpdate((double) 1392409281320L, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1392409281320L, (double) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      xYSeries0.indexOf(integer0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem(486.6163922, (double) 0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((Number) 9999, (Number) 9999);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 9999, (Number) 1);
      xYSeries0.remove((Number) 9999);
      assertEquals(0, xYSeries0.getItemCount());
      
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9, (Number) 1734438260);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      xYSeries0.add(xYDataItem0, true);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9, (Number) 1734438260);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add(0.0, (double) 4);
      xYSeries0.addOrUpdate((Number) 4, (Number) 4);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add(0.0, (double) 4);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-745), 46);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.add((double) (-9999), (double) 9999, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-745), 46);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertTrue(boolean0);
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      boolean boolean0 = xYSeries0.equals(integer0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9, (Number) 1734438260);
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      xYDataItem0.setY((Number) 5);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      XYSeries xYSeries1 = new XYSeries((Comparable) xYDataItem1);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      XYDataItem xYDataItem0 = new XYDataItem(486.6163922, (double) 0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1110589746, true, true);
      xYSeries0.add(954.816607429, (Number) null);
      xYSeries0.toArray();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.update(14, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 14
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      xYSeries0.add((Number) 1952801640, (Number) integer0, true);
      xYSeries0.update(1952801640, (Number) null);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add(0.0, (double) 4);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9, (Number) 1734438260);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 2901);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.delete(1, (-1427));
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Year year0 = new Year((-745));
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      xYSeries0.add((Number) 9999, (Number) 9999);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 9999, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9, (Number) 1734438260);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) 1733843290, (Number) 1684890724);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, false);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      xYSeries0.add((Number) 1952801640, (Number) integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1952801640, (Number) integer0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      xYSeries0.add(1561.459148, 0.0, true);
      int int0 = xYSeries0.indexOf(12);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2379);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "DSkTu4 OaB$b", false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(1.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) "DSkTu4 OaB$b", false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9, (Number) 1734438260);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 2901);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      xYSeries0.getItems();
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true, true);
      xYSeries0.add(1940.092348, (Number) 1, false);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add((-1.0), 4662.643380056108, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      xYSeries0.add(0.0, (double) 4);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }
}
