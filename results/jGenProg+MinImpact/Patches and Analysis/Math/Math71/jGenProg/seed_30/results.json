{
    "date": "Sun Jan 29 12:11:02 CET 2017\n\nremoved classes \n\nzipped \n\ncopied zip \n\n\n",
    "node": "graphene-103.nancy.grid5000.fr",
    "patches": [
        {
            "buggyStatement": "for (int i = 0 ; i < n ; ++i) {\n\ttb += h;\n\tinterpolator.setInterpolatedTime(tb);\n\tfinal double gb = handler.g(tb, interpolator.getInterpolatedState());\n\tif ((g0Positive) ^ (gb >= 0)) {\n\t\tif ((ga * gb) > 0) {\n\t\t\tfinal double epsilon = (forward ? 0.25 : -0.25) * (convergence);\n\t\t\tfor (int k = 0 ; (k < 4) && ((ga * gb) > 0) ; ++k) {\n\t\t\t\tta += epsilon;\n\t\t\t\tinterpolator.setInterpolatedTime(ta);\n\t\t\t\tga = handler.g(ta, interpolator.getInterpolatedState());\n\t\t\t}\n\t\t\tif ((ga * gb) > 0) {\n\t\t\t\tthrow org.apache.commons.math.MathRuntimeException.createInternalError(null);\n\t\t\t} \n\t\t} \n\t\tincreasing = gb >= ga;\n\t\tfinal org.apache.commons.math.analysis.UnivariateRealFunction f = new org.apache.commons.math.analysis.UnivariateRealFunction() {\n\t\t\tpublic double value(final double t) throws org.apache.commons.math.FunctionEvaluationException {\n\t\t\t\ttry {\n\t\t\t\t\tinterpolator.setInterpolatedTime(t);\n\t\t\t\t\treturn handler.g(t, interpolator.getInterpolatedState());\n\t\t\t\t} catch (org.apache.commons.math.ode.DerivativeException e) {\n\t\t\t\t\tthrow new org.apache.commons.math.FunctionEvaluationException(e , t);\n\t\t\t\t} catch (org.apache.commons.math.ode.events.EventException e) {\n\t\t\t\t\tthrow new org.apache.commons.math.FunctionEvaluationException(e , t);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tfinal org.apache.commons.math.analysis.solvers.BrentSolver solver = new org.apache.commons.math.analysis.solvers.BrentSolver();\n\t\tsolver.setAbsoluteAccuracy(convergence);\n\t\tsolver.setMaximalIterationCount(maxIterationCount);\n\t\tfinal double root = ta <= tb ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n\t\tif (((java.lang.Math.abs((root - ta))) <= (convergence)) && ((java.lang.Math.abs((root - (previousEventTime)))) <= (convergence))) {\n\t\t\tta = tb;\n\t\t\tga = gb;\n\t\t} else {\n\t\t\tif ((java.lang.Double.isNaN(previousEventTime)) || ((java.lang.Math.abs(((previousEventTime) - root))) > (convergence))) {\n\t\t\t\tpendingEventTime = root;\n\t\t\t\tif ((pendingEvent) && ((java.lang.Math.abs((t1 - (pendingEventTime)))) <= (convergence))) {\n\t\t\t\t\treturn false;\n\t\t\t\t} \n\t\t\t\tpendingEvent = true;\n\t\t\t\treturn true;\n\t\t\t} \n\t\t}\n\t} else {\n\t\tta = tb;\n\t\tga = gb;\n\t}\n}",
            "generation": 322,
            "ingredients": null,
            "patch": "if ((pendingEvent) && ((java.lang.Math.abs((t1 - (pendingEventTime)))) <= (convergence))) {\n\treturn false;\n} ",
            "patchLocation": {
                "className": "org.apache.commons.math.ode.events.EventState",
                "line": 180
            },
            "patchvalidation": {
                "evoFailingTest": [],
                "numberAllEvosuiteTestGenerated": "22",
                "numberAllTestRegression": "2169",
                "numberEvosuiteFailing": "0",
                "numberInitialFailing": "0"
            },
            "scope": "LOCAL",
            "time": "4919",
            "type": "InsertBeforeOp",
            "variant": 644
        }
    ],
    "timeTotal": "7321"
}