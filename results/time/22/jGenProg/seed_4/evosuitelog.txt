* EvoSuite 1.0.4-SNAPSHOT
* Going to generate test cases for class: org.joda.time.DateTimeZone
* Starting client
* Connecting to master process on port 2765
* Analyzing classpath: 
  - /tmp/time_22_Genprog_local_s1/lib/
  - /tmp/time_22_Genprog_local_s1/lib/junit-4.11.jar
  - /tmp/time_22_Genprog_local_s1/lib/junit-3.8.2.jar
  - /tmp/time_22_Genprog_local_s1/lib/cobertura-2.0.3.jar
  - /tmp/time_22_Genprog_local_s1/lib/joda-convert-1.2.jar
  - /tmp/time_22_Genprog_local_s1/lib/jtestex-0.0.1.jar
  - /tmp/time_22_Genprog_local_s1/lib/fixran-0.0.1.jar
  - /tmp/time_22_Genprog_local_s1/./outputMutation/AstorMain-Time/bin/default/
* Finished analyzing classpath
* Generating tests for class org.joda.time.DateTimeZone
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Setting up search algorithm for whole suite generation
* Total number of test goals: 
  - Line 333
  - Branch 186
  - Exception 0
  - MutationFactory 901
  - Output 95
  - Method 37
  - MethodNoException 37
  - CBranchFitnessFactory 186

[Progress:>                             0%] [Cov:>                                  0%]* Using seed 4
* Starting evolution
[MASTER] 00:10:12.088 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.ref.PhantomReference<T> : Type points to itself
[MASTER] 00:10:12.089 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.ref.SoftReference<T> : Type points to itself
[MASTER] 00:10:12.089 [logback-2] ERROR TestCluster - Failed to check cache for java.lang.ref.WeakReference<T> : Type points to itself

[Progress:>                             0%] [Cov:>                                  2%]
[Progress:>                             0%] [Cov:=>                                 5%]
[Progress:>                             0%] [Cov:=====>                             17%]
[Progress:>                             0%] [Cov:======>                            19%]
[Progress:>                             0%] [Cov:=======>                           20%]
[Progress:>                             0%] [Cov:=======>                           21%]
[Progress:>                             0%] [Cov:========>                          25%]
[Progress:>                             0%] [Cov:=========>                         27%]
[Progress:>                             0%] [Cov:=========>                         28%]
[Progress:>                             0%] [Cov:==========>                        30%]
[Progress:>                             0%] [Cov:==========>                        31%]
[Progress:>                             0%] [Cov:===========>                       32%]
[Progress:>                             0%] [Cov:===========>                       33%]
[Progress:>                             0%] [Cov:============>                      35%]
[Progress:>                             0%] [Cov:============>                      37%]
[Progress:>                             0%] [Cov:=============>                     39%]
[Progress:>                             0%] [Cov:=============>                     39%]
[Progress:>                             0%] [Cov:==========================>        77%]
[Progress:>                             0%] [Cov:==========================>        77%]
[Progress:>                             0%] [Cov:==========================>        77%]
[Progress:>                             0%] [Cov:==========================>        77%]
[Progress:>                             0%] [Cov:==========================>        77%]
[Progress:>                             0%] [Cov:===========================>       78%]
[Progress:>                             0%] [Cov:===========================>       78%]
[Progress:>                             0%] [Cov:===========================>       78%]
[Progress:>                             0%] [Cov:===========================>       78%]
[Progress:>                             0%] [Cov:===========================>       78%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:===========================>       79%]
[Progress:>                             0%] [Cov:============================>      80%]
[Progress:>                             0%] [Cov:============================>      80%]
[Progress:>                             0%] [Cov:============================>      80%]
[Progress:>                             0%] [Cov:============================>      80%]
[Progress:>                             0%] [Cov:============================>      81%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:============================>      82%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     83%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     84%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:=============================>     85%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    86%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:==============================>    87%]
[Progress:>                             0%] [Cov:===============================>   89%]
* Search finished after 103s and 161 generations, 100675 statements, best individual has fitness: 189.07146041271966
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 333
* Number of covered goals: 291
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 186
* Number of covered goals: 153
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 901
* Number of covered goals: 841
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 95
* Number of covered goals: 64
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 37
* Number of covered goals: 37
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 37
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 186
* Number of covered goals: 153
* Generated 95 tests with total length 200
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 59%
* Compiling and checking tests
[MASTER] 00:12:33.044 [logback-2] ERROR ClassStateSupport - Could not initialize org.joda.time.TestDateTimeZone: org/joda/time/TestDateTimeZone$1
[MASTER] 00:12:33.049 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 00:12:33.105 [logback-2] ERROR ClassStateSupport - Could not initialize org.joda.time.TestDateTimeZone: org/joda/time/TestDateTimeZone$2
[MASTER] 00:12:33.473 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:33.474 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[]UTC> but was:<[Etc/]UTC>
[MASTER] 00:12:33.475 [logback-1] WARN  JUnitAnalyzer - Failing test:
 UTCProvider uTCProvider0 = new UTCProvider();
DateTimeZone.setProvider(uTCProvider0);
FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
assertEquals("UTC", fixedDateTimeZone0.getID());


[MASTER] 00:12:33.823 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:33.823 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:33.823 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) null);
assertEquals("Etc/UTC", fixedDateTimeZone0.toString());


[MASTER] 00:12:34.336 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:34.336 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:34.336 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
String string0 = fixedDateTimeZone0.getShortName(477L, (Locale) null);
assertEquals("Etc/UTC", fixedDateTimeZone0.toString());
assertEquals("UTC", string0);


[MASTER] 00:12:34.443 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2073600000> but was:<2070000000>
[MASTER] 00:12:34.443 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:34.444 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("+~zBY;j:{~7kM&");
DateMidnight dateMidnight0 = new DateMidnight(2147483669L);
testDateTimeZone_MockDateTimeZone0.getOffset((ReadableInstant) dateMidnight0);
assertEquals(2073600000L, dateMidnight0.getMillis());


[MASTER] 00:12:34.994 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:34.994 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:34.994 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
fixedDateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 0L);
assertEquals("Etc/UTC", fixedDateTimeZone0.toString());


[MASTER] 00:12:35.035 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:35.036 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:35.036 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockCalendar.getInstance();
LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
assertEquals("Etc/UTC", fixedDateTimeZone0.getID());
assertFalse(boolean0);


[MASTER] 00:12:35.189 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:35.189 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: The datetime zone id 'MET' is not recognised
[MASTER] 00:12:35.189 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID("MET");
long long0 = cachedDateTimeZone0.nextTransition(104767008L);
assertEquals(228877200000L, long0);


[MASTER] 00:12:36.277 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:36.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:36.278 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
fixedDateTimeZone0.isFixed();
assertEquals("Etc/UTC", fixedDateTimeZone0.toString());


[MASTER] 00:12:36.427 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:36.427 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
fixedDateTimeZone0.previousTransition(347L);
assertEquals("Etc/UTC", fixedDateTimeZone0.toString());


[MASTER] 00:12:36.427 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:36.744 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:36.744 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: The datetime zone id 'America/New_York' is not recognised
[MASTER] 00:12:36.745 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("America/New_York");
CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(zoneInfo0);
assertEquals("America/New_York", cachedDateTimeZone0.getID());


[MASTER] 00:12:36.939 [logback-2] ERROR JUnitAnalyzer - 1 test cases failed
[MASTER] 00:12:36.939 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<31533674677> but was:<31530074677>
[MASTER] 00:12:36.940 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockZone mockZone0 = new MockZone(31536000000L, (-2323), (-2323));
long long0 = mockZone0.getMillisKeepLocal((DateTimeZone) null, 31536000000L);
assertEquals(31533674677L, long0);


[MASTER] 00:12:37.266 [logback-2] ERROR JUnitAnalyzer - 5 test cases failed
[MASTER] 00:12:37.266 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test01 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:37.266 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
assertNotNull(fixedDateTimeZone0);

fixedDateTimeZone0.writeReplace();
assertEquals("Etc/UTC", fixedDateTimeZone0.toString());


[MASTER] 00:12:37.267 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test04 -> class java.lang.AssertionError: expected:<567> but was:<1>
[MASTER] 00:12:37.267 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
DateTimeZone.setNameProvider(defaultNameProvider0);

[MASTER] 00:12:37.267 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test09 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:37.267 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("$AcWb_S");
TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)testDateMidnight_Basics_MockInstant0.getZone();
DateTimeZone.setDefault(cachedDateTimeZone0);
assertEquals("Europe/London", cachedDateTimeZone0.getID());


[MASTER] 00:12:37.267 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test08 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:37.267 [logback-1] WARN  JUnitAnalyzer - Failing test:
 UTCProvider uTCProvider0 = new UTCProvider();
DateTimeZone.setProvider(uTCProvider0);
FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
//  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());


[MASTER] 00:12:37.267 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test06 -> class java.lang.ClassCastException: org.joda.time.tz.UTCProvider cannot be cast to org.joda.time.tz.ZoneInfoProvider
[MASTER] 00:12:37.267 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("?_PJon$h");
ZoneInfo zoneInfo0 = (ZoneInfo)testDateTimeZone_MockDateTimeZone0.toTimeZone();
FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone(zoneInfo0);
assertEquals("UTC", fixedDateTimeZone0.getID());


[MASTER] 00:12:37.583 [logback-2] ERROR JUnitAnalyzer - 3 test cases failed
[MASTER] 00:12:37.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test76 -> class java.lang.ClassCastException: org.joda.time.tz.CachedDateTimeZone cannot be cast to org.joda.time.tz.FixedDateTimeZone
[MASTER] 00:12:37.583 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DateTimeZone.forID((String) null);
FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
assertEquals("Etc/UTC", fixedDateTimeZone0.toString());


[MASTER] 00:12:37.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test77 -> class java.lang.ClassCastException: org.joda.time.tz.UTCProvider cannot be cast to org.joda.time.tz.ZoneInfoProvider
[MASTER] 00:12:37.583 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
DateTimeZone.setNameProvider(defaultNameProvider0);

[MASTER] 00:12:37.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test79 -> class java.lang.AssertionError: expected:<567> but was:<1>
[MASTER] 00:12:37.584 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
String string0 = testDateTimeZone_MockDateTimeZone0.getName(41000L);
assertEquals("", string0);


* Writing JUnit test case 'DateTimeZone_ESTest' to evosuite-tests
* Done!


------------