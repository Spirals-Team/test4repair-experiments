/**
 * This file was automatically generated by EvoSuite
 * Sun Feb 12 22:34:36 GMT 2017
 */


package org.jfree.data.time;

import org.junit.Assert;
import java.util.Date;
import org.evosuite.runtime.EvoAssertions;
import javax.swing.JLayeredPane;
import java.util.Locale;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.Test;
import java.util.TimeZone;
import sun.util.calendar.ZoneInfo;

public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 2257, 2257, 0);
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (simpleTimePeriod0)), ((String) (null)), "Null item not allowed.");
        timePeriodValues0.add(((TimePeriod) (simpleTimePeriod0)), ((double) (85)));
        timePeriodValues0.add(((TimePeriod) (simpleTimePeriod0)), ((double) (2257)));
        Assert.assertEquals(0, timePeriodValues0.getMinStartIndex());
        TimePeriodValues timePeriodValues1 = ((TimePeriodValues) (timePeriodValues0.clone()));
        Assert.assertTrue(timePeriodValues1.equals(((Object) (timePeriodValues0))));
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Minute minute0 = new Minute();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (minute0)), "zw", "zw");
        timePeriodValues0.hashCode();
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals("zw", timePeriodValues0.getDomainDescription());
        Assert.assertEquals("zw", timePeriodValues0.getRangeDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        TimePeriodValues timePeriodValues1 = ((TimePeriodValues) (timePeriodValues0.clone()));
        Integer integer0 = JLayeredPane.PALETTE_LAYER;
        timePeriodValues1.add(((TimePeriod) (month0)), ((Number) (integer0)));
        boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
        Assert.assertFalse(timePeriodValues1.equals(((Object) (timePeriodValues0))));
        Assert.assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(90, (-1));
        Second second1 = new Second(((Date) (mockDate0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (second1)), ((Number) (59)));
        timePeriodValues1.add(timePeriodValue0);
        TimePeriodValue timePeriodValue1 = timePeriodValues0.getDataItem(0);
        timePeriodValues1.add(timePeriodValue1);
        // Undeclared exception!
        try {
            timePeriodValues1.clone();
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 2257, 2257, 0);
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (simpleTimePeriod0)), ((String) (null)), "Null item not allowed.");
        timePeriodValues0.add(((TimePeriod) (simpleTimePeriod0)), ((double) (85)));
        timePeriodValues0.update(0, 17);
        Assert.assertEquals(0, timePeriodValues0.getMinStartIndex());
        Assert.assertEquals(0, timePeriodValues0.getMaxStartIndex());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MockDate mockDate0 = new MockDate((-2377), 0, (-2377), 0, (-2377), 37);
        Quarter quarter0 = new Quarter(((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (quarter0)));
        boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertTrue(boolean0);
        Assert.assertEquals("Value", timePeriodValues0.getRangeDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals("Time", timePeriodValues0.getDomainDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 0, 0, 90, 0);
        Second second0 = new Second(((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (59)));
        timePeriodValues0.getValue(0);
        Assert.assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals(0, timePeriodValues0.getMinStartIndex());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (month0)), ((double) (0)));
        timePeriodValues0.add(timePeriodValue0);
        timePeriodValues0.getTimePeriod(0);
        Assert.assertEquals(0, timePeriodValues0.getMinStartIndex());
        Assert.assertEquals(0, timePeriodValues0.getMinMiddleIndex());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, (-2828), (-2828), 0);
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (mockDate0)), ((String) (null)), ((String) (null)));
        String string0 = timePeriodValues0.getRangeDescription();
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertNull(string0);
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Day day0 = new Day();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (day0)));
        String string0 = timePeriodValues0.getRangeDescription();
        Assert.assertEquals("Time", timePeriodValues0.getDomainDescription());
        Assert.assertEquals("Value", string0);
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (1886610801)), "|*I=dDWaZaThF($", "~N:g(r62");
        Month month0 = new Month();
        timePeriodValues0.add(((TimePeriod) (month0)), ((double) (-1)));
        int int0 = timePeriodValues0.getMinStartIndex();
        Assert.assertEquals(0, timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals(0, timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        Second second1 = new Second(((Date) (mockDate0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (second1)), ((Number) (59)));
        timePeriodValues0.add(timePeriodValue0);
        int int0 = timePeriodValues0.getMinStartIndex();
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Minute minute0 = new Minute();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (minute0)));
        timePeriodValues0.add(((TimePeriod) (minute0)), ((double) (0)));
        int int0 = timePeriodValues0.getMinMiddleIndex();
        Assert.assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals(0, timePeriodValues0.getMinStartIndex());
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        Second second1 = new Second(((Date) (mockDate0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (second1)), ((Number) (59)));
        timePeriodValues0.add(timePeriodValue0);
        int int0 = timePeriodValues0.getMinMiddleIndex();
        Assert.assertEquals(1, timePeriodValues0.getMinStartIndex());
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (month0)), ((double) (0)));
        timePeriodValues0.add(timePeriodValue0);
        int int0 = timePeriodValues0.getMinEndIndex();
        Assert.assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        Second second1 = new Second(((Date) (mockDate0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (second1)), ((Number) (59)));
        timePeriodValues0.add(timePeriodValue0);
        int int0 = timePeriodValues0.getMinEndIndex();
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        int int0 = timePeriodValues0.getMaxStartIndex();
        Assert.assertEquals(0, timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals(0, timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Minute minute0 = new Minute();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (minute0)));
        timePeriodValues0.add(((TimePeriod) (minute0)), ((double) (0)));
        int int0 = timePeriodValues0.getMaxMiddleIndex();
        Assert.assertEquals(0, timePeriodValues0.getMinEndIndex());
        Assert.assertEquals(0, timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MockDate mockDate0 = new MockDate();
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getDefault()));
        Locale locale0 = Locale.KOREA;
        Week week0 = new Week(((Date) (mockDate0)), ((TimeZone) (zoneInfo0)), locale0);
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (week0)), "Domain", "");
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (week0)), (-1487.1717));
        timePeriodValues0.add(timePeriodValue0);
        int int0 = timePeriodValues0.getMaxEndIndex();
        Assert.assertEquals(0, timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        timePeriodValues0.getItemCount();
        Assert.assertEquals(0, timePeriodValues0.getMinStartIndex());
        Assert.assertEquals(0, timePeriodValues0.getMinMiddleIndex());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, (-2828), (-2828), 0);
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (simpleTimePeriod0)), ((String) (null)), "Null item not allowed.");
        String string0 = timePeriodValues0.getDomainDescription();
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals("Null item not allowed.", timePeriodValues0.getRangeDescription());
        Assert.assertNull(string0);
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        String string0 = timePeriodValues0.getDomainDescription();
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals("", timePeriodValues0.getRangeDescription());
        Assert.assertEquals("", string0);
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        timePeriodValues0.setNotify(false);
        TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 3359);
        Assert.assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues1.getMaxEndIndex());
        Assert.assertEquals("", timePeriodValues1.getRangeDescription());
        Assert.assertEquals((-1), timePeriodValues1.getMaxStartIndex());
        Assert.assertNotSame(timePeriodValues1, timePeriodValues0);
        Assert.assertEquals((-1), timePeriodValues1.getMinEndIndex());
        Assert.assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues1.getMinStartIndex());
        Assert.assertEquals("", timePeriodValues1.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        Second second1 = new Second(((Date) (mockDate0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (second1)), ((Number) (59)));
        timePeriodValues0.add(timePeriodValue0);
        TimePeriodValue timePeriodValue1 = timePeriodValues0.getDataItem(0);
        timePeriodValues0.add(timePeriodValue1);
        timePeriodValues0.createCopy(90, 0);
        Assert.assertEquals(1, timePeriodValues0.getMinEndIndex());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "SortOrder.ASCENDING", "SortOrder.ASCENDING");
        // Undeclared exception!
        try {
            timePeriodValues0.update(0, 59);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        MockDate mockDate0 = new MockDate();
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getDefault()));
        Locale locale0 = Locale.KOREA;
        Week week0 = new Week(((Date) (mockDate0)), ((TimeZone) (zoneInfo0)), locale0);
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (week0)), "Domain", "");
        // Undeclared exception!
        try {
            timePeriodValues0.getValue((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        MockDate mockDate0 = new MockDate((-2377), 0, (-2377), 0, (-2377), 37);
        Quarter quarter0 = new Quarter(((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (quarter0)));
        // Undeclared exception!
        try {
            timePeriodValues0.getTimePeriod(1896);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1896, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        // Undeclared exception!
        try {
            timePeriodValues0.getDataItem(1);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        // Undeclared exception!
        try {
            timePeriodValues0.getDataItem((-2004));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        Minute minute0 = new Minute();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (minute0)), "-/Dvq", "VT-wD&i<9NjC");
        // Undeclared exception!
        try {
            timePeriodValues0.delete(0, 59);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 2257, 2257, 0);
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (simpleTimePeriod0)), ((String) (null)), "Null item not allowed.");
        // Undeclared exception!
        try {
            timePeriodValues0.delete((-8180), (-1133));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        Month month0 = new Month(6, 53);
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "Invalid day-of-the-week code.", "");
        timePeriodValues0.add(((TimePeriod) (month0)), ((double) (6)));
        // Undeclared exception!
        try {
            timePeriodValues0.createCopy(1, 2378);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Month month0 = new Month(6, 53);
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "Invalid day-of-the-week code.", "");
        timePeriodValues0.add(((TimePeriod) (month0)), ((double) (6)));
        // Undeclared exception!
        try {
            timePeriodValues0.createCopy((-2913), 2378);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Month month0 = new Month(6, 53);
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "Invalid day-of-the-week code.", "");
        // Undeclared exception!
        try {
            timePeriodValues0.add(((TimePeriod) (null)), ((Number) (3)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'period' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.time.TimePeriodValue", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 2257, 2257, 0);
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (simpleTimePeriod0)), ((String) (null)), "Null item not allowed.");
        // Undeclared exception!
        try {
            timePeriodValues0.add(((TimePeriod) (null)), ((double) (182)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'period' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.time.TimePeriodValue", e);
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        TimePeriodValues timePeriodValues0 = null;
        try {
            timePeriodValues0 = new TimePeriodValues(((Comparable) (null)), "jb}-WO%Tg", "j{");
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        TimePeriodValues timePeriodValues0 = null;
        try {
            timePeriodValues0 = new TimePeriodValues(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        Day day0 = new Day();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (day0)));
        String string0 = timePeriodValues0.getDomainDescription();
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals("Time", string0);
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals("Value", timePeriodValues0.getRangeDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        String string0 = timePeriodValues0.getRangeDescription();
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals("", string0);
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals("", timePeriodValues0.getDomainDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.getItemCount();
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals("6", timePeriodValues0.getDomainDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 0, 0, 90, 0);
        Second second0 = new Second(((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        Assert.assertEquals("6", timePeriodValues0.getDomainDescription());
        timePeriodValues0.setDomainDescription(((String) (null)));
        timePeriodValues0.hashCode();
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        TimePeriodValues timePeriodValues1 = ((TimePeriodValues) (timePeriodValues0.clone()));
        Integer integer0 = JLayeredPane.PALETTE_LAYER;
        timePeriodValues0.add(((TimePeriod) (month0)), ((Number) (integer0)));
        timePeriodValues1.add(((TimePeriod) (month0)), ((double) (-2004)));
        boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
        Assert.assertEquals(1, timePeriodValues1.getItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 0, 0, 90, 0);
        Second second0 = new Second(((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (59)));
        TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
        boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
        Assert.assertEquals(1, timePeriodValues0.getItemCount());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        TimePeriodValues timePeriodValues1 = ((TimePeriodValues) (timePeriodValues0.clone()));
        Assert.assertEquals("", timePeriodValues0.getRangeDescription());
        timePeriodValues0.setRangeDescription("Time");
        boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        MockDate mockDate0 = new MockDate((-2377), 0, (-2377), 0, (-2377), 37);
        Quarter quarter0 = new Quarter(((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (quarter0)));
        TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(37, 0);
        Assert.assertTrue(timePeriodValues1.equals(((Object) (timePeriodValues0))));
        timePeriodValues1.setDomainDescription(((String) (null)));
        boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(timePeriodValues1.equals(((Object) (timePeriodValues0))));
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 0, 0, 90, 0);
        Second second0 = new Second(((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "", ((String) (null)));
        TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(90, 59);
        Assert.assertTrue(timePeriodValues1.equals(((Object) (timePeriodValues0))));
        timePeriodValues1.setDescription("");
        boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
        Assert.assertFalse(timePeriodValues1.equals(((Object) (timePeriodValues0))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        Minute minute0 = new Minute();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (minute0)));
        boolean boolean0 = timePeriodValues0.equals("");
        Assert.assertEquals("Value", timePeriodValues0.getRangeDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals("Time", timePeriodValues0.getDomainDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        Month month0 = new Month();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (month0)), "", "");
        TimePeriodValues timePeriodValues1 = ((TimePeriodValues) (timePeriodValues0.clone()));
        Integer integer0 = JLayeredPane.PALETTE_LAYER;
        timePeriodValues1.add(((TimePeriod) (month0)), ((Number) (integer0)));
        boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
        Assert.assertEquals(0, timePeriodValues1.getMaxEndIndex());
        Assert.assertEquals(0, timePeriodValues1.getMaxStartIndex());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        MockDate mockDate0 = new MockDate(0, 0, 2257, 2257, 0);
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (simpleTimePeriod0)), ((String) (null)), "Null item not allowed.");
        timePeriodValues0.add(((TimePeriod) (simpleTimePeriod0)), ((double) (182)));
        timePeriodValues0.delete(182, 0);
        Assert.assertEquals(0, timePeriodValues0.getMinStartIndex());
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 0, 0, 90, 0);
        Second second0 = new Second(((Date) (mockDate0)));
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (59)));
        timePeriodValues0.delete(0, 0);
        Assert.assertEquals(0, timePeriodValues0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(90, (-1));
        Second second1 = new Second(((Date) (mockDate0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (second1)), ((Number) (59)));
        timePeriodValues1.add(timePeriodValue0);
        TimePeriodValue timePeriodValue1 = timePeriodValues0.getDataItem(0);
        timePeriodValues1.add(timePeriodValue1);
        int int0 = timePeriodValues1.getMaxStartIndex();
        Assert.assertEquals(0, timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (64)));
        // Undeclared exception!
        try {
            timePeriodValues0.add(((TimePeriodValue) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null item not allowed.
            // 
            EvoAssertions.verifyException("org.jfree.data.time.TimePeriodValues", e);
        }
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        int int0 = timePeriodValues0.getMinMiddleIndex();
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), int0);
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals("6", timePeriodValues0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        int int0 = timePeriodValues0.getMaxEndIndex();
        Assert.assertEquals((-1), int0);
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals("6", timePeriodValues0.getDomainDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) ("192.168.1.42")));
        // Undeclared exception!
        try {
            timePeriodValues0.getTimePeriod((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        int int0 = timePeriodValues0.getMinStartIndex();
        Assert.assertEquals((-1), int0);
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals("6", timePeriodValues0.getDomainDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        int int0 = timePeriodValues0.getMaxStartIndex();
        Assert.assertEquals("6", timePeriodValues0.getDomainDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), int0);
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        int int0 = timePeriodValues0.getMinEndIndex();
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals((-1), int0);
        Assert.assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals("6", timePeriodValues0.getDomainDescription());
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        Minute minute0 = new Minute();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (minute0)));
        // Undeclared exception!
        try {
            timePeriodValues0.update((-122), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        Minute minute0 = new Minute();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (minute0)), "", "");
        timePeriodValues0.add(((TimePeriod) (minute0)), ((Number) (0)));
        timePeriodValues0.getValue(0);
        Assert.assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
        Assert.assertEquals(0, timePeriodValues0.getMinEndIndex());
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        Minute minute0 = new Minute();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (minute0)), "", "");
        // Undeclared exception!
        try {
            timePeriodValues0.getValue(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        int int0 = timePeriodValues0.getMaxMiddleIndex();
        Assert.assertEquals((-1), timePeriodValues0.getMinEndIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMaxStartIndex());
        Assert.assertEquals("6", timePeriodValues0.getDomainDescription());
        Assert.assertEquals((-1), timePeriodValues0.getMaxEndIndex());
        Assert.assertEquals((-1), int0);
        Assert.assertEquals((-1), timePeriodValues0.getMinStartIndex());
        Assert.assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
        Second second0 = new Second();
        TimePeriodValues timePeriodValues0 = new TimePeriodValues(((Comparable) (second0)), "6", ((String) (null)));
        timePeriodValues0.add(((TimePeriod) (second0)), ((Number) (null)));
        Second second1 = new Second(((Date) (mockDate0)));
        TimePeriodValue timePeriodValue0 = new TimePeriodValue(((TimePeriod) (second1)), ((Number) (59)));
        timePeriodValues0.add(timePeriodValue0);
        TimePeriodValue timePeriodValue1 = timePeriodValues0.getDataItem(0);
        timePeriodValues0.add(timePeriodValue1);
        int int0 = timePeriodValues0.getMaxMiddleIndex();
        Assert.assertEquals(1, timePeriodValues0.getMinEndIndex());
        // AssertFixer: old assertion Assert.assertEquals(2, int0)
        Assert.assertEquals(0, int0);
    }
}

