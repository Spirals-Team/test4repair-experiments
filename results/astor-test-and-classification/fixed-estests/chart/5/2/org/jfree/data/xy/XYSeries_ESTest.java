/**
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 20:51:17 GMT 2017
 */


package org.jfree.data.xy;

import org.junit.Assert;
import org.jfree.data.category.CategoryDataset;
import java.time.Clock;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.jfree.data.time.Day;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.junit.Test;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import java.util.TimeZone;
import org.jfree.data.time.Year;
import org.evosuite.runtime.EvoAssertions;
import org.jfree.data.gantt.TaskSeriesCollection;
import java.util.SimpleTimeZone;
import org.jfree.data.time.Minute;
import org.jfree.data.time.FixedMillisecond;
import java.util.List;
import org.jfree.data.category.SlidingCategoryDataset;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        xYSeries0.addOrUpdate((-964.3693213), 0.0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(((Number) (59)), ((Number) (59)), false);
        xYSeries0.addOrUpdate(0.0, (-964.3693213));
        xYSeries0.hashCode();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        xYSeries0.addOrUpdate((-4339.394218), 0.0);
        xYSeries0.add(((Number) (59)), ((Number) (59)), true);
        xYSeries0.update(59, 1212961568);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        xYSeries0.add(((double) (2702)), ((Number) (4)), true);
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 4);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        xYSeries0.addOrUpdate((-4339.394218), ((double) (0)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(((Number) (59)), ((Number) (59)), true);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.setMaximumItemCount(59);
        Assert.assertEquals(59, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        xYSeries0.addOrUpdate((-4339.394218), 0.0);
        xYSeries0.updateByIndex(0, 59);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        xYSeries0.add(((Number) (0)), ((Number) (0)));
        xYSeries0.remove(((Number) (0)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (59)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.remove(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.add(316.0551492891, 0.0, false);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(316.0551492891, xYDataItem0.getXValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.remove(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.addOrUpdate((-4339.394218), (-2.1050156680471237));
        xYSeries0.add(((Number) (59)), ((Number) (59)), false);
        int int0 = xYSeries0.indexOf(59);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(1, int0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (0)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.getY(0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), (-964.3693213));
        Double double0 = ((Double) (xYSeries0.getY(0)));
        Assert.assertEquals((-964.3693213), ((double) (double0)), 0.01);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        xYSeries0.addOrUpdate(0.0, 2507.373091171725);
        Double double0 = ((Double) (xYSeries0.getY(0)));
        Assert.assertEquals(2507.373091171725, ((double) (double0)), 0.01);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.addOrUpdate((-964.3693213), 0.0);
        Double double0 = ((Double) (xYSeries0.getX(0)));
        Assert.assertEquals((-964.3693213), ((double) (double0)), 0.01);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        xYSeries0.add(((Number) (23)), ((Number) (23)));
        xYSeries0.remove(((Number) (23)));
        xYSeries0.addOrUpdate(3865.2700916502, Double.NaN);
        xYSeries0.addOrUpdate(473.7580060443814, ((double) (0L)));
        xYSeries0.addOrUpdate(0.0, 2507.373091171725);
        Assert.assertEquals(3, xYSeries0.getItemCount());
        Double double0 = ((Double) (xYSeries0.getX(2)));
        Assert.assertEquals(3865.2700916502, ((double) (double0)), 0.01);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        xYSeries0.setMaximumItemCount(0);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.addOrUpdate((-964.3693213), 0.0);
        int int0 = xYSeries0.getItemCount();
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), 519.58247);
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(519.58247, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.add(316.0551492891, 0.0, false);
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(316.0551492891, xYDataItem0.getXValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertFalse(boolean0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.setNotify(false);
        XYSeries xYSeries1 = xYSeries0.createCopy(59, 59);
        Assert.assertFalse(xYSeries1.getAutoSort());
        Assert.assertFalse(xYSeries1.getAllowDuplicateXValues());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.createCopy(59, 59);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.add(316.0551492891, 0.0, false);
        xYSeries0.createCopy(0, 0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((double) (-2704)), ((double) (-2704)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-1961), ((Number) (null)));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((double) (-2704)), ((double) (-2704)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        // Undeclared exception!
        try {
            xYSeries0.update(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-2852));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false, false);
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (0)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        Day day0 = new Day(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        Number[][] numberArray0 = new Number[4][6];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
        List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(0);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.remove((-9999));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.getY((-2090));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        Year year0 = new Year();
        Quarter quarter0 = new Quarter(4, year0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)));
        // Undeclared exception!
        try {
            xYSeries0.getX((-9999));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYSeries xYSeries1 = xYSeries0.createCopy((-838), (-873));
        xYSeries1.data = null;
        // Undeclared exception!
        try {
            xYSeries1.getItemCount();
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-9999));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        // Undeclared exception!
        try {
            xYSeries0.delete((-1254), 2);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.add(316.0551492891, 0.0, false);
        // Undeclared exception!
        try {
            xYSeries0.createCopy(0, 59);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.clear();
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (999)), ((Number) (0)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(((CategoryDataset) (taskSeriesCollection0)), 1, (-9999));
        List list0 = slidingCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate((-1.7976931348623157E308), ((double) (1)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYSeries xYSeries1 = xYSeries0.createCopy((-838), (-873));
        xYSeries1.data = null;
        // Undeclared exception!
        try {
            xYSeries1.addOrUpdate(0.0, 2507.373091171725);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections", e);
        }
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy((-1254), (-193));
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        List list0 = xYSeries0.getItems();
        xYSeries1.data = list0;
        // Undeclared exception!
        try {
            xYSeries1.add(xYDataItem0, false);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((double) (-2704)), ((double) (-2704)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((double) (-2704)), ((double) (-2704)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        Minute minute0 = new Minute();
        Second second0 = new Second(53, minute0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false);
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (0)), ((double) (53)), false);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true, true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.add(((Number) (999)), ((Number) (999)));
        int int0 = xYSeries0.indexOf(999);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.addOrUpdate(((double) (0)), ((double) (999)));
        int int0 = xYSeries0.indexOf(0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
        Assert.assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        // Undeclared exception!
        try {
            xYSeries0.indexOf(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.addOrUpdate(((Number) (59)), ((Number) (0)));
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.addOrUpdate(((Number) (999)), ((Number) (0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((double) (-2704)), ((double) (-2704)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (23)), ((Number) (0)));
        xYSeries0.add(((double) (23)), ((Number) (0)));
        xYSeries0.add(xYDataItem0, true);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(205);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 205, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test64() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        xYSeries0.addOrUpdate((-4339.394218), 0.0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(((Number) (59)), ((Number) (59)), true);
        xYSeries0.hashCode();
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        xYSeries0.addOrUpdate((-4339.394218), 0.0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.hashCode();
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        xYSeries0.addOrUpdate((-4339.394218), 0.0);
        xYSeries0.hashCode();
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.hashCode();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test69() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (instant0)), true, true);
        XYSeries xYSeries1 = xYSeries0.createCopy(14, 14);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test70() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        Date date0 = Date.from(instant0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (instant0)), true, true);
        XYSeries xYSeries1 = new XYSeries(((Comparable) (date0)), false);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries1.getAutoSort());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test71() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        boolean boolean0 = xYSeries0.equals(((Object) (null)));
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(boolean0);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test72() throws Throwable {
        Clock clock0 = MockClock.systemUTC();
        Instant instant0 = MockInstant.now(clock0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (instant0)), true, true);
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test73() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-775L));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.add(((double) (-775L)), 0.0, false);
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-1), 970);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test74() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy((-1254), 0);
        xYSeries1.addOrUpdate((-4339.394218), 0.0);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertEquals(1, xYSeries1.getItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test75() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-4339.394218), ((double) (-1254)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.toArray();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test76() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.add(((Number) (59)), ((Number) (0)));
        xYSeries0.addOrUpdate(((Number) (59)), ((Number) (0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        // Undeclared exception!
        try {
            xYSeries0.update(59, 0);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = 59
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test79() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        xYSeries0.add(((Number) (23)), ((Number) (23)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.update(23, 0);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test80() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        xYSeries0.add(((Number) (0)), ((Number) (0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.clear();
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test81() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.clear();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test82() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.delete((-574), (-2351));
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test83() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.add(((Number) (59)), ((Number) (0)));
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test84() throws Throwable {
        MockDate mockDate0 = new MockDate((-2196), (-2196), (-2522), (-2522), 1447);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2522), "");
        Year year0 = new Year(((Date) (mockDate0)), ((TimeZone) (simpleTimeZone0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (9999)), ((double) (59)));
        xYSeries0.add(xYDataItem0, true);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test85() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test86() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-775L));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test87() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (23)));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test89() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), true);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(0, 59);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test90() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        // Undeclared exception!
        try {
            xYSeries0.getX(2);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 2, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test91() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        // Undeclared exception!
        try {
            xYSeries0.getY(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test92() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        xYSeries0.add(((double) (2702)), ((Number) (1)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.setMaximumItemCount(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test93() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test94() throws Throwable {
        Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
        Date date0 = Date.from(instant0);
        Hour hour0 = new Hour(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.add((-1.0), 0.0, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (59)));
        xYSeries0.add(xYDataItem0);
        {
            xYSeries0.addOrUpdate(((Number) (0)), ((Number) (minute0.FIRST_MINUTE_IN_HOUR)));
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        xYSeries0.add(((Number) (0)), ((Number) (0)));
        {
            xYSeries0.addOrUpdate(0.0, 0.0);
        }
    }
}

