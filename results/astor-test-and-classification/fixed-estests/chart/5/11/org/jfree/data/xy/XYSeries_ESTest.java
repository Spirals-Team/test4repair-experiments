/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 21:45:54 GMT 2017
 */


package org.jfree.data.xy;

import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.junit.Assert;
import java.util.Date;
import org.jfree.data.time.Day;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Week;
import java.util.List;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.evosuite.runtime.EvoAssertions;
import org.jfree.data.time.Second;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.TimeSeries;
import javax.swing.SpinnerNumberModel;
import org.jfree.data.time.Year;
import org.junit.Test;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.gantt.GanttCategoryDataset;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        XYDataItem xYDataItem0 = new XYDataItem(((double) (1)), ((double) (1)));
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.add(((Number) (4)), ((Number) (1)), false);
        xYSeries0.addOrUpdate(((Number) (4)), ((Number) (1)));
        xYSeries0.hashCode();
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.addOrUpdate(((Number) (1)), ((Number) (4)));
        Assert.assertEquals(1, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        // Undeclared exception!
        try {
            xYSeries0.update(9999, (-9999));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = 9999
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        xYSeries0.addOrUpdate(((Number) (1)), ((Number) (4)));
        xYSeries0.update(1, 1);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        // Undeclared exception!
        try {
            xYSeries0.delete(1, 1);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        xYSeries0.add(0.0, ((double) (1)), true);
        // Undeclared exception!
        try {
            xYSeries0.delete(1, 121);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.add(((Number) (0)), ((Number) (0)), true);
        xYSeries0.addOrUpdate(((Number) (999)), ((Number) (999)));
        xYSeries0.add(((Number) (999)), ((Number) (999)));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        xYSeries0.remove(((Number) (-9999)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.addOrUpdate(((double) (0)), ((double) (59)));
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (0)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.add(((Number) (59)), ((Number) (0)));
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (59)));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        xYSeries0.add(0.0, (-178.0219152));
        xYSeries0.add(0.0, ((Number) (53)), true);
        XYDataItem xYDataItem0 = xYSeries0.remove(1);
        Assert.assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals(53.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        xYSeries0.add(0.0, ((Number) (53)), true);
        xYSeries0.add(((double) (53)), 1.0, true);
        XYDataItem xYDataItem0 = xYSeries0.remove(1);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(53.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        xYSeries0.add(((Number) (1)), ((Number) (0)), true);
        xYSeries0.addOrUpdate(((double) (60)), 189.31207949);
        int int0 = xYSeries0.indexOf(60);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(1, int0);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(0, 0, 0, (-2246));
        Comparable comparable0 = spinnerNumberModel0.getMinimum();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), true, false);
        xYSeries0.addOrUpdate(((Number) (16)), ((Number) (0)));
        Integer integer0 = ((Integer) (xYSeries0.getY(0)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(0, ((int) (integer0)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (-9999)), ((Number) (9999)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.getY(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (23)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.getX(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true);
        xYSeries0.add(((double) (0)), 1.5, true);
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(1.5, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        XYDataItem xYDataItem0 = new XYDataItem(((double) (1)), ((double) (1)));
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.getDataItem(1);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), true, true);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.getAllowDuplicateXValues();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.setNotify(false);
        XYSeries xYSeries1 = xYSeries0.createCopy(9999, 9999);
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), true, true);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.createCopy(59, 0);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (23)));
        xYDataItem0.setY(((Number) (0)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (23)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)), true, false);
        xYSeries0.addOrUpdate(((double) (80)), ((double) (80)));
        xYSeries0.addOrUpdate(((Number) (80)), ((Number) (0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(0, 0, 0, (-2246));
        Comparable comparable0 = spinnerNumberModel0.getMinimum();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), true, false);
        xYSeries0.addOrUpdate(((Number) (16)), ((Number) (16)));
        xYSeries0.addOrUpdate(((double) (16)), 3205.55);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(43, (-9999));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 43, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        Object[][] objectArray0 = new Object[2][9];
        List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.toArray();
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-3683));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-3683));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        Second second0 = new Second();
        Millisecond millisecond0 = new Millisecond(2, second0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove((-1444));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(9999);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 9999, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 3112);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.getY((-312));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        // Undeclared exception!
        try {
            xYSeries0.getX((-3683));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-1772));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-38));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        Week week0 = new Week((-550), (-2262));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)));
        DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
        List list0 = defaultCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 2627);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.createCopy(9999, 9999);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        XYSeries xYSeries1 = xYSeries0.createCopy(9999, 9999);
        DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
        List list0 = defaultKeyedValuesDataset0.getKeys();
        xYSeries1.data = list0;
        try {
            xYSeries1.clone();
            Assert.fail("Expecting exception: CloneNotSupportedException");
        } catch (CloneNotSupportedException e) {
            // 
            // Failed to clone.
            // 
            EvoAssertions.verifyException("org.jfree.chart.util.ObjectUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        List list0 = defaultKeyedValues2DDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) ((byte) (13))));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(((TimeSeries) (null)));
        List list0 = timeSeriesCollection0.getSeries();
        xYSeries0.data = list0;
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (23)));
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(887.066967299324, 887.066967299324);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(((GanttCategoryDataset) (taskSeriesCollection0)), 4, 1137);
        List list0 = slidingGanttCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (4)), ((Number) (10)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        List list0 = defaultKeyedValues2DDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (-9999)), ((Number) (-9999)), false);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add((-1.0), 1124.700173626221, false);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)), true, false);
        xYSeries0.add(((double) (0)), 1.0, true);
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (0)), (-1.0));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 3112);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        List list0 = defaultKeyedValues2DDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(0.0, ((double) (-1)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), false, true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.addOrUpdate(((Number) (1)), ((Number) (4)));
        xYSeries0.indexOf(1);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        int int0 = xYSeries0.indexOf(1);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        xYSeries0.setMaximumItemCount(1);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (1)), ((double) (4)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("After")), false, false);
        xYSeries0.addOrUpdate((-620.4), (-620.4));
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-620.4), (-620.4));
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, true);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        Hour hour0 = new Hour();
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (23)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.add(xYDataItem0, true);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (1)), ((double) (4)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.getX(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        MockDate mockDate0 = new MockDate((-2345), (-2345), (-2345));
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false, true);
        // Undeclared exception!
        try {
            xYSeries0.remove((-1325));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test64() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        XYDataItem xYDataItem0 = new XYDataItem(((double) (1)), ((double) (1)));
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(0, 0, 0, (-2246));
        Comparable comparable0 = spinnerNumberModel0.getMinimum();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), true, false);
        xYSeries0.hashCode();
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        XYSeries xYSeries1 = xYSeries0.createCopy(9999, 9999);
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        Object[][] objectArray0 = new Object[2][7];
        List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
        xYSeries0.data = list0;
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test69() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        XYSeries xYSeries1 = xYSeries0.createCopy(9999, 9999);
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        xYSeries1.setDescription("");
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertFalse(xYSeries1.equals(((Object) (xYSeries0))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test70() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        XYSeries xYSeries1 = xYSeries0.createCopy(9999, 9999);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertNotSame(xYSeries1, xYSeries0);
    }

    @Test(timeout = 4000)
    public void test71() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test72() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        boolean boolean0 = xYSeries0.equals(((Object) (null)));
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test73() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.addOrUpdate(((double) (59)), 0.0);
        xYSeries0.createCopy(0, 0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test74() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        xYSeries0.addOrUpdate(((double) (0)), ((double) (59)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-1), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test75() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        XYSeries xYSeries1 = xYSeries0.createCopy((-2), (-2));
        xYSeries1.data = null;
        // Undeclared exception!
        try {
            xYSeries1.getItemCount();
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test76() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.addOrUpdate(((Number) (1)), ((Number) (4)));
        Assert.assertEquals(1, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false, true);
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.addOrUpdate(((Number) (1)), ((Number) (4)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.update(1, 1);
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test79() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 3112);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (999)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.clear();
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test80() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.clear();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test81() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        // Undeclared exception!
        try {
            xYSeries0.delete((-3683), 121);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test82() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.delete(4, 1);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test83() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (23)));
        xYSeries0.add(xYDataItem0);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (0)), ((Number) (23)));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test84() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 3112);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (999)));
        xYSeries0.add(3010.09698117648, ((Number) (999)), true);
        xYSeries0.add(0.0, (-656.894599199));
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test85() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), true, false);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (23)));
        xYSeries0.add(xYDataItem0);
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test86() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        XYDataItem xYDataItem0 = new XYDataItem(((double) (1)), ((double) (4)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(2, xYSeries0.getItemCount());
        Double double0 = ((Double) (xYSeries0.getX(1)));
        Assert.assertEquals(1.0, ((double) (double0)), 0.01);
    }

    @Test(timeout = 4000)
    public void test87() throws Throwable {
        SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(0, 0, 0, (-2246));
        Comparable comparable0 = spinnerNumberModel0.getMinimum();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), true, false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        xYSeries0.add((-1.0124996574371499), ((double) (1)), true);
        xYSeries0.setMaximumItemCount(1);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test89() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test90() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test91() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (-9999)));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test92() throws Throwable {
        Week week0 = new Week((-73), (-73));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-73), 53);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test93() throws Throwable {
        SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(0, 0, 0, (-2246));
        Comparable comparable0 = spinnerNumberModel0.getMinimum();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), true, false);
        // Undeclared exception!
        try {
            xYSeries0.getY(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test94() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.add(((double) (-9999)), ((Number) (-9999)), false);
        // Undeclared exception!
        try {
            xYSeries0.createCopy(9999, 9999);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 9999, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test95() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        xYSeries0.toArray();
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test96() throws Throwable {
        Second second0 = new Second();
        Millisecond millisecond0 = new Millisecond(2, second0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertEquals(Integer.MAX_VALUE, int0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test97() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.add(((double) (1)), ((Number) (4)));
        {
            xYSeries0.addOrUpdate(((Number) (1)), ((Number) (4)));
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        Object[][] objectArray0 = new Object[2][7];
        List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
        xYSeries0.data = list0;
        {
            xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        MockDate mockDate0 = new MockDate((-1), (-1), 3112);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (999)));
        {
            xYSeries0.addOrUpdate(Double.NaN, ((double) (-1)));
        }
    }
}

