/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 10:24:35 GMT 2017
 */


package org.jfree.data.xy;

import org.junit.Assert;
import java.util.Date;
import org.junit.Test;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoAssertions;
import org.jfree.data.time.FixedMillisecond;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Second;
import java.util.List;
import java.util.Vector;
import org.jfree.data.time.Year;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.TimeSeriesDataItem;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        xYSeries0.add(6030.996438349566, 6030.996438349566, true);
        xYSeries0.add(((double) (-9999)), 6030.996438349566, true);
        xYSeries0.add(((Number) (9999)), ((Number) (9999)), true);
        xYSeries0.addOrUpdate(0.5, 0.5);
        xYSeries0.hashCode();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.add(0.0, ((double) (-9999)));
        xYSeries0.add(((Number) (9999)), ((Number) (9999)));
        xYSeries0.addOrUpdate(((Number) (9999)), ((Number) (-9999)));
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        xYSeries0.add(Double.NaN, ((Number) (-9999)));
        xYSeries0.update(9999, (-9999));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        xYSeries0.add(((Number) (9999)), ((Number) (9999)), true);
        xYSeries0.addOrUpdate(0.5, 0.5);
        xYSeries0.add(Double.NaN, ((Number) (-9999)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.add(0.0, ((double) (-9999)));
        XYDataItem xYDataItem0 = new XYDataItem(0.0, ((double) (-9999)));
        xYSeries0.add(xYDataItem0, true);
        Assert.assertEquals(2, xYSeries0.getItemCount());
        xYSeries0.updateByIndex(1, 9999);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        double[][] doubleArray0 = new double[2][2];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        Comparable comparable0 = defaultIntervalCategoryDataset0.getColumnKey(0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), false);
        xYSeries0.addOrUpdate(0.0, 3350.162);
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (0.0)));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(3350.162, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        xYSeries0.add(((Number) (9999)), ((Number) (9999)), true);
        xYSeries0.remove(((Number) (9999)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        xYSeries0.remove(((Number) (-9999)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(((double) (1263)), ((Number) (-1)), false);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(((double) (1263)), ((Number) (0)), false);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.add(0.0, ((double) (-9999)));
        xYSeries0.add(((Number) (9999)), ((Number) (9999)));
        int int0 = xYSeries0.indexOf(9999);
        Assert.assertEquals(2, xYSeries0.getItemCount());
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        xYSeries0.add(0.0, ((Number) (0)));
        Integer integer0 = ((Integer) (xYSeries0.getY(0)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(0, ((int) (integer0)));
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        xYSeries0.getY(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        double[][] doubleArray0 = new double[2][2];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        Comparable comparable0 = defaultIntervalCategoryDataset0.getColumnKey(0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), false);
        xYSeries0.addOrUpdate(((Number) (0.0)), ((Number) (30.0)));
        Double double0 = ((Double) (xYSeries0.getX(0)));
        Assert.assertEquals(0.0, ((double) (double0)), 0.01);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true, true);
        xYSeries0.addOrUpdate(((Number) (18)), ((Number) (-1)));
        Integer integer0 = ((Integer) (xYSeries0.getX(0)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(18, ((int) (integer0)));
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        xYSeries0.add(0.0, ((double) (-9999)));
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals((-9999.0), xYDataItem0.getYValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        MockDate mockDate0 = new MockDate(1992, 1992, 1992);
        Hour hour0 = new Hour(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), true, false);
        xYSeries0.addOrUpdate(159.077, ((double) (1992)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        double[][] doubleArray0 = new double[2][2];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        Comparable comparable0 = defaultIntervalCategoryDataset0.getColumnKey(0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (comparable0)), false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MockDate mockDate0 = new MockDate((-3), (-1150), (-1670), 8, 87, 320);
        OHLCDataItem oHLCDataItem0 = new OHLCDataItem(((Date) (mockDate0)), 0.0, ((double) (8)), ((double) (-1670)), ((double) (8)), (-1.7976931348623157E308));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (oHLCDataItem0)), true, false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.createCopy((-1360), 4601);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("XXX")), true, false);
        XYSeries xYSeries1 = xYSeries0.createCopy(1455, 1455);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertFalse(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (0)), false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(0, 1986618743);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.update(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        Year year0 = new Year(((Date) (mockDate0)));
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), ((double) (-9999)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)), true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.remove((-7));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false);
        // Undeclared exception!
        try {
            xYSeries0.remove((-2412));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.indexOf(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("page-up")), false, false);
        // Undeclared exception!
        try {
            xYSeries0.getY((-3578));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-750.352));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        // Undeclared exception!
        try {
            xYSeries0.getX((-1525));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        MockDate mockDate0 = new MockDate(274, 0, 274);
        Year year0 = new Year(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-5));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        // Undeclared exception!
        try {
            xYSeries0.delete((-9999), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy(0, 9999);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), (-0.27498693228798377));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-9999), (-9999));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(0.0, 1408.8323);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections", e);
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("y")), true);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("y")), true);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy(1263, 1263);
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
        xYSeries1.data = list0;
        // Undeclared exception!
        try {
            xYSeries1.add(((double) (1263)), ((Number) (0)), true);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true, false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.add(((Number) (9999)), ((Number) (9999)));
        int int0 = xYSeries0.indexOf(9999);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(0, int0);
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.add(0.0, ((double) (-9999)));
        int int0 = xYSeries0.indexOf(9999);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-1), int0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (999)));
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        xYSeries0.add(0.0, ((double) (-9999)));
        XYDataItem xYDataItem0 = new XYDataItem(0.0, ((double) (-9999)));
        xYSeries0.add(xYDataItem0, true);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        xYSeries0.add(0.0, ((double) (-9999)));
        xYSeries0.delete(0, 0);
        XYDataItem xYDataItem0 = new XYDataItem(0.0, ((double) (-9999)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (23)), ((Number) (23)));
        xYSeries0.add(xYDataItem0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(727);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 727, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        Minute minute0 = new Minute();
        Second second0 = new Second((-485), minute0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (second0)), Double.NaN);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (0)), false);
        xYSeries0.hashCode();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        xYSeries0.add(6030.996438349566, 6030.996438349566, true);
        xYSeries0.add(((Number) (9999)), ((Number) (9999)), true);
        xYSeries0.hashCode();
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true, false);
        xYSeries0.hashCode();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy(1263, 1263);
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        xYSeries0.add(((double) (1263)), ((Number) (0)));
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy(1263, 1263);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        MockDate mockDate0 = ((MockDate) (fixedMillisecond0.getStart()));
        boolean boolean0 = xYSeries0.equals(mockDate0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy(1263, 1263);
        xYSeries0.setMaximumItemCount(1487);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertEquals(1487, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        xYSeries0.toArray();
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false);
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test64() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.update(((byte) (20)), 0);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = 20
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.clear();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.delete(3016, 3016);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 3016, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.add(((Number) (0)), ((Number) (999)), false);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("page-up")), false, false);
        xYSeries0.add((-605.768745307647), 0.8);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test69() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true);
        xYSeries0.add(0.0, ((double) (-9999)));
        XYDataItem xYDataItem0 = new XYDataItem(0.0, ((double) (-9999)));
        xYSeries0.add(2.0, (-110.395), true);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test70() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test71() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        xYSeries0.add(0.0, ((Number) (0)));
        xYSeries0.setMaximumItemCount(0);
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test72() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-882));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test73() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test74() throws Throwable {
        Minute minute0 = new Minute();
        Second second0 = new Second((-485), minute0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (second0)), Double.NaN);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test75() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4912L));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false);
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) ((byte) (19))));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test76() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4912L));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false);
        xYSeries0.addOrUpdate(((Number) (2)), ((Number) (8)));
        xYSeries0.createCopy(0, 0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Minute minute0 = new Minute();
        Second second0 = new Second((-485), minute0);
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (second0)), Double.NaN);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-2793), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)));
        // Undeclared exception!
        try {
            xYSeries0.getX(121);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 121, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test79() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.getY(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test80() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.getItems();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test81() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(((double) (1263)), ((Number) (0)), false);
        Assert.assertEquals(1, xYSeries0.getItemCount());
        Long long0 = new Long(((long) (1263)));
        xYSeries0.update(long0, long0);
        xYSeries0.remove(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test82() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertEquals(Integer.MAX_VALUE, int0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test83() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        List list0 = xYSeries0.getItems();
        xYSeries1.data = list0;
        // Undeclared exception!
        try {
            xYSeries1.add(Double.NaN, ((Number) (-9999)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test84() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.add(0.0, ((double) (-9999)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.clear();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        Object[] objectArray0 = new Object[4];
        DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 9999);
        Vector vector0 = defaultTableModel0.getDataVector();
        xYSeries0.data = ((List) (vector0));
        {
            xYSeries0.addOrUpdate(((Number) (0)), ((Number) (-9999)));
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        Year year0 = new Year();
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (year0)), 0.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)));
        xYSeries0.addOrUpdate(((Number) (-9999)), ((Number) (-9999)));
        {
            xYSeries0.addOrUpdate(Double.NaN, ((double) (-9999)));
        }
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("y")), true);
        xYSeries0.add(((double) (1024)), ((Number) (-5908509288197150436L)));
        {
            xYSeries0.addOrUpdate(((Number) (1024)), ((Number) (1835360627)));
        }
    }
}

