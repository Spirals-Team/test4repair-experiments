/**
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 20:47:08 GMT 2017
 */


package org.jfree.data.xy;

import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.junit.Assert;
import java.util.Date;
import org.jfree.data.time.Day;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Hour;
import java.util.List;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Year;
import org.jfree.data.time.TimeSeriesDataItem;
import javax.swing.table.DefaultTableModel;
import org.jfree.data.time.Week;
import org.jfree.data.time.Month;
import sun.util.calendar.ZoneInfo;
import org.jfree.data.time.RegularTimePeriod;
import org.evosuite.runtime.EvoAssertions;
import org.jfree.data.time.FixedMillisecond;
import javax.swing.JLayeredPane;
import org.jfree.data.time.TimeSeriesCollection;
import java.util.Vector;
import org.junit.Test;
import org.jfree.data.time.Minute;
import java.util.TimeZone;
import org.jfree.data.time.SimpleTimePeriod;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.add(((double) (2946L)), ((Number) (16)), false);
        xYSeries0.add(((double) (2946L)), ((double) (2946L)), false);
        xYSeries0.add(((double) (2946L)), ((Number) (0)));
        xYSeries0.addOrUpdate(((Number) (16)), ((Number) (256)));
        xYSeries0.hashCode();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.add(((double) (2946L)), ((double) (2946L)), false);
        xYSeries0.add(((double) (2946L)), ((Number) (0)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy(1, 256);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 2, Size: 2
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(((double) (1392409281320L)), ((Number) (1)));
        xYSeries0.setMaximumItemCount(2);
        xYSeries0.addOrUpdate(((double) (1)), ((double) (-483)));
        Assert.assertEquals(2, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.add(((double) (1)), (-34.39853562513), false);
        xYSeries0.addOrUpdate(((double) (1)), (-4720.618));
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1986618743)), ((Number) (1986618743)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true, true);
        xYSeries0.add(((Number) (1)), ((Number) (1835955314)));
        Short short0 = Short.valueOf(((short) ((byte) (14))));
        xYSeries0.addOrUpdate(((Number) (short0)), ((Number) (short0)));
        xYSeries0.update(short0, short0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.addOrUpdate(((Number) (16)), ((Number) (256)));
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 256);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        xYSeries0.add(Double.NaN, ((double) (-9999)), true);
        xYSeries0.add((-1188.722), ((Number) (-9999)));
        xYSeries0.add(0.0, ((Number) (-9999)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(((Number) (1)), ((Number) ((byte) (12))), true);
        xYSeries0.add((-1416.0), 0.0);
        xYSeries0.add(((Number) (1)), ((Number) (1)), false);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.add(((double) (2946L)), ((Number) (16)), false);
        xYSeries0.updateByIndex(0, 8);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        MockDate mockDate0 = new MockDate(1618, 1618, (-18), 1878, (-18), (-1371));
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false, false);
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        xYSeries0.add(((Number) (integer0)), ((Number) (integer0)));
        xYSeries0.remove(((Number) (integer0)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        MockDate mockDate0 = new MockDate(335, 335, (-120));
        Minute minute0 = new Minute(((Date) (mockDate0)));
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (minute0)), ((double) (59)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)), true, true);
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        xYSeries0.remove(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, false);
        xYSeries0.add(((double) (2946L)), ((double) (2946L)), false);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2946.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(2946.0, xYDataItem0.getXValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        xYSeries0.add((-244.14805106893), (-946.895), false);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertEquals((-946.895), xYDataItem0.getYValue(), 0.01);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals((-244.14805106893), xYDataItem0.getXValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(Double.NaN, ((Number) (53)), true);
        xYSeries0.add(((double) (352)), 0.0);
        Assert.assertEquals(2, xYSeries0.getItemCount());
        Double double0 = ((Double) (xYSeries0.getY(1)));
        Assert.assertEquals(0.0, ((double) (double0)), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.addOrUpdate(((Number) (16)), ((Number) (256)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        Integer integer0 = ((Integer) (xYSeries0.getY(0)));
        Assert.assertEquals(256, ((int) (integer0)));
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        xYSeries0.add((-244.14805106893), (-946.895), false);
        Double double0 = ((Double) (xYSeries0.getY(0)));
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals((-946.895), ((double) (double0)), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.setMaximumItemCount(0);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        MockDate mockDate0 = new MockDate(1618, 1618, (-18), 1878, (-18), (-1371));
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false, false);
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        xYSeries0.add(((Number) (integer0)), ((Number) (integer0)));
        xYSeries0.getItemCount();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.add(((double) (2946L)), ((double) (2946L)), false);
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2946.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals(2946.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.add(((double) (2946L)), ((Number) (0)));
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2946.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        xYSeries0.add((-244.14805106893), (-946.895), false);
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-946.895), xYDataItem0.getYValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals((-244.14805106893), xYDataItem0.getXValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true, false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (13)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.getAllowDuplicateXValues();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.setNotify(false);
        XYSeries xYSeries1 = xYSeries0.createCopy((-20), 0);
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertFalse(xYSeries1.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false, false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.createCopy((-125), 0);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, false);
        xYSeries0.add(((double) (2946L)), ((double) (2946L)), false);
        xYSeries0.createCopy(0, 0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, false);
        XYSeries xYSeries1 = xYSeries0.createCopy((-748), (-748));
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        MockDate mockDate0 = new MockDate(1618, 1618, (-18), 1878, (-18), (-1371));
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false, false);
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        xYSeries0.add(((Number) (integer0)), ((Number) (integer0)));
        xYSeries0.addOrUpdate(((Number) (integer0)), ((Number) (integer0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (13)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.add(((double) (0)), ((Number) (1)), true);
        xYSeries0.addOrUpdate(((double) (0)), (-4720.618));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        Object[][] objectArray0 = new Object[3][0];
        Object[] objectArray1 = new Object[2];
        DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
        Vector vector0 = defaultTableModel0.getDataVector();
        xYSeries0.data = ((List) (vector0));
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(1, 4);
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // java.util.Vector cannot be cast to org.jfree.data.xy.XYDataItem
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("Default")), false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-1685), 5);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        MockDate mockDate0 = new MockDate();
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.update(((Number) (null)), 1618);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("Last")));
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-2445));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("icon")));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getDefault()));
        TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(((TimeZone) (zoneInfo0)));
        List list0 = timeSeriesCollection0.getSeries();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(4);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.remove((-9999));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.indexOf(999);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (0)), true);
        // Undeclared exception!
        try {
            xYSeries0.indexOf(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        // Undeclared exception!
        try {
            xYSeries0.getY((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Year year0 = new Year(1035);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        // Undeclared exception!
        try {
            xYSeries0.getX(9999);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 9999, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-742));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (24)));
        DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
        List list0 = defaultKeyedValuesDataset0.getKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.delete((-6), (-6));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.delete((-483), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(((double) (1392409281320L)), ((Number) (1)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-742), 17);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("notify-field-accept")), false, false);
        double[][] doubleArray0 = new double[9][2];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        try {
            xYSeries0.clone();
            Assert.fail("Expecting exception: CloneNotSupportedException");
        } catch (CloneNotSupportedException e) {
            // 
            // Failed to clone.
            // 
            EvoAssertions.verifyException("org.jfree.chart.util.ObjectUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, false);
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        List list0 = xYSeriesCollection0.getSeries();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (999)), ((Number) (999)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        List list0 = defaultKeyedValues2DDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((double) (1)), ((double) (-483)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((double) (999)), (-996.667));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        DefaultTableModel defaultTableModel0 = new DefaultTableModel(31, 29);
        Vector vector0 = defaultTableModel0.getDataVector();
        xYSeries0.data = ((List) (vector0));
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(3731.0812114, ((double) (0)));
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.add(xYDataItem0, true);
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (0)), false);
        XYSeries xYSeries1 = xYSeries0.createCopy((-1), (-1));
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
        xYSeries1.data = list0;
        XYDataItem xYDataItem0 = new XYDataItem(((Number) ((short) (5))), ((Number) (null)));
        // Undeclared exception!
        try {
            xYSeries1.add(xYDataItem0);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, false);
        xYSeries0.add(((double) (999)), ((Number) (0)));
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (999)), ((Number) (999)), true);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.add(((double) (1)), (-34.39853562513), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (1)), ((Number) (1)), true);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (999)), ((Number) (999)), false);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections", e);
        }
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, false);
        xYSeries0.add(((double) (-748)), ((Number) ((byte) (6))), false);
        // Undeclared exception!
        try {
            xYSeries0.add(Double.NaN, ((Number) (null)));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (2946L)), ((Number) (0)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add((-244.14805106893), (-946.895), false);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), false, false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.add(xYDataItem0, true);
        xYSeries0.indexOf(1);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("copy-to-clipboard")), false);
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
        List list0 = xYSeriesCollection0.getSeries();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.indexOf(1145261138);
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.indexOf(999);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        int int0 = xYSeries0.indexOf(999);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(Double.NaN, ((Number) (53)), false);
        xYSeries0.setMaximumItemCount(1);
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (53)));
        xYSeries0.add(0.0, ((Number) (53)), false);
        xYSeries0.add(xYDataItem0, true);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.add(xYDataItem0, true);
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.add(xYDataItem0, false);
        int int0 = xYSeries0.indexOf(6);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (53)), ((Number) (53)));
        xYSeries0.add(xYDataItem0, true);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false);
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        xYSeries0.add(xYDataItem0, true);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        // Undeclared exception!
        try {
            xYSeries0.getX((-1609));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        // Undeclared exception!
        try {
            xYSeries0.remove(6560);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 6560, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.add(((double) (2946L)), ((double) (2946L)), false);
        xYSeries0.addOrUpdate(((Number) (16)), ((Number) (256)));
        xYSeries0.hashCode();
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.hashCode();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2946L);
        XYSeries xYSeries1 = new XYSeries(((Comparable) (fixedMillisecond0)), false, false);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        XYSeries xYSeries1 = xYSeries0.createCopy(6560, 0);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(xYSeries1.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries1 = new XYSeries(((Comparable) (fixedMillisecond0)), false, false);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        MockDate mockDate0 = new MockDate(335, 335, (-120));
        Minute minute0 = new Minute(((Date) (mockDate0)));
        TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(((RegularTimePeriod) (minute0)), ((double) (59)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (timeSeriesDataItem0)), true, true);
        boolean boolean0 = xYSeries0.equals(minute0);
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        XYSeries xYSeries1 = xYSeries0.createCopy(6560, (-9999));
        xYSeries1.setMaximumItemCount(2447);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertEquals(2447, xYSeries1.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        xYSeries0.add((-244.14805106893), (-946.895), false);
        XYSeries xYSeries1 = xYSeries0.createCopy(6560, 0);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertEquals(1, xYSeries0.getItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.addOrUpdate(((Number) (23)), ((Number) (23)));
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, false);
        xYSeries0.add(((Number) (999)), ((Number) (999)), true);
        xYSeries0.addOrUpdate(((Number) (999)), ((Number) (999)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        MockDate mockDate0 = new MockDate(1618, 1618, (-18), 1878, (-18), 1618);
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false, false);
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        // Undeclared exception!
        try {
            xYSeries0.update(integer0, 1);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = 0
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        MockDate mockDate0 = new MockDate(1618, 1618, (-18), 1878, (-18), (-1371));
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(((Date) (mockDate0)), ((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false, false);
        Integer integer0 = JLayeredPane.DEFAULT_LAYER;
        xYSeries0.add(((Number) (integer0)), ((Number) (integer0)));
        xYSeries0.update(integer0, 1);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.add(((double) (23)), ((Number) (23)));
        xYSeries0.clear();
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.delete(0, (-483));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, false);
        xYSeries0.addOrUpdate(((double) (2946L)), 0.0);
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (2946L)), ((double) (2946L)), false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        xYSeries0.add((-1188.722), ((Number) (-9999)));
        xYSeries0.add(0.0, ((Number) (-9999)));
        xYSeries0.add((-1188.722), ((Number) (1178815570)));
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, false);
        xYSeries0.add(((Number) (999)), ((Number) (999)), true);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (999)), ((Number) (999)));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-513L), (-513L));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)));
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(boolean0);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (352)));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        xYSeries0.add(xYDataItem0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(0, 8);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Day day0 = new Day();
        Hour hour0 = new Hour(6560, day0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, true);
        // Undeclared exception!
        try {
            xYSeries0.getY(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(Double.NaN, ((Number) (53)), true);
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.remove(((Number) (352)));
        xYSeries0.clear();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2946L, 2946L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), false);
        xYSeries0.add(((double) (2946L)), ((double) (2946L)), false);
        xYSeries0.toArray();
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(((double) (53)), ((Number) (1)));
        xYSeries0.add(Double.NaN, ((Number) (53)), true);
        xYSeries0.setMaximumItemCount(1);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false, false);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(Integer.MAX_VALUE, int0);
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(Double.NaN, ((Number) (53)), false);
        {
            xYSeries0.addOrUpdate(((double) (1)), ((double) (-483)));
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        MockDate mockDate0 = new MockDate(29, 29, 29);
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.add(((Number) (999)), ((Number) (999)), true);
        {
            xYSeries0.addOrUpdate(((Number) (999)), ((Number) (999)));
        }
    }
}

