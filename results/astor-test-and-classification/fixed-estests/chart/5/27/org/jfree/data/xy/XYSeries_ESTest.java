/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 14:54:34 GMT 2017
 */


package org.jfree.data.xy;

import org.junit.Assert;
import org.jfree.data.category.CategoryDataset;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.SlidingCategoryDataset;
import java.util.Date;
import org.jfree.data.time.Day;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import java.util.Locale;
import org.jfree.data.statistics.SimpleHistogramBin;
import sun.util.calendar.ZoneInfo;
import org.jfree.data.time.Week;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.time.Year;
import java.util.TimeZone;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.junit.Test;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.evosuite.runtime.EvoAssertions;
import javax.swing.JLayeredPane;
import org.jfree.data.time.Second;
import org.jfree.data.time.Quarter;
import java.util.List;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.data.time.FixedMillisecond;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.add(((double) (2558)), ((Number) (2)), false);
        xYSeries0.add(((double) (0)), ((double) (0)));
        xYSeries0.addOrUpdate(((double) (-14)), ((double) (0)));
        xYSeries0.add((-2187.8667286904124), ((Number) ((byte) (27))));
        xYSeries0.hashCode();
        Assert.assertEquals(4, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.addOrUpdate(((double) (36)), ((double) (1)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false, false);
        xYSeries0.add(((Number) (1)), ((Number) (1)));
        xYSeries0.update(1, 1);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false, false);
        xYSeries0.add(((Number) (4)), ((Number) (1)));
        xYSeries0.add(((Number) (1)), ((Number) (1)));
        xYSeries0.update(1, 1);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.add(((double) (0)), ((double) (0)));
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 2558);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, true);
        xYSeries0.add(((Number) (0)), ((Number) (0)));
        xYSeries0.add(40.075905635, 40.075905635);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (2)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(((double) (-724)), ((Number) (893602898)), false);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ((byte) (0))), false, false);
        xYSeries0.add(((double) ((byte) (0))), ((Number) ((byte) (0))));
        xYSeries0.updateByIndex(((byte) (0)), ((byte) (2)));
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(27.755837158329662, 27.755837158329662);
        // Undeclared exception!
        try {
            xYSeries0.createCopy(0, 999);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(40.075905635, (-1660.215965377));
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertEquals((-1660.215965377), xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(40.075905635, xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(40.075905635, 40.075905635);
        xYSeries0.delete(0, 0);
        xYSeries0.addOrUpdate(((double) (0)), 40.075905635);
        xYSeries0.remove(0);
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(((double) (-9L)), ((Number) (0)), true);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertEquals((-9.0), xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Second second0 = new Second();
        Millisecond millisecond0 = new Millisecond(863, second0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.addOrUpdate(((Number) (59)), ((Number) (999)));
        int int0 = xYSeries0.indexOf(59);
        Assert.assertEquals(0, int0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.add(((double) (0)), ((double) (0)));
        xYSeries0.getY(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Second second0 = new Second();
        Millisecond millisecond0 = new Millisecond(863, second0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.addOrUpdate(((Number) (59)), ((Number) (999)));
        Integer integer0 = ((Integer) (xYSeries0.getY(0)));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(999, ((int) (integer0)));
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, false);
        xYSeries0.addOrUpdate(((double) (-14)), ((double) (0)));
        Double double0 = ((Double) (xYSeries0.getX(0)));
        Assert.assertEquals((-14.0), ((double) (double0)), 0.01);
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (double0)));
        Assert.assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.addOrUpdate(((double) (-14)), ((double) (0)));
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        MockDate mockDate0 = new MockDate((-1421L));
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.add(((double) (0)), ((Number) (999)));
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false, false);
        xYSeries0.setNotify(false);
        XYSeries xYSeries1 = xYSeries0.createCopy(4, 1);
        Assert.assertFalse(xYSeries1.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertFalse(xYSeries1.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.createCopy(0, (-724));
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Second second0 = new Second(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)));
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-459), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true);
        // Undeclared exception!
        try {
            xYSeries0.update(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        Year year0 = new Year((-2561));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        Number[][] numberArray0 = new Number[9][2];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
        List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove((-2561));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        Object[][] objectArray0 = new Object[8][2];
        List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(1);
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.remove((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.indexOf(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        Second second0 = new Second();
        Millisecond millisecond0 = new Millisecond(863, second0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.getY((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        // Undeclared exception!
        try {
            xYSeries0.getX(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        Week week0 = new Week((-1685), 23);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-577));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 0);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 0);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.delete((-881), 36);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(40.075905635, (-1660.215965377));
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-881), 305);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.clone();
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'collection' argument.
            // 
            EvoAssertions.verifyException("org.jfree.chart.util.ObjectUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        Locale locale0 = new Locale("_ya~!9!");
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
        Date date0 = mockGregorianCalendar0.getGregorianChange();
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
        xYSeries0.data = list0;
        try {
            xYSeries0.clone();
            Assert.fail("Expecting exception: CloneNotSupportedException");
        } catch (CloneNotSupportedException e) {
            // 
            // Failed to clone.
            // 
            EvoAssertions.verifyException("org.jfree.chart.util.ObjectUtilities", e);
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-2953.5), 966.0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleHistogramBin0)), false);
        XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
        List list0 = xYSeriesCollection0.getSeries();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (1952801640)), ((Number) (8)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("X-value already exists.")), false, false);
        Number[][] numberArray0 = new Number[6][9];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
        SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(((CategoryDataset) (defaultIntervalCategoryDataset0)), 1, 6);
        List list0 = slidingCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (1178815570)), ((Number) (5)));
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((double) (1)), (-1.0));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
        Day day0 = new Day(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), true, true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(0.0, 0.0);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)));
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (6)), ((Number) (null)), false);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (14)));
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (14)));
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (4)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
        List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(40.1, (-1660.215965377));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true, true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(40.075905635, 40.075905635);
        int int0 = xYSeries0.indexOf(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-1), int0);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false, false);
        xYSeries0.add(((Number) (1)), ((Number) (1)));
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(((Number) (1)), ((Number) (1)));
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, true);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (2)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("")), false);
        XYDataItem xYDataItem0 = new XYDataItem(0.0, Double.POSITIVE_INFINITY);
        xYSeries0.add(xYDataItem0, true);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (1)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false, false);
        xYSeries0.add(((Number) (4)), ((Number) (4)), false);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        // Undeclared exception!
        try {
            xYSeries0.getX((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("@4 V.hqPG.")));
        // Undeclared exception!
        try {
            xYSeries0.getY(3222);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 3222, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        MockDate mockDate0 = new MockDate((-1421L));
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true, false);
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test64() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.add(((double) (2558)), ((Number) (2)), false);
        xYSeries0.add(((double) (0)), ((double) (0)));
        xYSeries0.hashCode();
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.add(((double) (2558)), ((Number) (2)), false);
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true, false);
        xYSeries0.hashCode();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy(53, 36);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        boolean boolean0 = xYSeries0.equals(((Object) (null)));
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test69() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test70() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(1892.8808048726, (-1660.215965377));
        // Undeclared exception!
        try {
            xYSeries0.createCopy(999, 999);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 999, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test71() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.add(((double) (2558)), ((Number) (2)), false);
        xYSeries0.createCopy(0, (-14));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test72() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.add(xYDataItem0);
        xYSeries0.addOrUpdate(((Number) (13)), ((Number) (1.0F)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test73() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.addOrUpdate(((double) (-14)), ((double) (0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.getDataItem(0);
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test75() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (0)));
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test76() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("")), false);
        // Undeclared exception!
        try {
            xYSeries0.update(2, 8);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = 2
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Week week0 = new Week(1121, 29);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)));
        xYSeries0.add(((double) (53)), 1088.2, false);
        xYSeries0.clear();
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false, false);
        xYSeries0.add(((Number) (1)), ((Number) (1)));
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (1)), ((Number) (4)));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test79() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(40.075905635, 40.075905635);
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(40.075905635, xYDataItem0.getYValue(), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(40.075905635, xYDataItem0.getXValue(), 0.01);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test80() throws Throwable {
        SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 2.0, false, false);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleHistogramBin0)));
        xYSeries0.add(0.0, ((Number) (1)), false);
        XYDataItem xYDataItem0 = new XYDataItem((-3458.3), 2.0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test81() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true, false);
        xYSeries0.add(((Number) (1)), ((Number) (1)));
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(((Number) (1)), ((Number) (1)));
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, true);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test82() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (0)), ((Number) (1129142560)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.add(xYDataItem0);
        xYSeries0.setMaximumItemCount(0);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test83() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-5366));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test84() throws Throwable {
        MockDate mockDate0 = new MockDate();
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone("")));
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)), ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test85() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ("")), false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(boolean0);
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test86() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) ((byte) (-1))));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test87() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Second second0 = new Second(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)));
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(0, 0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        XYSeries xYSeries1 = xYSeries0.createCopy(53, 36);
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        Object[][] objectArray0 = new Object[8][2];
        List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
        xYSeries0.data = list0;
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test89() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.addOrUpdate(((double) (36)), ((double) (1)));
        xYSeries0.toArray();
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test90() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        xYSeries0.getItems();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test91() throws Throwable {
        Week week0 = new Week(1121, 29);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)));
        xYSeries0.add(((double) (53)), 1088.2, false);
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (53)));
        Assert.assertEquals(1088.2, xYDataItem0.getYValue(), 0.01);
        xYSeries0.clear();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test92() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false, false);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(Integer.MAX_VALUE, int0);
    }

    @Test(timeout = 4000)
    public void test93() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (36)), ((Number) (1)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(xYSeries1.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test94() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false, true);
        xYSeries0.add(((double) (0)), ((double) (0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.getX(0);
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Week week0 = new Week(1121, 29);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)));
        xYSeries0.add(((double) (53)), 1088.2, false);
        xYSeries0.addOrUpdate(((Number) (1)), ((Number) (1)));
        {
            xYSeries0.addOrUpdate(((double) (53)), 1407.354310886043);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        Integer integer0 = JLayeredPane.PALETTE_LAYER;
        xYSeries0.add(((double) (1835360627)), ((Number) (integer0)));
        {
            xYSeries0.addOrUpdate(((double) (1835360627)), ((double) (0L)));
        }
    }

    @Test(timeout = 4000)
    public void test74() throws Throwable {
        Second second0 = new Second();
        Millisecond millisecond0 = new Millisecond(863, second0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.addOrUpdate(((Number) (59)), ((Number) (999)));
        {
            xYSeries0.addOrUpdate(((Number) (59)), ((Number) (0)));
        }
    }
}

