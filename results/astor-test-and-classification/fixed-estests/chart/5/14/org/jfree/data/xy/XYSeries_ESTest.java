/**
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 01:55:30 GMT 2017
 */


package org.jfree.data.xy;

import org.jfree.data.time.Hour;
import org.jfree.data.time.Day;
import org.junit.Assert;
import java.util.Date;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.Minute;
import org.evosuite.runtime.mock.java.time.MockInstant;
import java.time.ZoneOffset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.junit.Test;
import java.util.List;
import org.jfree.data.time.Week;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Quarter;
import org.evosuite.runtime.EvoAssertions;
import org.jfree.data.time.Millisecond;
import sun.util.calendar.ZoneInfo;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.SimpleTimePeriod;
import java.util.SimpleTimeZone;
import org.jfree.data.time.Year;
import java.util.TimeZone;
import java.util.Vector;
import java.time.Instant;
import org.jfree.data.time.Second;
import java.time.ZoneId;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Month;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        xYSeries0.addOrUpdate(((Number) (59)), ((Number) (0)));
        xYSeries0.add(0.0, 1.5, false);
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy(1, 2);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 2, Size: 2
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.addOrUpdate(((Number) (11)), ((Number) (4)));
        Assert.assertEquals(1, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.add((-1.176582711240986), 1.5, false);
        Double double0 = new Double((-1.176582711240986));
        xYSeries0.update(double0, 0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        // Undeclared exception!
        try {
            xYSeries0.delete(3499, 3499);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 3499, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MockDate mockDate0 = new MockDate(1649, 1649, 1649);
        Hour hour0 = new Hour(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), false, false);
        xYSeries0.add(((Number) (23)), ((Number) (4)));
        // Undeclared exception!
        try {
            xYSeries0.delete(0, 29);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.updateByIndex(0, 0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        Double double0 = ((Double) (xYSeries0.getX(0)));
        xYSeries0.addOrUpdate(0.0, ((double) (-3435)));
        xYSeries0.remove(((Number) (double0)));
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        XYDataItem xYDataItem0 = xYSeries0.remove(0);
        Assert.assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.remove(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        int int0 = xYSeries0.indexOf(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.getY(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        xYSeries0.addOrUpdate(0.0, ((double) (-3435)));
        Double double0 = ((Double) (xYSeries0.getY(0)));
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-3435.0), ((double) (double0)), 0.01);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (-3435)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.getX(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        xYSeries0.addOrUpdate(((Number) (59)), ((Number) (0)));
        xYSeries0.remove(((Number) (0)));
        Integer integer0 = ((Integer) (xYSeries0.getX(0)));
        Assert.assertEquals(59, ((int) (integer0)));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.setMaximumItemCount(0);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Week week0 = new Week((-7), (-7));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(((double) (-7)), ((Number) (1)));
        xYSeries0.add(((Number) (1)), ((Number) (1)));
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (1)));
        xYDataItem0.setY((-1884.369));
        xYSeries0.add(xYDataItem0, true);
        Assert.assertEquals(2, xYSeries0.getItemCount());
        xYSeries0.getDataItem(1);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
        Assert.assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, true);
        Double double0 = ((Double) (xYSeries0.getX(0)));
        xYSeries0.add(((double) (-3435)), ((Number) (double0)), true);
        xYSeries0.getDataItem(0);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Week week0 = new Week((-7), (-7));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, false);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(337);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)));
        xYSeries0.setNotify(false);
        XYSeries xYSeries1 = xYSeries0.createCopy(92, 1);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertNotSame(xYSeries1, xYSeries0);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.createCopy(0, 0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        Double double0 = ((Double) (xYSeries0.getX(0)));
        xYSeries0.addOrUpdate(0.0, ((double) (-3435)));
        xYSeries0.addOrUpdate(((Number) (double0)), ((Number) (double0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        xYSeries0.add(2195.07, ((double) (-3435)));
        Double double0 = ((Double) (xYSeries0.getX(0)));
        xYSeries0.add(0.0, ((Number) (double0)), false);
        xYSeries0.addOrUpdate(0.0, ((double) (-3435)));
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        Year year0 = new Year((-1705));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(2789, (-9999));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 2789, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) ((byte) (0))));
        // Undeclared exception!
        try {
            xYSeries0.update(((Number) (null)), ((byte) (41)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount(3518);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        Week week0 = new Week((-7), (-7));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, false);
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-3256));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (0)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3080);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), true, false);
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)));
        // Undeclared exception!
        try {
            xYSeries0.remove((-17));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (mockDate0)));
        Object[][] objectArray0 = new Object[22][0];
        DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[1]);
        Vector vector0 = defaultTableModel0.getDataVector();
        xYSeries0.data = ((List) (vector0));
        // Undeclared exception!
        try {
            xYSeries0.indexOf(59);
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1800688195)), ((Number) ((short) (-21267))));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, true);
        // Undeclared exception!
        try {
            xYSeries0.getY(((short) (-21267)));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), false);
        // Undeclared exception!
        try {
            xYSeries0.getX(25);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 25, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        MockDate mockDate0 = new MockDate(2534, 1615, 2534, 2534, (-3791), 2534);
        SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1615, "");
        Year year0 = new Year(((Date) (mockDate0)), ((TimeZone) (simpleTimeZone0)));
        Week week0 = new Week(1615, year0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.getX((-9999));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        Week week0 = new Week((-7), (-7));
        MockDate mockDate0 = ((MockDate) (week0.getStart()));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (mockDate0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-7));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true, true);
        xYSeries0.addOrUpdate(((Number) (9999)), ((Number) (-9999)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-9999), 428);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1800688195)), ((Number) ((short) (-21267))));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), false, false);
        DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
        defaultCategoryDataset0.addValue(((Number) (12)), ((Comparable) (xYDataItem0)), ((Comparable) (xYDataItem0)));
        List list0 = defaultCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.clear();
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)));
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (59)), ((Number) (59)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        MockDate mockDate0 = new MockDate();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (mockDate0)), true);
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(0.0, ((double) (9999)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        Week week0 = new Week((-7), (-7));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, false);
        xYSeries0.add(((double) (1)), ((Number) (1)));
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (1)), ((Number) (1)));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        Double double0 = ((Double) (xYSeries0.getX(0)));
        // Undeclared exception!
        try {
            xYSeries0.add(0.0, ((Number) (double0)), false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        MockDate mockDate0 = new MockDate(0L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (mockDate0)));
        Object[][] objectArray0 = new Object[22][0];
        DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[1]);
        Vector vector0 = defaultTableModel0.getDataVector();
        xYSeries0.data = ((List) (vector0));
        // Undeclared exception!
        try {
            xYSeries0.add(2.0, ((Number) (0)), false);
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        Week week0 = new Week((-7), (-7));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, false);
        xYSeries0.add(((Number) (53)), ((Number) (53)));
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (53)), ((Number) (week0.FIRST_WEEK_IN_YEAR)));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        Week week0 = new Week((-7), (-7));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (53)), ((Number) (53)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true, false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        int int0 = xYSeries0.indexOf(0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertEquals((-1), int0);
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 53L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleTimePeriod0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.indexOf(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        Double double0 = ((Double) (xYSeries0.getX(0)));
        xYSeries0.indexOf(double0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        Double double0 = ((Double) (xYSeries0.getX(0)));
        xYSeries0.addOrUpdate(((Number) (double0)), ((Number) (double0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) (0)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, true);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        Week week0 = new Week(29, 29);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)));
        xYSeries0.add(((Number) (53)), ((Number) (53)), true);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        // Undeclared exception!
        try {
            xYSeries0.getY(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.remove(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test64() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false, false);
        xYSeries0.hashCode();
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true, true);
        xYSeries0.hashCode();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        xYSeries0.hashCode();
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYSeries xYSeries1 = xYSeries0.createCopy(0, (-3435));
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        XYDataItem xYDataItem0 = new XYDataItem(((double) (-3435)), ((double) (0)));
        xYSeries1.add(xYDataItem0, false);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2346L);
        FixedMillisecond fixedMillisecond1 = ((FixedMillisecond) (fixedMillisecond0.next()));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond1)), true);
        XYSeries xYSeries1 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(boolean0);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test69() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        XYSeries xYSeries1 = xYSeries0.createCopy(0, (-3435));
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test70() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test71() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        boolean boolean0 = xYSeries0.equals(date0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test72() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.add(((Number) (4)), ((Number) (4)));
        xYSeries0.addOrUpdate(((Number) (11)), ((Number) (4)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test74() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-1695.6580131), (-3445.07887852337));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)), true);
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test75() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        // Undeclared exception!
        try {
            xYSeries0.update(4, 4);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = 4
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test76() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        Double double0 = ((Double) (xYSeries0.getX(0)));
        Assert.assertEquals(0.0, ((double) (double0)), 0.01);
        xYSeries0.update(double0, 0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.clear();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        // Undeclared exception!
        try {
            xYSeries0.delete((-9999), 3499);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test79() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.delete(29, (-38));
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test80() throws Throwable {
        Quarter quarter0 = new Quarter();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (quarter0)), false);
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.add(((Number) (4)), ((Number) (4)));
        xYSeries0.add(((double) (1392409281320L)), (-11.490672019780769));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test81() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test82() throws Throwable {
        Week week0 = new Week((-7), (-7));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(((Number) (53)), ((Number) (53)));
        xYSeries0.add(((Number) (1)), ((Number) (1)));
        xYSeries0.add(((double) (1)), ((Number) (53)));
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test83() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, false);
        xYSeries0.add(0.0, ((Number) (999)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(0.0, 0.0, false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test84() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test85() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false);
        xYSeries0.add(((double) (0)), ((double) (59)));
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        xYSeries0.setMaximumItemCount(1);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test86() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertFalse(boolean0);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test87() throws Throwable {
        Week week0 = new Week((-7), (-7));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test89() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-296), 1093812784);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test90() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, false);
        xYSeries0.toArray();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test91() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        xYSeries0.add(234.2, ((double) (328)), true);
        Assert.assertEquals(1, xYSeries0.getItemCount());
        Double double0 = ((Double) (xYSeries0.getY(0)));
        Assert.assertEquals(328.0, ((double) (double0)), 0.01);
    }

    @Test(timeout = 4000)
    public void test92() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), true, false);
        xYSeries0.add((-2.147483648E9), ((Number) (999)));
        xYSeries0.add(0.0, ((Number) (999)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(0.0, 0.0, false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test93() throws Throwable {
        Day day0 = new Day();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (day0)));
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(Integer.MAX_VALUE, int0);
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test94() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertFalse(xYSeries1.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertFalse(xYSeries1.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test95() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        xYSeries0.add(2195.07, ((double) (-3435)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        xYSeries0.clear();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, true);
        xYSeries0.add(((Number) (1)), ((Number) (1)));
        {
            xYSeries0.addOrUpdate(((Number) (1)), ((Number) (53)));
        }
    }

    @Test(timeout = 4000)
    public void test73() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        ZoneOffset zoneOffset0 = ZoneOffset.MAX;
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone(((ZoneId) (zoneOffset0)))));
        Month month0 = new Month(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), ((double) (0)));
        xYSeries0.add(xYDataItem0, true);
        {
            xYSeries0.addOrUpdate(0.0, ((double) (-3435)));
        }
    }
}

