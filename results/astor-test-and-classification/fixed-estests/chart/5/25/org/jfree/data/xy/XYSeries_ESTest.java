/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 01:21:52 GMT 2017
 */


package org.jfree.data.xy;

import org.junit.Assert;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import java.sql.Connection;
import java.util.Date;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.time.SpreadsheetDate;
import org.junit.Test;
import org.jfree.data.time.Week;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import java.util.List;
import org.jfree.data.category.SlidingCategoryDataset;
import java.util.Vector;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.time.Year;
import org.jfree.data.time.Millisecond;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Second;
import org.jfree.data.statistics.SimpleHistogramBin;
import sun.util.calendar.ZoneInfo;
import org.evosuite.runtime.mock.java.util.MockDate;
import java.time.Instant;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.time.Minute;
import org.jfree.data.gantt.TaskSeriesCollection;
import javax.swing.table.DefaultTableModel;
import java.util.TimeZone;
import org.jfree.data.time.Month;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.evosuite.runtime.EvoAssertions;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.jfree.data.gantt.GanttCategoryDataset;

public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1909);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        xYSeries0.add(((double) (1)), ((Number) (null)));
        xYSeries0.addOrUpdate(0.0, 0.0);
        xYSeries0.addOrUpdate(((double) (1900)), 0.0);
        xYSeries0.add(2515.0, ((double) (1)));
        xYSeries0.hashCode();
        Assert.assertEquals(4, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYSeries xYSeries1 = xYSeries0.createCopy(((byte) (9)), (-1386));
        xYSeries1.setMaximumItemCount(7);
        boolean boolean0 = xYSeries1.equals(xYSeries0);
        Assert.assertEquals(7, xYSeries1.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        xYSeries0.add(((Number) (23)), ((Number) ((byte) (-94))), false);
        // Undeclared exception!
        try {
            xYSeries0.createCopy(0, 335);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        xYSeries0.setMaximumItemCount(1);
        xYSeries0.addOrUpdate(1.0, (-163.977333997));
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1888);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        xYSeries0.add(((double) (1)), ((Number) (null)));
        xYSeries0.addOrUpdate(((double) (2)), ((double) (0)));
        xYSeries0.addOrUpdate(((double) (2)), ((double) (2)));
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MockDate mockDate0 = new MockDate((-1574), (-1574), (-1574), (-1574), (-1574));
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        xYSeries0.add(((double) (-1574)), 0.701650802121204);
        xYSeries0.addOrUpdate(((Number) (6)), ((Number) (1281450528)));
        // Undeclared exception!
        try {
            xYSeries0.delete(1, Integer.MAX_VALUE);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 1, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(Double.NaN, 0.0, true);
        XYDataItem xYDataItem0 = new XYDataItem((-508.78), 3118.666823);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(((Number) (16)), ((Number) (6)));
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(288);
        Date date0 = spreadsheetDate0.toDate();
        ZoneInfo zoneInfo0 = ((ZoneInfo) (TimeZone.getTimeZone("No observation for x = ")));
        Second second0 = new Second(date0, ((TimeZone) (zoneInfo0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), true, true);
        xYSeries0.add(((Number) (-1)), ((Number) (4)), true);
        xYSeries0.updateByIndex(0, 9999);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(0.0, ((Number) (0)), true);
        Long long0 = new Long(0L);
        xYSeries0.remove(((Number) (long0)));
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.add(Double.NaN, ((Number) (-126)));
        XYDataItem xYDataItem0 = xYSeries0.remove(((Number) ((byte) (30))));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals((-126.0), xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), 3118.666823);
        xYSeries0.add(xYDataItem0);
        xYSeries0.remove(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-508.78), 0.0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.remove(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        xYSeries0.add(((Number) (23)), ((Number) ((byte) (-94))), false);
        xYSeries0.indexOf(23);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1896);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        xYSeries0.add(((double) (1)), ((Number) (null)));
        Double double0 = ((Double) (xYSeries0.getY(0)));
        Assert.assertNull(double0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        xYSeries0.add(0.0, ((Number) ((byte) (116))));
        Byte byte0 = ((Byte) (xYSeries0.getY(0)));
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(((byte) (116)), ((byte) (byte0)));
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1888);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        xYSeries0.add(((double) (1)), ((Number) (null)));
        Double double0 = ((Double) (xYSeries0.getX(0)));
        Assert.assertEquals(1.0, ((double) (double0)), 0.01);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(((Number) (16)), ((Number) (6)));
        xYSeries0.getItemCount();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-508.78), 0.0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.getDataItem(0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-508.78), 3118.666823);
        xYDataItem0.setY((-1.7976931348623157E308));
        xYSeries0.add(xYDataItem0);
        xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), 3118.666823);
        xYSeries0.add(xYDataItem0);
        xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(((Number) (16)), ((Number) (6)));
        XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(6.0, xYDataItem0.getYValue(), 0.01);
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        MockDate mockDate0 = new MockDate();
        Minute minute0 = new Minute(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)));
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1896);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), true, false);
        xYSeries0.getAllowDuplicateXValues();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.setNotify(false);
        XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertFalse(xYSeries1.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.createCopy(0, 0);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1896);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), true, false);
        xYSeries0.add(((double) (1)), ((Number) (null)));
        xYSeries0.addOrUpdate(1.0, 0.8);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex(0, 0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.update(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.setMaximumItemCount((-2469));
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(((double) (-3737)), 3390.1013227247, false, true);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (simpleHistogramBin0)), false, true);
        double[][] doubleArray0 = new double[1][7];
        DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
        SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(((CategoryDataset) (defaultIntervalCategoryDataset0)), (-3737), 2);
        List list0 = slidingCategoryDataset0.getRowKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) (-3737.0)));
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), true, true);
        DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
        List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.remove((-9999));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        // Undeclared exception!
        try {
            xYSeries0.getY((-3737));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1896);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), true, false);
        // Undeclared exception!
        try {
            xYSeries0.getX((-1));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test35() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem((-1595));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test36() throws Throwable {
        XYDataItem xYDataItem0 = new XYDataItem((-365.0), (-365.0));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (xYDataItem0)));
        // Undeclared exception!
        try {
            xYSeries0.delete((-751), (-751));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test37() throws Throwable {
        Instant instant0 = MockInstant.now();
        Date date0 = Date.from(instant0);
        Year year0 = new Year(date0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)));
        xYSeries0.add(((double) (9999)), 2973.9322958797);
        // Undeclared exception!
        try {
            xYSeries0.createCopy(9999, 9999);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 9999, Size: 1
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test38() throws Throwable {
        Minute minute0 = new Minute();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (minute0)), false, false);
        xYSeries0.addOrUpdate((-1327.97010658389), ((double) (59)));
        // Undeclared exception!
        try {
            xYSeries0.createCopy((-2302), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test40() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-508.78), 3118.666823);
        DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
        List list0 = defaultKeyedValuesDataset0.getKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test41() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
        List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (23)), ((Number) (6)), true);
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test42() throws Throwable {
        JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(((Connection) (null)));
        Comparable comparable0 = jDBCXYDataset0.getSeriesKey(7);
        XYSeries xYSeries0 = new XYSeries(comparable0);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test43() throws Throwable {
        MockDate mockDate0 = new MockDate(((long) (3548)));
        Year year0 = new Year(((Date) (mockDate0)));
        Week week0 = new Week(3548, year0);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true, false);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (-9999)), ((Number) (2)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections", e);
        }
    }

    @Test(timeout = 4000)
    public void test44() throws Throwable {
        XYSeries xYSeries0 = new XYSeries(((Comparable) (48)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test45() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1896);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        xYSeries0.add(1.0, 0.0, false);
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (1)), ((Number) (null)));
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test46() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
        SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(((GanttCategoryDataset) (taskSeriesCollection0)), 2557, 2557);
        List list0 = slidingGanttCategoryDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(Double.NaN, ((Number) (-126)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test47() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1896);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), true, false);
        DefaultTableModel defaultTableModel0 = new DefaultTableModel(1, 3);
        Vector vector0 = defaultTableModel0.getDataVector();
        xYSeries0.data = ((List) (vector0));
        // Undeclared exception!
        try {
            xYSeries0.add(((double) (1)), ((Number) (null)));
            Assert.fail("Expecting exception: ClassCastException");
        } catch (ClassCastException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test48() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true, true);
        xYSeries0.data = null;
        // Undeclared exception!
        try {
            xYSeries0.add((-3725.36053571), 0.0, false);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections", e);
        }
    }

    @Test(timeout = 4000)
    public void test49() throws Throwable {
        MockDate mockDate0 = new MockDate((-3470L));
        Millisecond millisecond0 = new Millisecond(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)), false, false);
        xYSeries0.add(0.0, 1360.3283189955);
        // Undeclared exception!
        try {
            xYSeries0.add(0.0, Double.NaN);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test50() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1896);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
        List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.add(0.0, ((double) (2)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableCollection", e);
        }
    }

    @Test(timeout = 4000)
    public void test51() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), false, false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test52() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)), true);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test53() throws Throwable {
        XYSeries xYSeries0 = null;
        try {
            xYSeries0 = new XYSeries(((Comparable) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'key' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.general.Series", e);
        }
    }

    @Test(timeout = 4000)
    public void test54() throws Throwable {
        MockDate mockDate0 = new MockDate((-1574), (-1574), (-1574), (-1574), (-1574));
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        xYSeries0.add(((double) (-1574)), 0.0);
        int int0 = xYSeries0.indexOf(4);
        Assert.assertEquals((-1), int0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test55() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1896);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), true, false);
        // Undeclared exception!
        try {
            xYSeries0.indexOf(((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYDataItem", e);
        }
    }

    @Test(timeout = 4000)
    public void test56() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.setMaximumItemCount(0);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (59)), ((double) (59)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test57() throws Throwable {
        MockDate mockDate0 = new MockDate((-1574), (-1574), (-1574), (-1574), (-1574));
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        XYDataItem xYDataItem0 = new XYDataItem(0.0, ((double) (-1574)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test58() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), 3118.666823);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0, true);
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test59() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        XYDataItem xYDataItem0 = new XYDataItem(((Number) (1002)), ((Number) (0.714)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test60() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)), false);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test61() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1888);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        // Undeclared exception!
        try {
            xYSeries0.getX(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test62() throws Throwable {
        Month month0 = new Month();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), true, true);
        // Undeclared exception!
        try {
            xYSeries0.getY(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test63() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.getDataItem(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test64() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.remove(0);
            Assert.fail("Expecting exception: IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
            // 
            // Index: 0, Size: 0
            // 
            EvoAssertions.verifyException("java.util.ArrayList", e);
        }
    }

    @Test(timeout = 4000)
    public void test65() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.getItemCount();
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test66() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1888);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        xYSeries0.add(((double) (1)), ((Number) (null)));
        xYSeries0.hashCode();
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test67() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.hashCode();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test68() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYSeries xYSeries1 = xYSeries0.createCopy(1281450528, 1281450528);
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        xYSeries1.add(((Number) (23)), ((Number) ((byte) (-94))), false);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test69() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYSeries xYSeries1 = xYSeries0.createCopy(1281450528, 1281450528);
        xYSeries1.setMaximumItemCount(7);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertEquals(7, xYSeries1.getMaximumItemCount());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test70() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYSeries xYSeries1 = xYSeries0.createCopy(1281450528, 1281450528);
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertNotSame(xYSeries1, xYSeries0);
        Assert.assertTrue(xYSeries1.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test71() throws Throwable {
        MockDate mockDate0 = new MockDate((-1574), (-1574), (-1574), (-1574), (-1574));
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        boolean boolean0 = xYSeries0.equals(month0);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test72() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        boolean boolean0 = xYSeries0.equals(xYSeries0);
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertTrue(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test73() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-508.78), 3118.666823);
        xYSeries0.add(xYDataItem0);
        xYSeries0.createCopy(0, 0);
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test74() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        XYSeries xYSeries1 = xYSeries0.createCopy(1281450528, 1281450528);
        Assert.assertTrue(xYSeries1.equals(((Object) (xYSeries0))));
        xYSeries1.setDescription("");
        boolean boolean0 = xYSeries0.equals(xYSeries1);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(xYSeries1.equals(((Object) (xYSeries0))));
    }

    @Test(timeout = 4000)
    public void test75() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1888);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        xYSeries0.add(((double) (1)), ((Number) (null)));
        xYSeries0.toArray();
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test76() throws Throwable {
        SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1888);
        XYSeries xYSeries0 = new XYSeries(((Comparable) (spreadsheetDate0)), false, false);
        xYSeries0.add(((double) (1)), ((Number) (null)));
        xYSeries0.addOrUpdate(((double) (2)), ((double) (0)));
        xYSeries0.hashCode();
        Assert.assertEquals(2, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test77() throws Throwable {
        Second second0 = new Second();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (second0)), false, false);
        xYSeries0.setMaximumItemCount(0);
        xYSeries0.addOrUpdate(((Number) (0)), ((Number) (59)));
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test79() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (null)), ((Number) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'x' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test80() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        // Undeclared exception!
        try {
            xYSeries0.update((-9999), 9999);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // No observation for x = -9999
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test81() throws Throwable {
        Year year0 = new Year();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (year0)), false);
        xYSeries0.clear();
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test82() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        xYSeries0.delete(92, 29);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test83() throws Throwable {
        MockDate mockDate0 = new MockDate((-1574), (-1574), (-1574), (-1574), (-1574));
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        xYSeries0.add(((double) (-1574)), ((double) (-1574)));
        XYDataItem xYDataItem0 = new XYDataItem(((double) (-1574)), ((double) (-1574)));
        // Undeclared exception!
        try {
            xYSeries0.add(xYDataItem0, false);
            Assert.fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // X-value already exists.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test84() throws Throwable {
        MockDate mockDate0 = new MockDate((-1574), (-1574), (-1574), (-1574), (-1574));
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false);
        XYDataItem xYDataItem0 = new XYDataItem(0.0, ((double) (-1574)));
        xYSeries0.add(xYDataItem0, false);
        Assert.assertTrue(xYSeries0.getAllowDuplicateXValues());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAutoSort());
    }

    @Test(timeout = 4000)
    public void test85() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-508.78), 0.0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(0.0, ((Number) (0)), false);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(3, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test86() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), false);
        // Undeclared exception!
        try {
            xYSeries0.add(((XYDataItem) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // Null 'item' argument.
            // 
            EvoAssertions.verifyException("org.jfree.data.xy.XYSeries", e);
        }
    }

    @Test(timeout = 4000)
    public void test87() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem(((double) (0)), 3118.666823);
        xYSeries0.add(xYDataItem0);
        xYSeries0.setMaximumItemCount(0);
        Assert.assertEquals(0, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test88() throws Throwable {
        MockDate mockDate0 = new MockDate((-1574), (-1574), (-1574), (-1574), (-1574));
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        boolean boolean0 = xYSeries0.getAutoSort();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test89() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
        Assert.assertTrue(boolean0);
        Assert.assertTrue(xYSeries0.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test90() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        // Undeclared exception!
        try {
            xYSeries0.remove(((Number) ((byte) (30))));
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test91() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        XYDataItem xYDataItem0 = new XYDataItem((-508.78), 0.0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(xYDataItem0);
        xYSeries0.add(0.0, ((Number) (0)), false);
        xYSeries0.add(xYDataItem0, false);
        Assert.assertEquals(4, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test92() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        xYSeries0.addOrUpdate(((double) ((byte) (-113))), 0.0);
        xYSeries0.add(((Number) (23)), ((Number) ((byte) (-113))), false);
        int int0 = xYSeries0.indexOf(23);
        Assert.assertEquals(2, xYSeries0.getItemCount());
        Assert.assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test93() throws Throwable {
        Hour hour0 = new Hour();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (hour0)));
        // Undeclared exception!
        try {
            xYSeries0.updateByIndex((-2), 0);
            Assert.fail("Expecting exception: ArrayIndexOutOfBoundsException");
        } catch (ArrayIndexOutOfBoundsException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test94() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.addOrUpdate(((Number) (999)), ((Number) (0)));
        xYSeries0.toArray();
        Assert.assertEquals(1, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test95() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        List list0 = xYSeries0.getItems();
        xYSeries0.data = list0;
        // Undeclared exception!
        try {
            xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("java.util.Collections$UnmodifiableList", e);
        }
    }

    @Test(timeout = 4000)
    public void test96() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(Double.NaN, 0.0, true);
        xYSeries0.clear();
        Assert.assertEquals(0, xYSeries0.getItemCount());
    }

    @Test(timeout = 4000)
    public void test97() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)));
        xYSeries0.add(Double.NaN, ((Number) (-126)));
        Assert.assertEquals(1, xYSeries0.getItemCount());
        Long long0 = new Long(((long) (0)));
        xYSeries0.update(0, long0);
        Assert.assertEquals(2147483647, xYSeries0.getMaximumItemCount());
    }

    @Test(timeout = 4000)
    public void test98() throws Throwable {
        MockDate mockDate0 = new MockDate((-1574), (-1574), (-1574), (-1574), (-1574));
        Month month0 = new Month(((Date) (mockDate0)));
        XYSeries xYSeries0 = new XYSeries(((Comparable) (month0)), false, false);
        int int0 = xYSeries0.getMaximumItemCount();
        Assert.assertEquals(Integer.MAX_VALUE, int0);
        Assert.assertFalse(xYSeries0.getAutoSort());
        Assert.assertFalse(xYSeries0.getAllowDuplicateXValues());
    }

    @Test(timeout = 4000)
    public void test99() throws Throwable {
        Week week0 = new Week();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (week0)), true);
        XYSeries xYSeries1 = ((XYSeries) (xYSeries0.clone()));
        Assert.assertTrue(xYSeries1.getAutoSort());
        Assert.assertEquals(2147483647, xYSeries1.getMaximumItemCount());
        Assert.assertTrue(xYSeries1.getAllowDuplicateXValues());
        Assert.assertNotSame(xYSeries1, xYSeries0);
    }

    @Test(timeout = 4000)
    public void test39() throws Throwable {
        FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (fixedMillisecond0)), true);
        xYSeries0.add(((Number) (16)), ((Number) (6)));
        {
            xYSeries0.addOrUpdate(((double) (16)), ((double) (0)));
        }
    }

    @Test(timeout = 4000)
    public void test78() throws Throwable {
        Millisecond millisecond0 = new Millisecond();
        XYSeries xYSeries0 = new XYSeries(((Comparable) (millisecond0)));
        xYSeries0.addOrUpdate(((double) (0)), ((double) (0)));
        {
            xYSeries0.addOrUpdate(((Number) (0)), ((Number) (0)));
        }
    }
}

