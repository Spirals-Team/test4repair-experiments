/**
 * This file was automatically generated by EvoSuite
 * Fri Jan 27 21:01:38 GMT 2017
 */


package org.apache.commons.math.linear;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.junit.Test;

public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector0.mapSubtractToSelf(1.0);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(doubleArray0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector1.mapSubtractToSelf(1.0);
        boolean boolean0 = openMapRealVector2.equals(openMapRealVector1);
        Assert.assertFalse(openMapRealVector2.equals(((Object) (openMapRealVector0))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(3.141592653589793);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = -0.3455345828907385;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.hashCode();
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1301), (-1301));
        openMapRealVector0.hashCode();
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = -0.3455345828907385;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(37);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeDivide(((RealVector) (openMapRealVector0)));
        OpenMapRealVector openMapRealVector3 = openMapRealVector2.subtract(((RealVector) (openMapRealVector1)));
        Assert.assertTrue(openMapRealVector3.equals(((Object) (openMapRealVector2))));
        Assert.assertNotSame(openMapRealVector3, openMapRealVector2);
        Assert.assertFalse(openMapRealVector3.equals(((Object) (openMapRealVector1))));
        Assert.assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        openMapRealVector0.set(4320.304852801334);
        Assert.assertEquals((-1321), openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[4] = 1.0;
        doubleArray0[5] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector1.getLInfDistance(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(1.0, double0, 0.01);
        Assert.assertFalse(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = 0.3182993583452704;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector0.getLInfDistance(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getL1Distance(doubleArray0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getDistance(doubleArray0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = -0.3455345828907385;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector1.getDistance(openMapRealVector0);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(0.3455345828907385, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector2.getDistance(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector2.getDistance(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector0.mapAddToSelf(1.0);
        openMapRealVector0.getSubVector(1, 1);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.getSubVector(1, (-738));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-738)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 0.3182993583452704;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.16666666666666666, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 0.3182993583452704;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = -0.3455345828907385;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.16666666666666666, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(doubleArray0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector1.mapSubtractToSelf(1.0);
        openMapRealVector1.add(openMapRealVector2);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0E-12);
        OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
        boolean boolean0 = openMapRealVector_OpenMapSparseIterator0.hasNext();
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2409.286));
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = double0;
        doubleArray0[3] = double0;
        doubleArray0[4] = doubleArray0[2];
        doubleArray0[5] = doubleArray0[1];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = ((OpenMapRealVector.OpenMapEntry) (openMapRealVector_OpenMapSparseIterator0.next()));
        openMapRealVector_OpenMapEntry0.setValue((-1001.661861567));
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(((OpenIntToDoubleHashMap.Iterator) (null)));
        // Undeclared exception!
        try {
            openMapRealVector_OpenMapEntry0.getValue();
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2409.286));
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        doubleArray0[2] = doubleArray0[0];
        doubleArray0[3] = doubleArray0[1];
        doubleArray0[4] = double0;
        doubleArray0[5] = doubleArray0[1];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = ((OpenMapRealVector.OpenMapEntry) (openMapRealVector_OpenMapSparseIterator0.next()));
        int int0 = openMapRealVector_OpenMapEntry0.getIndex();
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2739, 1379, 2739);
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(((OpenIntToDoubleHashMap.Iterator) (null)));
        Assert.assertEquals(2739, openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = openMapRealVector0.toArray();
        Assert.assertArrayEquals(new double[]{  }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(((RealVector) (openMapRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1301), (-1301));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(((RealVector) (openMapRealVector0)));
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals((-1301), openMapRealVector1.getDimension());
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals((-1321), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.projection(((RealVector) (openMapRealVector0)))));
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.projection(((RealVector) (openMapRealVector0)))));
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(897.7126215);
        Assert.assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-454), 0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((-454));
        Assert.assertEquals((-454), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(0.0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.isDefaultValue(0.0);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2409.286));
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        doubleArray0[2] = double0;
        doubleArray0[3] = double0;
        doubleArray0[4] = doubleArray0[2];
        doubleArray0[5] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.isDefaultValue(((double) (doubleArray0[0])));
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getSparsity();
        Assert.assertEquals(0.16666666666666666, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector0.mapAddToSelf(1.0);
        double double0 = openMapRealVector0.getL1Distance(doubleArray0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(6.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = 0.3182993583452704;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getEntry(1);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.3182993583452704, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = -1532.2284866804;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getEntry(1);
        Assert.assertEquals((-1532.2284866804), double0, 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector0.mapSubtractToSelf(1.0);
        double double0 = openMapRealVector0.getDistance(doubleArray0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(2.449489742783178, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.getDimension();
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        double[] doubleArray0 = new double[1];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(((RealVector) (openMapRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1301), (-1301));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector0)));
        Assert.assertEquals((-1301), openMapRealVector1.getDimension());
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.dotProduct(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(1.0, double0, 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = -1532.2284866804;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector0.dotProduct(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals((-1526.2284866804), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[2] = -2166.0763661209344;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector0.dotProduct(openMapRealVector1);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals((-2160.0763661209344), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[8];
        doubleArray0[0] = 1.0E-12;
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
        Assert.assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(((RealVector) (openMapRealVector0)));
        Assert.assertEquals((-2642), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
        Assert.assertEquals((-2642), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.add(((RealVector) (openMapRealVector0)))));
        Assert.assertEquals((-1321), openMapRealVector1.getDimension());
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-683));
        // Undeclared exception!
        try {
            openMapRealVector0.toArray();
            Assert.fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3363, 3363);
        double[] doubleArray0 = new double[6];
        // Undeclared exception!
        try {
            openMapRealVector0.subtract(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 3,363 != 6
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
        // Undeclared exception!
        try {
            openMapRealVector1.subtract(((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != -1,321
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.subtract(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.subtract(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.setSubVector(2146084843, doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (2,146,084,843)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2374));
        // Undeclared exception!
        try {
            openMapRealVector0.setEntry((-167), 1983.966532233);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-167)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[8];
        // Undeclared exception!
        try {
            openMapRealVector0.projection(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != 8
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.projection(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        double[] doubleArray0 = new double[8];
        // Undeclared exception!
        try {
            openMapRealVector0.outerProduct(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -1,321 is smaller than, or equal to, the minimum (0)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
        // Undeclared exception!
        try {
            openMapRealVector0.outerProduct(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        double[] doubleArray0 = new double[7];
        // Undeclared exception!
        try {
            openMapRealVector0.getLInfDistance(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -1,321 != 7
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.getLInfDistance(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
        // Undeclared exception!
        try {
            openMapRealVector0.getLInfDistance(((RealVector) (openMapRealVector1)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -1,321 != 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.getLInfDistance(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1386, 0.0);
        double[] doubleArray0 = new double[6];
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 1,386 != 6
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1301), (-1301));
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(((RealVector) (openMapRealVector1)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -1,321 != 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        // Undeclared exception!
        try {
            openMapRealVector0.getEntry(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (0)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1.0E-12);
        // Undeclared exception!
        try {
            openMapRealVector1.getDistance(((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 38 != 37
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2409.286));
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = double0;
        doubleArray0[3] = doubleArray0[2];
        doubleArray0[4] = doubleArray0[1];
        doubleArray0[5] = doubleArray0[1];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(13, 13, 2169.736699898);
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2463));
        // Undeclared exception!
        try {
            openMapRealVector0.getData();
            Assert.fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        double[] doubleArray0 = new double[6];
        // Undeclared exception!
        try {
            openMapRealVector0.ebeMultiply(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -1,321 != 6
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        // Undeclared exception!
        try {
            openMapRealVector0.ebeMultiply(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.04168701738764507);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0E-12);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
        // Undeclared exception!
        try {
            openMapRealVector1.ebeMultiply(((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != 2
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        double[] doubleArray0 = new double[5];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.ebeMultiply(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[1];
        // Undeclared exception!
        try {
            openMapRealVector0.ebeDivide(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != 1
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37);
        // Undeclared exception!
        try {
            openMapRealVector0.ebeDivide(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1.0E-12);
        // Undeclared exception!
        try {
            openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector1)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 37 != 38
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.ebeDivide(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        double[] doubleArray0 = new double[9];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1.225743062930824E-8);
        // Undeclared exception!
        try {
            openMapRealVector1.dotProduct(((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 10 != 9
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        double[] doubleArray0 = new double[5];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.dotProduct(openMapRealVector1);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 5 != 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        double[] doubleArray0 = new double[9];
        // Undeclared exception!
        try {
            openMapRealVector0.append(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-1,321)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(73, 2562);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(73, openMapRealVector2.getDimension());
        Assert.assertNotSame(openMapRealVector2, openMapRealVector1);
        // Undeclared exception!
        openMapRealVector0.append(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(73, openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1681));
        // Undeclared exception!
        try {
            openMapRealVector0.append(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1001));
        // Undeclared exception!
        try {
            openMapRealVector0.append(((double) (-1001)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-1,001)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1505, 1505);
        openMapRealVector0.mapSubtractToSelf(1.0E-12);
        // Undeclared exception!
        openMapRealVector0.add(((RealVector) (openMapRealVector0)));
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
        // Undeclared exception!
        try {
            openMapRealVector0.add(((RealVector) (openMapRealVector1)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -1,321 != 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(295, 295);
        // Undeclared exception!
        try {
            openMapRealVector0.add(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1301), (-1301));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
        // Undeclared exception!
        try {
            openMapRealVector1.add(openMapRealVector0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != -1,301
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-134), (-134), (-134));
        // Undeclared exception!
        try {
            openMapRealVector0.add(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((Double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(2145340664, 2145340664);
            Assert.fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.unitize();
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.unitize();
            Assert.fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            // 
            // zero norm
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(doubleArray0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector1.mapSubtractToSelf(1.0);
        openMapRealVector0.subtract(openMapRealVector2);
        Assert.assertFalse(openMapRealVector2.equals(((Object) (openMapRealVector1))));
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = -2.957007209750105E-8;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.setEntry(0, 1.0E-12);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = -2.957007209750105E-8;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = openMapRealVector0.getData();
        Assert.assertArrayEquals(new double[]{ -2.957007209750105E-8 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 }, doubleArray1, 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = openMapRealVector0.getData();
        Assert.assertArrayEquals(new double[]{  }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        double[] doubleArray0 = new double[8];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-498.241229));
        // Undeclared exception!
        try {
            openMapRealVector0.dotProduct(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        double double0 = openMapRealVector0.dotProduct(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-1321), openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
        Assert.assertEquals(1.0, double0, 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37);
        double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
        Assert.assertEquals(37, openMapRealVector0.getDimension());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(3.141592653589793);
        openMapRealVector0.mapAddToSelf(1442.6418640906206);
        double double0 = openMapRealVector1.dotProduct(openMapRealVector0);
        // // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        // // Unstable assertion: assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
        double double0 = openMapRealVector0.getL1Distance(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(0.16666666666666666, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(1.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-134), (-134), (-134));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals((-134), openMapRealVector1.getDimension());
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4413.574698436);
        // Undeclared exception!
        try {
            openMapRealVector0.dotProduct(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[3] = 6.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 6.0);
        Assert.assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        int int0 = openMapRealVector0.getDimension();
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2409.286));
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = doubleArray0[1];
        doubleArray0[3] = doubleArray0[0];
        doubleArray0[4] = double0;
        doubleArray0[5] = doubleArray0[1];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.projection(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2409.286));
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        doubleArray0[2] = doubleArray0[0];
        doubleArray0[3] = doubleArray0[0];
        doubleArray0[4] = doubleArray0[1];
        doubleArray0[5] = doubleArray0[3];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.sparseIterator();
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((OpenMapRealVector) (null)), (-1627));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
        Assert.assertEquals((-1321), openMapRealVector1.getDimension());
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getEntry(1);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(doubleArray0);
        boolean boolean0 = openMapRealVector2.equals(openMapRealVector1);
        Assert.assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        Assert.assertEquals((-1321), openMapRealVector0.getDimension());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        boolean boolean0 = openMapRealVector0.equals(((Object) (null)));
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1321), openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        openMapRealVector0.set(1.0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Double[] doubleArray0 = new Double[6];
        Double double0 = new Double((-2409.286));
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        doubleArray0[2] = double0;
        doubleArray0[3] = doubleArray0[0];
        doubleArray0[4] = doubleArray0[1];
        doubleArray0[5] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = new double[5];
        openMapRealVector0.setSubVector(0, doubleArray1);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealMatrix openMapRealMatrix0 = ((OpenMapRealMatrix) (openMapRealVector0.outerProduct(doubleArray0)));
        Assert.assertEquals(6, openMapRealMatrix0.getRowDimension());
        Assert.assertEquals(6, openMapRealMatrix0.getColumnDimension());
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.isNaN();
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        boolean boolean0 = openMapRealVector0.isInfinite();
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = -0.3455345828907385;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector1.getLInfDistance(doubleArray0);
        Assert.assertEquals(0.3455345828907385, double0, 0.01);
        Assert.assertFalse(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[1] = -0.3455345828907385;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector1.getLInfDistance(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getLInfDistance(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1321), (-1321));
        double double0 = openMapRealVector0.getL1Distance(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-1321), openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        double double0 = openMapRealVector1.getL1Distance(openMapRealVector0);
        Assert.assertEquals(1.0, double0, 0.01);
        Assert.assertFalse(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getL1Distance(openMapRealVector0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getDistance(openMapRealVector0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = openMapRealVector0.toArray();
        Assert.assertArrayEquals(new double[]{ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 }, doubleArray1, 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[4] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(1, 1);
        Assert.assertEquals(1, openMapRealVector1.getDimension());
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals(0.16666666666666666, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(((RealVector) (openMapRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(37);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeDivide(((RealVector) (openMapRealVector0)));
        boolean boolean0 = openMapRealVector2.isInfinite();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
        Assert.assertEquals(37, openMapRealVector2.getDimension());
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        doubleArray0[1] = -0.3455345828907385;
        doubleArray0[4] = 1.0;
        doubleArray0[5] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.mapSubtractToSelf(1.0);
        openMapRealVector0.projection(doubleArray0);
        Assert.assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.append(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(37);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
        Assert.assertEquals(0.5, openMapRealVector2.getSparsity(), 0.01);
        Assert.assertEquals(74, openMapRealVector2.getDimension());
    }

    @Test(timeout = 4000)
    public void test165() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapSubtractToSelf(1.0)));
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.projection(doubleArray0);
        OpenMapRealVector openMapRealVector3 = ((OpenMapRealVector) (openMapRealVector1.add(((RealVector) (openMapRealVector2)))));
        Assert.assertEquals(0.8333333333333334, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertTrue(openMapRealVector3.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test166() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 1.0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
        Assert.assertTrue(openMapRealVector2.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(0.16666666666666666, openMapRealVector2.getSparsity(), 0.01);
        Assert.assertFalse(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertNotSame(openMapRealVector2, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test167() throws Throwable {
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = -750.1222352703188;
        SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(((RealVector) (sparseRealVectorTest_SparseRealVectorTestImpl0)));
        Assert.assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test168() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0E-12);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test169() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[8];
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(8, openMapRealVector1.getDimension());
        Assert.assertEquals(0, openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test170() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-454), 0);
        double[] doubleArray0 = new double[8];
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -454 != 8
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test171() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
        // Undeclared exception!
        try {
            openMapRealVector0.setSubVector(0, ((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (0)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test172() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double double0 = openMapRealVector0.getSparsity();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test173() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(doubleArray0);
        boolean boolean0 = openMapRealVector2.equals(openMapRealVector1);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test174() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.unitVector();
            Assert.fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            // 
            // zero norm
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test175() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), (-1));
        double[] doubleArray0 = new double[7];
        ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
        ArrayRealVector arrayRealVector0 = ((ArrayRealVector) (arrayRealVectorTest_RealVectorTestImpl0.mapMultiply(1.0E-12)));
        // Undeclared exception!
        try {
            openMapRealVector0.projection(((RealVector) (arrayRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -1 != 7
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test176() throws Throwable {
        double[] doubleArray0 = new double[8];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
        // Undeclared exception!
        try {
            openMapRealVector_OpenMapSparseIterator0.remove();
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // Not supported
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        openMapRealVector0.mapAddToSelf(1.0);
        {
            openMapRealVector0.ebeMultiply(doubleArray0);
        }
    }
}

