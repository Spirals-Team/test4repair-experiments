/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 13:54:23 GMT 2017
 */


package org.apache.commons.math.linear;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;

public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(6.0);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply(3.058524869091979)));
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[2] = -0.8023493334927132;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2.404307984052299E-9);
        openMapRealVector0.hashCode();
        Assert.assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2.211657268748756));
        openMapRealVector0.hashCode();
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = -0.12502530217170715;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(doubleArray0);
        Assert.assertEquals(0.25, openMapRealVector2.getSparsity(), 0.01);
        Assert.assertEquals(0.25, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertFalse(openMapRealVector2.equals(((Object) (openMapRealVector1))));
        Assert.assertNotSame(openMapRealVector2, openMapRealVector1);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double[] doubleArray1 = openMapRealVector0.toArray();
        openMapRealVector0.setEntry(0, 1.0E-12);
        SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray1);
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (sparseRealVectorTest_SparseRealVectorTestImpl0.mapMultiply(5.5323804257784596E-5)));
        double double1 = openMapRealVector0.getLInfDistance(((RealVector) (openMapRealVector1)));
        Assert.assertArrayEquals(new double[]{ 1.7976931348623157E308 , 1.7976931348623157E308 }, doubleArray1, 0.01);
        Assert.assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(1.797593679639207E308, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[2];
        doubleArray0[0] = 1789.0971503;
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
        double double0 = openMapRealVector0.getL1Distance(openMapRealVector1);
        Assert.assertEquals(1789.0971503, double0, 0.01);
        Assert.assertEquals(0.5, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        // Undeclared exception!
        try {
            openMapRealVector0.getSubVector(1, 230);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (230)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[2] = -2.211657268748756;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-2.211657268748756));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply((-2038.102072))));
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(openMapRealVector0);
        Assert.assertEquals(4, openMapRealVector2.getDimension());
        Assert.assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
        Assert.assertFalse(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(20, 20);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(20, 20);
        openMapRealVector0.set(1.0E-12);
        openMapRealVector1.add(((RealVector) (openMapRealVector0)));
        Assert.assertFalse(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        double[] doubleArray0 = new double[5];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
        openMapRealVector_OpenMapSparseIterator0.next();
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-2486));
        Assert.assertEquals((-2486), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
        openMapRealVector_OpenMapSparseIterator0.hasNext();
        Assert.assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0, openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
        OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry(((OpenIntToDoubleHashMap.Iterator) (null)));
        // Undeclared exception!
        try {
            openMapRealVector_OpenMapEntry0.setValue((-1));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
        }
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1602), (-1972.3428));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        Assert.assertEquals((-1602), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = openMapRealVector0.toArray();
        Assert.assertArrayEquals(new double[]{  }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0, openMapRealVector1.getDimension());
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
        Assert.assertEquals(0, openMapRealVector1.getDimension());
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals((-3774), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.projection(((RealVector) (openMapRealVector0)))));
        Assert.assertEquals(0, openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.projection(((RealVector) (openMapRealVector0)))));
        Assert.assertEquals((-3774), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0E-12);
        Assert.assertEquals((-1), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 303.998345);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(1.1872310683120439E7);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((-1));
        Assert.assertEquals((-0.0), openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1801), 237, 237);
        boolean boolean0 = openMapRealVector0.isDefaultValue(0.0);
        Assert.assertEquals((-1801), openMapRealVector0.getDimension());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 5.669184079525E-24);
        boolean boolean0 = openMapRealVector0.isDefaultValue(5.669184079525E-24);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-5059), (-5059), 0.0);
        double double0 = openMapRealVector0.getSparsity();
        Assert.assertEquals((-0.0), double0, 0.01);
        Assert.assertEquals((-5059), openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[2] = -0.8023493334927132;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        double double0 = openMapRealVector0.getL1Distance(doubleArray0);
        Assert.assertEquals(0.8023493334927132, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        double double1 = openMapRealVector0.getL1Distance(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        double double0 = openMapRealVector0.getEntry(1);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = -0.12502530217170715;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        double double0 = openMapRealVector0.getDistance(doubleArray0);
        Assert.assertEquals(0.12502530217170715, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(((double) (doubleArray0[0])));
        double double1 = openMapRealVector0.getDistance(((RealVector) (openMapRealVector1)));
        // // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
        // // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double double1 = openMapRealVector0.getDistance(openMapRealVector0);
        Assert.assertEquals(0.0, double1, 0.01);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        int int0 = openMapRealVector0.getDimension();
        Assert.assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        int int0 = openMapRealVector0.getDimension();
        Assert.assertEquals((-3774), int0);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 5.669184079525E-24);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(((RealVector) (openMapRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals(0, openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(((RealVector) (openMapRealVector0)));
        Assert.assertEquals((-3774), openMapRealVector1.getDimension());
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0, openMapRealVector1.getDimension());
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3279));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals((-3279), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply((-2038.102072))));
        double double1 = openMapRealVector0.dotProduct(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[2] = -0.8023493334927132;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2.404307984052299E-9);
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.combine((-493.105386), 0.6437644529562011, ((RealVector) (openMapRealVector0)))));
        double double0 = openMapRealVector1.dotProduct(openMapRealVector0);
        Assert.assertEquals((-317.0292863971564), double0, 0.01);
        Assert.assertEquals(0.25, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
        Assert.assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3282));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
        Assert.assertEquals((-6564), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.add(((RealVector) (openMapRealVector0)))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals(0, openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3780), (-3780));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.add(((RealVector) (openMapRealVector0)))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals((-3780), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
        Assert.assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertEquals((-3774), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-18));
        // Undeclared exception!
        try {
            openMapRealVector0.toArray();
            Assert.fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        // Undeclared exception!
        try {
            openMapRealVector0.subtract(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-3301), (-3301), 1789.0971503);
        // Undeclared exception!
        try {
            openMapRealVector1.subtract(((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -3,301 != 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.subtract(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(((RealVector) (sparseRealVectorTest_SparseRealVectorTestImpl0)));
        // Undeclared exception!
        try {
            openMapRealVector0.subtract(openMapRealVector1);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 4 != 8
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.subtract(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double[] doubleArray1 = openMapRealVector0.toArray();
        // Undeclared exception!
        try {
            openMapRealVector0.setSubVector((-413), doubleArray1);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-413)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1602), (-1972.3428));
        // Undeclared exception!
        try {
            openMapRealVector0.setSubVector(245, ((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (245)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        // Undeclared exception!
        try {
            openMapRealVector0.setEntry((-3277), 151.9469477);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-3,277)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        double[] doubleArray0 = new double[7];
        // Undeclared exception!
        try {
            openMapRealVector0.projection(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -3,774 != 7
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        // Undeclared exception!
        try {
            openMapRealVector0.projection(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3279));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.projection(((RealVector) (openMapRealVector1)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -3,279 != 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        // Undeclared exception!
        try {
            openMapRealVector0.projection(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[7];
        // Undeclared exception!
        try {
            openMapRealVector0.outerProduct(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 is smaller than, or equal to, the minimum (0)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        // Undeclared exception!
        try {
            openMapRealVector0.outerProduct(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), 1036);
        openMapRealVector0.mapDivide(205.8695);
        // Undeclared exception!
        boolean boolean0 = false;
        boolean0 = openMapRealVector0.isInfinite();
        Assert.assertEquals((-3774), openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1025, 25);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(25);
        // Undeclared exception!
        openMapRealVector1.hashCode();
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[1];
        // Undeclared exception!
        try {
            openMapRealVector0.getLInfDistance(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != 1
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        double[] doubleArray0 = new double[5];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        // Undeclared exception!
        try {
            openMapRealVector0.getLInfDistance(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1329, 1329);
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply((-1433.6258313681146))));
        // Undeclared exception!
        double double0 = 0;
        double0 = openMapRealVector1.getLInfDistance(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(1329, openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.getLInfDistance(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[9];
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != 9
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = new double[6];
        ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray1);
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(((RealVector) (arrayRealVectorTest_RealVectorTestImpl0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != 6
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1);
        // Undeclared exception!
        try {
            openMapRealVector0.getL1Distance(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        // Undeclared exception!
        try {
            openMapRealVector0.getEntry((-252));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-252)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-939), (-939), (-939));
        double[] doubleArray0 = new double[7];
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -939 != 7
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-3301), (-3301), 1789.0971503);
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(((RealVector) (openMapRealVector1)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != -3,301
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[0])));
        // Undeclared exception!
        try {
            openMapRealVector0.getDistance(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        double[] doubleArray0 = new double[2];
        // Undeclared exception!
        try {
            openMapRealVector0.ebeMultiply(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -3,774 != 2
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.ebeMultiply(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Double[] doubleArray0 = new Double[3];
        Double double0 = new Double(0.07490822288864472);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        doubleArray0[2] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = new double[2];
        SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray1);
        // Undeclared exception!
        try {
            openMapRealVector0.ebeMultiply(((RealVector) (sparseRealVectorTest_SparseRealVectorTestImpl0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 3 != 2
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.ebeMultiply(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[7];
        // Undeclared exception!
        try {
            openMapRealVector0.ebeDivide(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != 7
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        // Undeclared exception!
        try {
            openMapRealVector0.ebeDivide(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3279));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(((RealVector) (openMapRealVector0)));
        // Undeclared exception!
        try {
            openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector1)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -3,279 != -6,558
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        // Undeclared exception!
        try {
            openMapRealVector0.ebeDivide(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3279));
        OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector1.dotProduct(((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 0 != -3,279
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3279));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(((RealVector) (openMapRealVector0)));
        // Undeclared exception!
        try {
            openMapRealVector1.dotProduct(openMapRealVector0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -6,558 != -3,279
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        double[] doubleArray0 = new double[6];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1294.5977360612342);
        // Undeclared exception!
        try {
            openMapRealVector0.dotProduct(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
        // Undeclared exception!
        try {
            openMapRealVector0.append(((double[]) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.append(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.append(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2665));
        // Undeclared exception!
        try {
            openMapRealVector0.append(5822.098534176225);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-2,665)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        // Undeclared exception!
        try {
            openMapRealVector0.add(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1408.64492693);
        // Undeclared exception!
        try {
            openMapRealVector1.add(openMapRealVector0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 1 != 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        // Undeclared exception!
        try {
            openMapRealVector0.add(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((Double[]) (null)), (-1.0));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(doubleArray0);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((double[]) (null)), 1976.982);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
        }
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(1775586317, 1775586317);
            Assert.fail("Expecting exception: NegativeArraySizeException");
        } catch (NegativeArraySizeException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        openMapRealVector0.unitize();
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-812), 568, 632.97);
        // Undeclared exception!
        try {
            openMapRealVector0.unitize();
            Assert.fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            // 
            // zero norm
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double[] doubleArray1 = openMapRealVector0.toArray();
        openMapRealVector0.setSubVector(0, doubleArray1);
        Assert.assertArrayEquals(new double[]{ 1.7976931348623157E308 , 1.7976931348623157E308 }, doubleArray1, 0.01);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        double[] doubleArray0 = new double[5];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        openMapRealVector0.setEntry(0, 0.0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double[] doubleArray1 = openMapRealVector0.toArray();
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray1);
        openMapRealVector1.setEntry(0, 4649.8);
        Assert.assertArrayEquals(new double[]{ 1.7976931348623157E308 , 1.7976931348623157E308 }, doubleArray1, 0.01);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.1250253);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(5.532380325778459E-5);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(0.07842259109020233);
        Assert.assertEquals(1.0E-12, OpenMapRealVector.DEFAULT_ZERO_TOLERANCE, 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double[] doubleArray1 = openMapRealVector0.getData();
        Assert.assertArrayEquals(new double[]{ 1.7976931348623157E308 , 1.7976931348623157E308 }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        double[] doubleArray1 = openMapRealVector0.getData();
        Assert.assertArrayEquals(new double[]{  }, doubleArray1, 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        // Undeclared exception!
        try {
            openMapRealVector0.dotProduct(((RealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.1250253);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double double1 = openMapRealVector0.dotProduct(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.03126265128018, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[2] = -0.8023493334927132;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2.404307984052299E-9);
        double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
        Assert.assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.6437644529562011, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-3774), openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        double double0 = openMapRealVector0.dotProduct(openMapRealVector1);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        double[] doubleArray0 = new double[2];
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
        Assert.assertEquals(2, openMapRealVector1.getDimension());
        Assert.assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.1250253);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertFalse(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        openMapRealVector0.getDimension();
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.projection(((RealVector) (openMapRealVector0)))));
        Assert.assertFalse(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1));
        double[] doubleArray0 = new double[6];
        // Undeclared exception!
        try {
            openMapRealVector0.subtract(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // -1 != 6
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        openMapRealVector0.sparseIterator();
        Assert.assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1801), 237, 237);
        double[] doubleArray0 = new double[2];
        // Undeclared exception!
        try {
            openMapRealVector0.append(doubleArray0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (-1,801)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((OpenMapRealVector) (null)));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        OpenMapRealVector openMapRealVector0 = null;
        try {
            openMapRealVector0 = new OpenMapRealVector(((OpenMapRealVector) (null)), 2966);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals((-3774), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double double1 = openMapRealVector0.getEntry(0);
        Assert.assertEquals(1.7976931348623157E308, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply(3.058524869091979)));
        openMapRealVector0.setEntry(0, 1.0E-12);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        Assert.assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply(3.058524869091979)));
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        // // Unstable assertion: assertTrue(boolean0);
        // // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply((-2038.102072))));
        boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        SinFunction sinFunction0 = new SinFunction();
        openMapRealVector0.mapToSelf(sinFunction0);
        // Undeclared exception!
        try {
            openMapRealVector0.unitVector();
            Assert.fail("Expecting exception: ArithmeticException");
        } catch (ArithmeticException e) {
            // 
            // zero norm
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(((RealVector) (openMapRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals((-3774), openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2.404307984052299E-9);
        ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
        ArrayRealVector arrayRealVector0 = ((ArrayRealVector) (arrayRealVectorTest_RealVectorTestImpl0.mapMultiply(1619.18579586)));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(((RealVector) (arrayRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
        Assert.assertFalse(openMapRealVector2.equals(((Object) (openMapRealVector1))));
        Assert.assertNotSame(openMapRealVector2, openMapRealVector1);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector1);
        Assert.assertTrue(openMapRealVector2.equals(((Object) (openMapRealVector1))));
        Assert.assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertNotSame(openMapRealVector2, openMapRealVector1);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        openMapRealVector0.set((-261.9));
        double double1 = openMapRealVector0.dotProduct(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.1250253);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double[] doubleArray1 = openMapRealVector0.toArray();
        OpenMapRealMatrix openMapRealMatrix0 = ((OpenMapRealMatrix) (openMapRealVector0.outerProduct(doubleArray1)));
        Assert.assertEquals(2, openMapRealMatrix0.getRowDimension());
        Assert.assertArrayEquals(new double[]{ 0.1250253 , 0.1250253 }, doubleArray1, 0.01);
        Assert.assertEquals(2, openMapRealMatrix0.getColumnDimension());
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(1.7976931348623157E308);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.unitVector();
        boolean boolean0 = openMapRealVector2.isNaN();
        // // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
        // // Unstable assertion: assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
        // // Unstable assertion: assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        boolean boolean0 = openMapRealVector0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply(3.058524869091979)));
        boolean boolean0 = openMapRealVector1.isInfinite();
        // // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
        // // Unstable assertion: assertTrue(boolean0);
        // // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(((double) (doubleArray0[0])));
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.unitVector();
        boolean boolean0 = openMapRealVector2.isInfinite();
        // // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
        // // Unstable assertion: assertFalse(boolean0);
        // // Unstable assertion: assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        boolean boolean0 = openMapRealVector0.isInfinite();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        double[] doubleArray0 = new double[4];
        doubleArray0[0] = -0.12502530217170715;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
        Assert.assertEquals(0.12502530217170715, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
        double double0 = openMapRealVector0.getLInfDistance(((RealVector) (sparseRealVectorTest_SparseRealVectorTestImpl0)));
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(20, 20);
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply((-1433.6258313681146))));
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        QuinticFunction quinticFunction0 = new QuinticFunction();
        UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
        openMapRealVector0.mapToSelf(univariateRealFunction0);
        double double0 = openMapRealVector1.getLInfDistance(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.25, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply(3.058524869091979)));
        double double1 = openMapRealVector0.getLInfDistance(((RealVector) (openMapRealVector1)));
        // // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
        // // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
        // // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1306.6);
        double double0 = openMapRealVector0.getL1Distance(doubleArray0);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double double1 = openMapRealVector0.getL1Distance(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply(3.058524869091979)));
        openMapRealVector0.setEntry(0, 1.0E-12);
        double double1 = openMapRealVector0.getL1Distance(openMapRealVector1);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double double1 = openMapRealVector0.getL1Distance(openMapRealVector0);
        Assert.assertEquals(0.0, double1, 0.01);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test165() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        double double0 = openMapRealVector0.getDistance(doubleArray0);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test166() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double double1 = openMapRealVector0.getDistance(((RealVector) (openMapRealVector0)));
        Assert.assertEquals(0.0, double1, 0.01);
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test167() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.getSubVector(1, 1);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(1, openMapRealVector2.getDimension());
        Assert.assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test168() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(((RealVector) (openMapRealVector0)));
        // // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
        // // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
        // // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test169() throws Throwable {
        double[] doubleArray0 = new double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 5.669184079525E-24);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
    }

    @Test(timeout = 4000)
    public void test170() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(((RealVector) (sparseRealVectorTest_SparseRealVectorTestImpl0)));
        // Undeclared exception!
        try {
            openMapRealVector0.getLInfDistance(((RealVector) (openMapRealVector1)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 4 != 8
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test171() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
        double double1 = openMapRealVector0.getDistance(openMapRealVector1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test172() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = ((OpenMapRealVector) (openMapRealVector0.mapMultiply(3.058524869091979)));
        openMapRealVector0.setEntry(0, 1.0E-12);
        OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
        Assert.assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
        Assert.assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test173() throws Throwable {
        double[] doubleArray0 = new double[6];
        doubleArray0[0] = 2838.42512717;
        ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(((RealVector) (arrayRealVectorTest_RealVectorTestImpl0)));
        Assert.assertEquals(0.16666666666666666, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test174() throws Throwable {
        Double[] doubleArray0 = new Double[1];
        Double double0 = new Double(0.0);
        doubleArray0[0] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2018.730716122);
        // Undeclared exception!
        try {
            openMapRealVector0.getSubVector(208, 208);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // index (208)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test175() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
        AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
        boolean boolean0 = openMapRealVector0.equals(abstractRealVector_EntryImpl0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test176() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        openMapRealVector0.setSubVector(0, ((RealVector) (openMapRealVector0)));
        Assert.assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test177() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double double1 = openMapRealVector0.getSparsity();
        Assert.assertEquals(1.0, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test178() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(0.0);
        Assert.assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
        openMapRealVector1.set((-261.9));
        double double1 = openMapRealVector0.dotProduct(((RealVector) (openMapRealVector1)));
        Assert.assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
        Assert.assertEquals(0.0, double1, 0.01);
    }

    @Test(timeout = 4000)
    public void test179() throws Throwable {
        Double[] doubleArray0 = new Double[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(((RealVector) (openMapRealVector0)));
        Assert.assertNotSame(openMapRealVector1, openMapRealVector0);
        Assert.assertTrue(openMapRealVector1.equals(((Object) (openMapRealVector0))));
    }

    @Test(timeout = 4000)
    public void test180() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test181() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        // // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
        // // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
        OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector1)));
        // // Unstable assertion: assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
        // // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
        // // Unstable assertion: assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
        // // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector0);
        // // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
    }

    @Test(timeout = 4000)
    public void test182() throws Throwable {
        double[] doubleArray0 = new double[4];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1976.982);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(1, 1);
        Assert.assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
        Assert.assertEquals(1, openMapRealVector1.getDimension());
    }

    @Test(timeout = 4000)
    public void test183() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(14, 1648.6600953867637);
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(((double) (14)));
        // Undeclared exception!
        try {
            openMapRealVector1.add(((RealVector) (openMapRealVector0)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // 15 != 14
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
        }
    }

    @Test(timeout = 4000)
    public void test184() throws Throwable {
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-3774), (-3774));
        openMapRealVector0.set(1036);
        Assert.assertEquals((-3774), openMapRealVector0.getDimension());
    }

    @Test(timeout = 4000)
    public void test185() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
        // Undeclared exception!
        try {
            openMapRealVector_OpenMapSparseIterator0.remove();
            Assert.fail("Expecting exception: UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // 
            // Not supported
            // 
            EvoAssertions.verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
        }
    }

    @Test(timeout = 4000)
    public void test186() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double[] doubleArray1 = openMapRealVector0.toArray();
        openMapRealVector0.cosine(doubleArray1);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(0.1250253);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        double[] doubleArray1 = openMapRealVector0.toArray();
        {
            openMapRealVector0.ebeMultiply(doubleArray1);
        }
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = doubleArray0[0];
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        {
            openMapRealVector1.ebeMultiply(((RealVector) (openMapRealVector0)));
        }
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Double[] doubleArray0 = new Double[2];
        Double double0 = new Double(1.7976931348623157E308);
        doubleArray0[0] = double0;
        doubleArray0[1] = double0;
        OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, ((double) (doubleArray0[1])));
        {
            openMapRealVector0.ebeDivide(((RealVector) (openMapRealVector0)));
        }
    }
}

