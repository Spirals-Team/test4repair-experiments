/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 21 18:14:25 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(0.0, (-83.0445869867148));
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(986.434, (-1283.0978789));
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.asin();
        Assert.assertEquals((-7.462506362765246E-9), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963193323902, complex2.getReal(), 0.01);
        Assert.assertEquals((-1283.0978789), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals(1.1407411119831583, complex1.getImaginary(), 0.01);
        Assert.assertEquals(7.108631756487063, complex2.getImaginary(), 0.01);
        Assert.assertEquals(3.287189705122783, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(2944.5108, 2944.5108);
        Complex complex1 = complex0.createComplex(2944.5108, 0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2944.5108, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex((-4175.121695537103), (-4175.121695537103));
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-4175.121695537103), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-4175.121695537103), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex((-1.084088932189067), (-1.084088932189067));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-0.21387382781225234), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.1159097496674155), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.084088932189067), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.084088932189067), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex(0.0, 1.0);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.tan();
        Assert.assertEquals(0.809078942327378, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-0.3218189410248222), complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex((-4328.8128863681), 1203.9);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.cos();
        Complex complex4 = complex3.tan();
        Assert.assertEquals((-2.144250941067929E-4), complex4.getImaginary(), 0.01);
        Assert.assertEquals(5.963445282126551E-5, complex4.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex(0.0, 1.0);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.4142135623730951, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex(1018.0, 1018.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.conjugate();
        Complex complex3 = complex2.pow(complex1);
        Complex complex4 = complex3.sqrt1z();
        Assert.assertEquals(0.0, complex4.getReal(), 0.01);
        Assert.assertEquals(1.7191534827815542E23, complex4.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(1181.9243530641, 1181.9243530641);
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3133.9464752061294));
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals((-3133.9464752061294), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.1661031949995144E27, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.848741535676735E26), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-1441.1209), (-1441.1209));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex(1.01, 1.01);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(1.01, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.01), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.01), complex1.getReal(), 0.01);
        Assert.assertEquals(1.01, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), 6.283185307179586);
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(39.49404893054056, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex((-1.084088932189067), (-1.084088932189067));
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals((-1.084088932189067), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.084088932189067), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex(1376.4932226661338, Double.NaN);
        boolean boolean0 = complex0.isNaN();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1376.4932226661338, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1008.1461952332187), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1008.1461952332187), complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), 6.283185307179586);
        double double0 = complex0.getReal();
        Assert.assertEquals((-0.12502530217170715), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex(395.575961859963, 395.575961859963);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(395.575961859963, double0, 0.01);
        Assert.assertEquals(395.575961859963, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex((-0.010714690733195933), (-3686.2760702398));
        double double0 = complex0.getArgument();
        Assert.assertEquals((-1.5707992334384928), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex(3.1171584029263553, 379.09024);
        Complex complex1 = complex0.exp();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(19.50310375068033, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-11.383367129631782), complex1.getReal(), 0.01);
        Assert.assertEquals(379.09024, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex((-2889.10973), (-2889.10973));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-2889.10973), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex(2605.12831, 0.0);
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2605.12831, complex0.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(2484.1, 2484.1);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2484.1, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-1549.0209), 2453.72144508);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(2453.72144508, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex((-0.010714690733195933), (-3686.2760702398));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.conjugate();
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex((-0.010714690733195933), (-3686.2760702398));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-2.7127648756288995E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963260063924), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), 6.283185307179586);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.sinh();
        Complex complex3 = complex2.asin();
        Assert.assertEquals((-4.610482815735672E114), complex2.getReal(), 0.01);
        Assert.assertEquals(1.0873818258577452E115, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex((-0.010714690733195933), (-3686.2760702398));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.add(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex(2605.12831, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), 6.283185307179586);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(8.820673456329128, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex((-649.0), 709.58976);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex(2484.1, 2484.1);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex(317.41, 317.41);
        // Undeclared exception!
        complex0.nthRoot(5292);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex((-292.2883501076919), (-292.2883501076919));
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex((-2239.09835), (-2239.09835));
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-34.884668676847646), complex1.getImaginary(), 0.01);
        Assert.assertEquals(14.449702884842187, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex((-372.6062), (-372.6062));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-372.6062), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-372.6062), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex((-372.6062), (-372.6062));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.log();
        Assert.assertEquals((-372.6062), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-372.6062), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.exp();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex((-0.010714690733195933), (-3686.2760702398));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals((-3686.2760702398), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.010714690733195933), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex(83.0, (-962.5237784697));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-962.5237784697), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(83.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex(1021.0074069246, 1021.0074069246);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1021.0074069246, complex0.getReal(), 0.01);
        Assert.assertEquals(1021.0074069246, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), 6.283185307179586);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.5711142832619167), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-39.462786278174306), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex(986.434, (-1283.0978789));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-1283.0978789), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(986.434, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(1.01, 1.01);
        Complex complex1 = new Complex(0.0, 1.01);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex((-1.084088932189067), (-1.084088932189067));
        double double0 = complex0.abs();
        Assert.assertEquals((-1.084088932189067), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.533133270720345, double0, 0.01);
        Assert.assertEquals((-1.084088932189067), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex((-0.12502530217170715), 6.283185307179586);
        double double0 = complex0.abs();
        Assert.assertEquals((-0.12502530217170715), complex0.getReal(), 0.01);
        Assert.assertEquals(6.284429085489037, double0, 0.01);
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1008.1461952332187), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1008.1461952332187), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex((-292.2883501076919), (-292.2883501076919));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-292.2883501076919), double0, 0.01);
        Assert.assertEquals((-292.2883501076919), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1092.521485127, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex(986.434, (-1283.0978789));
        Complex complex1 = complex0.cosh();
        List<Complex> list0 = complex1.nthRoot(2411);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1283.0978789), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        complex1.nthRoot(1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex((-372.6062), (-372.6062));
        try {
            complex0.nthRoot((-154));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -154
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex((-0.010714690733195933), (-3686.2760702398));
        List<Complex> list0 = complex0.nthRoot(247);
        Assert.assertEquals((-0.010714690733195933), complex0.getReal(), 0.01);
        Assert.assertEquals((-3686.2760702398), complex0.getImaginary(), 0.01);
        Assert.assertEquals(247, list0.size());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex(0.0, (-83.0445869867148));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-6.443779441706351), complex1.getImaginary(), 0.01);
        Assert.assertEquals(6.44377944170635, complex1.getReal(), 0.01);
        Assert.assertEquals((-83.0445869867148), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex(1376.4932226661338, Double.NaN);
        Complex complex1 = complex0.sinh();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1376.4932226661338, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.sin();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex0.pow(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.cosh();
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex((-843.2576113530516), 1063.40495875);
        Complex complex1 = complex0.cosh();
        double double0 = complex1.abs();
        Assert.assertEquals(1063.40495875, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.cos();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(1376.4932226661338, Double.NaN);
        Complex complex1 = complex0.atan();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1376.4932226661338, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.asin();
        Assert.assertEquals(1092.521485127, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-7.9555892439082925), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.7853980404093794), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex(1376.4932226661338, Double.NaN);
        Complex complex1 = complex0.acos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1376.4932226661338, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex(1376.4932226661338, Double.NaN);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(1376.4932226661338, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex(1376.4932226661338, Double.NaN);
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1376.4932226661338, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(1092.521485127, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(1092.521485127, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex(2944.5108, 2944.5108);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.multiply(2944.5108);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(2944.5108, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex((-618.179507675602), (-618.179507675602));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals((-618.179507675602), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-618.179507675602), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex((-618.179507675602), (-618.179507675602));
        Complex complex1 = complex0.multiply(0.2908698262757211);
        Assert.assertEquals((-179.80976600481318), complex1.getReal(), 0.01);
        Assert.assertEquals((-179.80976600481318), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-618.179507675602), complex0.getReal(), 0.01);
        Assert.assertEquals((-618.179507675602), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex(61.363, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(61.363, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(567.2624596, 567.2624596);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(567.2624596, complex0.getReal(), 0.01);
        Assert.assertEquals(567.2624596, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex(1376.4932226661338, Double.NaN);
        complex0.hashCode();
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(1376.4932226661338, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        complex0.hashCode();
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex((-1.084088932189067), (-1.084088932189067));
        Complex complex1 = complex0.createComplex((-1.084088932189067), (-1.084088932189067));
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-1.084088932189067), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.084088932189067), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex((-618.179507675602), (-618.179507675602));
        Complex complex1 = complex0.createComplex((-618.179507675602), 0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-618.179507675602), complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex((-0.010714690733195933), (-3686.2760702398));
        boolean boolean0 = complex0.equals(((Object) (null)));
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3686.2760702398), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.010714690733195933), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex((-4175.121695537103), (-4175.121695537103));
        Complex complex1 = complex0.sqrt1z();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(4175.121755415597, complex1.getReal(), 0.01);
        Assert.assertEquals((-4175.121695537103), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-4175.121635658609), complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(567.2624596, 567.2624596);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(567.2624596, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(567.2624596, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex2.tan();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals((-1008.1461952332187), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        double double0 = complex0.abs();
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.createComplex((-793.0), Double.POSITIVE_INFINITY);
        Assert.assertEquals((-793.0), complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(1092.521485127, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        double double0 = complex0.getArgument();
        Assert.assertEquals(0.7853981633974483, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        complex0.getField();
        Assert.assertEquals((-1008.1461952332187), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1008.1461952332187), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex((-1149.0), (-1149.0));
        complex0.pow(complex0);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        String string0 = complex0.toString();
        Assert.assertEquals("(-1008.1461952332187, -1008.1461952332187)", string0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1008.1461952332187), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1008.1461952332187), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = new Complex((-1008.1461952332187), (-1008.1461952332187));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex(1092.521485127, 1092.521485127);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.add(complex1);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(1092.521485127, complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(complex2.isNaN())
        Assert.assertTrue(complex2.isNaN());
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex1.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1092.521485127, complex0.getReal(), 0.01);
    }
}

