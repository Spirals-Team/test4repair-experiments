/**
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 20:10:58 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(2271.64237252, 0.0);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(1650.31974957209, 1210.85241042614);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.sqrt();
        Complex complex3 = complex2.pow(complex0);
        Complex complex4 = complex1.log();
        boolean boolean0 = complex4.equals(complex3);
        Assert.assertEquals((-2.356194490192345), complex4.getImaginary(), 0.01);
        Assert.assertFalse(complex3.equals(((Object) (complex4))));
        Assert.assertFalse(boolean0);
        Assert.assertEquals(14.081202353455424, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertFalse(complex3.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex(3910.8796682, 3910.8796682);
        Complex complex1 = complex0.exp();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3910.8796682, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(0.0, 197.23932722247);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex0.add(complex1);
        Complex complex3 = complex2.cosh();
        Complex complex4 = complex3.tanh();
        Assert.assertEquals(0.0, complex4.getImaginary(), 0.01);
        Assert.assertEquals((-0.501650557681051), complex4.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex(1093.14, 1.4456468917292502E-16);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.4456468917292502E-16, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.4130919312951378E-16, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1093.14, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.13505571900281016), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3663.2244621));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.1274257622502683), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.12812224485624213), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex((-1980.15), (-1980.15));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex((-1980.15), (-1980.15));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3960.3), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex(2271.64237252, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(2271.642152414921, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex(1316.9055203222601, 1316.9055203222601);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.log();
        Complex complex3 = complex2.sqrt();
        Assert.assertEquals((-2.356194490192345), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals((-658.45295), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(0.7853981633974483, (-2377.15038));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(0.785398093903583, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-2788.2950722), 4094.389628495519);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.negate();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex(0.7853981633974483, (-2377.15038));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2377.15038), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-5650843.31228387), complex1.getReal(), 0.01);
        Assert.assertEquals((-3734.0190851430925), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-658.45295), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-658.45295), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.multiply(0.19999999999923582);
        Assert.assertEquals((-658.45295), complex0.getReal(), 0.01);
        Assert.assertEquals((-658.45295), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-131.6905899994968), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-131.6905899994968), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex((-1247.634647007482), 0.0);
        Complex complex1 = complex0.multiply((-1247.634647007482));
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1247.634647007482), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1556592.2124134842, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex(2115.369103482, 2115.369103482);
        Complex complex1 = complex0.tanh();
        boolean boolean0 = complex1.isNaN();
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(2115.369103482, complex0.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(2115.369103482, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex(1093.14, (-1071.9998604829));
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(1093.14, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1071.9998604829), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex(1.0, 739.408806578856);
        double double0 = complex0.getReal();
        Assert.assertEquals(739.408806578856, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex((-2016.67152165), 0.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2016.67152165), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex((-1980.15), (-1980.15));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1980.15), complex0.getReal(), 0.01);
        Assert.assertEquals((-1980.15), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex(0.7853981633974483, (-2377.15038));
        Complex complex1 = complex0.exp();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2377.15038), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.1192382915266204), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.8862086384453665), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply((-658.45295));
        Complex complex3 = complex2.exp();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertEquals(8.614598073303356E287, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals((-658.45295), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex(2.0, 0.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-4.805995923444762), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(0.0, 197.23932722247);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(0.05034869818444843, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.05034869818444843), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-2016.67152165), 0.0);
        Complex complex1 = complex0.createComplex((-2016.67152165), (-2016.67152165));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2016.67152165), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-2016.67152165), complex1.getReal(), 0.01);
        Assert.assertEquals((-2016.67152165), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex((-1247.634647007482), 0.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.4456360819194132, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(0.7853981633974483, (-2377.15038));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.cos();
        Assert.assertEquals((-2377.15038), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.785398093903583, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.6761920963601479), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.746958858327179), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex((-2788.2950722), 4094.389628495519);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-1.3083088280344642E285), complex1.getReal(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-1.5700369708041506), complex1.getReal(), 0.01);
        Assert.assertEquals((-7.593554069319658E-4), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex(1650.31974957209, (-242.1498));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.asin();
        Assert.assertEquals((-242.1498), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1650.31974957209, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-6.076823389462743E104), complex1.getReal(), 0.01);
        Assert.assertEquals(4.044085746794395E104, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex((-1815.19427357847), (-0.16666666666666666));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-8.197094887656126), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex((-215.87409286696), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-431.74818573392), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-215.87409286696), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex((-2788.2950722), 4094.389628495519);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-9.201026479992924), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex((-1815.19427357847), (-0.16666666666666666));
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex(1834.0, 2.0);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, 610.684085004);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex((-1815.19427357847), (-0.16666666666666666));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-42.60509684772704), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.16666666666666666), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0019559475156498587, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex((-2016.67152165), 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-984.2));
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.log();
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-984.2), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.exp();
        Assert.assertEquals((-658.45295), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-658.45295), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-1293.0960514666), (-1293.0960514666));
        Complex complex1 = complex0.exp();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1293.0960514666), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex((-2016.67152165), 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex((-215.87409286696), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(215.87409286696, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-215.87409286696), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex(1093.14, (-1071.9998604829));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1071.9998604829), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(1093.14, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex((-2788.2950722), 4094.389628495519);
        Complex complex1 = new Complex((-2788.2950722), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2788.2950722), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex((-215.87409286696), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-215.87409286696), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex(2476.2578, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2476.2578, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3663.2244621));
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-658.45295), complex0.getReal(), 0.01);
        Assert.assertEquals((-658.45295), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply((-658.45295));
        double double0 = complex2.abs();
        Assert.assertEquals(4.395627182612438E285, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.3083088280344642E285), complex1.getReal(), 0.01);
        Assert.assertEquals(3.0197954748075465E288, double0, 0.01);
        Assert.assertEquals(8.614598073303356E287, complex2.getReal(), 0.01);
        Assert.assertEquals((-2.8943136854913487E288), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-984.2));
        double double0 = complex0.abs();
        Assert.assertEquals((-984.2), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        double double0 = complex0.abs();
        Assert.assertEquals((-658.45295), complex0.getReal(), 0.01);
        Assert.assertEquals((-658.45295), complex0.getImaginary(), 0.01);
        Assert.assertEquals(931.1930920745734, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex((-1980.15), (-1980.15));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals((-1980.15), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1980.15), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex((-2788.2950722), 4094.389628495519);
        double double0 = complex0.getImaginary();
        Assert.assertEquals((-2788.2950722), complex0.getReal(), 0.01);
        Assert.assertEquals(4094.389628495519, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex(1093.14, (-1071.9998604829));
        Complex complex1 = complex0.add(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2186.28, complex1.getReal(), 0.01);
        Assert.assertEquals(1093.14, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2143.9997209658), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1071.9998604829), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex((-2788.2950722), 4094.389628495519);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(4094.389628495519, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2788.2950722), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        List<Complex> list0 = complex0.nthRoot(17);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-984.2));
        Complex complex1 = complex0.acos();
        complex1.nthRoot(285);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(13.07, 13.07);
        try {
            complex0.nthRoot((-2620));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -2,620
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        List<Complex> list0 = complex0.nthRoot(164);
        Assert.assertEquals(1618.221655741048, complex0.getReal(), 0.01);
        Assert.assertEquals(164, list0.size());
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(223.202, Double.NaN);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(223.202, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.tan();
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        Complex complex1 = complex0.createComplex(0.0, (-658.45295));
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(18.14459905867308, complex2.getReal(), 0.01);
        Assert.assertEquals((-658.45295), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-18.14459905867308), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.divide(complex1);
        Complex complex3 = complex2.sqrt();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1618.221655741048, complex0.getReal(), 0.01);
        Assert.assertEquals(1210.85241042614, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.cosh();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.cos();
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(0.7853981633974483, (-2377.15038));
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-2377.15038), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex(1316.9055203222601, 1316.9055203222601);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1316.9055203222601, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex(1316.9055203222601, 1316.9055203222601);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.asin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.subtract(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex((-2788.2950722), 4094.389628495519);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex2.negate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-2788.2950722), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(2115.369103482, 2115.369103482);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(2115.369103482, complex0.getReal(), 0.01);
        Assert.assertEquals(2115.369103482, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex((-215.87409286696), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-215.87409286696), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(1316.9055203222601, 1316.9055203222601);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(1316.9055203222601);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1316.9055203222601, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(1316.9055203222601, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1618.221655741048, complex0.getReal(), 0.01);
        Assert.assertEquals(1210.85241042614, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex((-215.87409286696), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.subtract(complex0);
        Complex complex2 = complex1.multiply((-215.87409286696));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1210.85241042614, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1618.221655741048, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex(1093.14, (-1071.9998604829));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex((-658.45295), (-658.45295));
        complex0.hashCode();
        Assert.assertEquals((-658.45295), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-658.45295), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.cosh();
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(1210.85241042614, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1618.221655741048, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.sqrt();
        Complex complex3 = complex2.pow(complex0);
        Complex complex4 = complex1.log();
        boolean boolean0 = complex4.equals(complex3);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex4.getImaginary(), 0.01);
        Assert.assertEquals(14.192751120063305, complex2.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(1316.9055203222601, 1316.9055203222601);
        boolean boolean0 = complex0.equals("@~oJ(@|~'mjQM+4dT6}");
        Assert.assertEquals(1316.9055203222601, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1316.9055203222601, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertEquals(1618.221655741048, complex0.getReal(), 0.01);
        Assert.assertEquals(1210.85241042614, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(1618.221655741048, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1210.85241042614, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.acos();
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex(1.5, 0.0);
        Complex complex1 = complex0.createComplex(0.0, (-1.0));
        Complex complex2 = complex1.atan();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-984.2));
        Complex complex2 = complex1.acos();
        Complex complex3 = complex0.divide(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals((-984.2), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(1316.9055203222601, 1316.9055203222601);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex2.conjugate();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex((-2788.2950722), 4094.389628495519);
        Complex complex1 = complex0.conjugate();
        double double0 = complex1.getArgument();
        Assert.assertEquals((-2.168659099905634), double0, 0.01);
        Assert.assertEquals((-2788.2950722), complex0.getReal(), 0.01);
        Assert.assertEquals(4094.389628495519, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex((-215.87409286696), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tan();
        double double0 = complex1.abs();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-215.87409286696), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex(1316.9055203222601, 1316.9055203222601);
        Complex complex1 = complex0.tan();
        complex1.hashCode();
        Assert.assertEquals(1316.9055203222601, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1316.9055203222601, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.6423873209155068, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        complex0.getField();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1210.85241042614, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1618.221655741048, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        Complex complex1 = complex0.pow(complex0);
        complex0.divide(complex1);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals("(1618.221655741048, 1210.85241042614)", string0);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = new Complex(1.5, 0.0);
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.5, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = new Complex(1618.221655741048, 1210.85241042614);
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(1618.221655741048, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(1210.85241042614, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex((-215.87409286696), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.add(complex0);
        // AssertFixer: old assertion Assert.assertEquals((-215.87409286696), complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(complex0.isInfinite())
        Assert.assertTrue(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex2.isInfinite())
        Assert.assertFalse(complex2.isInfinite());
        // AssertFixer: old assertion Assert.assertTrue(complex1.isNaN())
        Assert.assertTrue(complex1.isNaN());
        // AssertFixer: old assertion Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-215.87409286696), complex0.getReal(), 0.01)
        Assert.assertEquals(-215.87409286696, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }
}

