/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 12:49:49 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex(1378.8694244415383, 1378.8694244415383);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(1.176342548272881E-8, 4483.8964);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(4483.8964, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.7470965472593506), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.176342548272881E-8, complex0.getReal(), 0.01);
        Assert.assertEquals((-7.81933174070587E-9), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex(0.0, (-415.7));
        Complex complex1 = complex0.tanh();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals((-1.5913922768526518), complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-415.7), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
        Complex complex1 = complex0.acos();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(16.505496289797946, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3.843414520539313), complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex((-0.16624882440418567), 0.0);
        Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
        Complex complex2 = complex1.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.16624882440418567), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.1677975811131024), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex((-0.16624882440418567), 0.0);
        Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
        Complex complex2 = complex1.add(complex0);
        Complex complex3 = complex2.tanh();
        Assert.assertFalse(complex3.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.16924287644892863), complex3.getReal(), 0.01);
        Assert.assertEquals((-0.16311937692094433), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
        Complex complex1 = complex0.multiply(16.505496289797946);
        Complex complex2 = complex1.tan();
        Assert.assertEquals(272.43140777253376, complex1.getReal(), 0.01);
        Assert.assertEquals(1.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-4.5820477443513123E-237), complex2.getReal(), 0.01);
        Assert.assertEquals(272.43140777253376, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex((-2353.58512898), (-2353.58512898));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex((-3.141592653589793), (-151.860599));
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-151.860599), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(6.104224738447093E-148, complex1.getReal(), 0.01);
        Assert.assertEquals((-3.141592653589793), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex((-2002.146749), (-2002.146749));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals((-1479.3435846704072), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2958.6876763223618), complex2.getReal(), 0.01);
        Assert.assertEquals((-1.689938428626192E-4), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-2958.6875073285), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(117.428065447474, (-4340.33));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(1.0858177101129363E50, complex1.getReal(), 0.01);
        Assert.assertEquals(4.861377954416558E50, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
        Complex complex1 = complex0.multiply(16.505496289797946);
        Complex complex2 = complex1.acos();
        Complex complex3 = complex1.pow(complex2);
        Assert.assertEquals((-18920.093790987376), complex3.getImaginary(), 0.01);
        Assert.assertEquals(6063.624922281846, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex(1059.46, 1059.46);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.negate();
        Assert.assertEquals((-8.410063161208774), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex((-2002.146749), (-2002.146749));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(8017183.209062538, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex((-1463.942583486), (-1463.942583486));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-0.4999999995343387), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-4286255.775487358), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex((-0.16666666666666666), (-0.16666666666666666));
        Complex complex1 = complex0.multiply(0.9825467094779015);
        Assert.assertEquals((-0.16666666666666666), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.16666666666666666), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.16375778491298357), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.16375778491298357), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex(0.7685319114506848, 0.7685319114506848);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.log();
        Assert.assertEquals(0.0, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.7685319114506848, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex((-0.16624882440418567), 0.0);
        Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
        Complex complex2 = complex1.log();
        Assert.assertEquals((-1.7942696707241934), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.16624882440418567), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex(117.428065447474, (-4340.33));
        Complex complex1 = complex0.tan();
        boolean boolean0 = complex1.isNaN();
        Assert.assertEquals(117.428065447474, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-4340.33), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex(1059.46, 1059.46);
        Complex complex1 = complex0.cosh();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1059.46, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex((-0.16624882440418567), 0.0);
        Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
        double double0 = complex1.getReal();
        Assert.assertEquals((-0.16624882440418567), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex(356.764836357297, 356.764836357297);
        Complex complex1 = complex0.sin();
        double double0 = complex1.getReal();
        Assert.assertEquals(356.764836357297, complex0.getReal(), 0.01);
        Assert.assertEquals(8.417807347950513E153, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.2829148964548916E154), double0, 0.01);
        Assert.assertEquals(356.764836357297, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex(117.428065447474, (-4340.33));
        Complex complex1 = complex0.cosh();
        double double0 = complex1.getImaginary();
        Assert.assertEquals((-4340.33), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0858177101129363E50, complex1.getReal(), 0.01);
        Assert.assertEquals(4.861377954416558E50, double0, 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        double double0 = complex0.getArgument();
        Assert.assertEquals((-1.5707963267948966), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(393.1389, 393.1389);
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-4.950184916981081E170), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(393.1389, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2.329351969759455E170), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(1144.7, 1144.7);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals((-126.66700123126184), complex2.getReal(), 0.01);
        Assert.assertEquals(153.93328536827542, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex((-1986.65985), (-1986.65985));
        Complex complex1 = complex0.createComplex((-1986.65985), (-1986.65985));
        Assert.assertEquals((-1986.65985), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1986.65985), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex(0.0, (-711.42418));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.cos();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(711.4248828152361, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(1059.46, 1059.46);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex(0.0, (-0.1428571423679182));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.14384103572647358), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex((-0.16666666666666666), (-0.16666666666666666));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-0.16348161685166604), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.1696463072270223), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex(117.428065447474, (-4340.33));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0858177101129363E50, complex1.getReal(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
        Assert.assertEquals(4.861377954416558E50, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex((-2353.58512898), (-2353.58512898));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.asin();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex((-0.16666666666666666), (-0.16666666666666666));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.16508619852699113), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.add(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-3.141592653589793), (-151.860599));
        Complex complex1 = complex0.createComplex(0.0, 151.89309113004413);
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-5.716334941810854), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex((-595.5985), (-595.5985));
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex((-3059.4), 2.4384203044354907E-8);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex((-2800.002373177), (-2800.002373177));
        complex0.nthRoot(5104);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex((-1158.5577032665879), (-1158.5577032665879));
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(427.9, 427.9);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-33.511356284101666), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2246.022), complex0.getImaginary(), 0.01);
        Assert.assertEquals(33.51135628410166, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.sqrt();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex((-1124.64701344312), (-1124.64701344312));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-1124.64701344312), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-36.84520370914495), complex1.getImaginary(), 0.01);
        Assert.assertEquals(15.261783084727302, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.acos();
        Complex complex3 = complex2.log();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(466.79473470918, complex1.getReal(), 0.01);
        Assert.assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-1463.942583486), (-1463.942583486));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals((-1463.942583486), complex0.getImaginary(), 0.01);
        Assert.assertEquals(4286255.775487329, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(466.79473470918, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(1059.46, 1059.46);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.multiply(1059.46);
        Complex complex3 = complex2.cos();
        Complex complex4 = complex1.divide(complex3);
        Assert.assertTrue(complex3.equals(((Object) (complex1))));
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1122455.4916, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex4.isNaN());
        Assert.assertEquals(1059.46, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex((-0.16624882440418567), 0.0);
        Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.16624882440418567), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.acos();
        double double0 = complex1.abs();
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex(2268.2777592243538, 2268.2777592243538);
        Complex complex1 = complex0.sinh();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(2268.2777592243538, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(2268.2777592243538, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex((-244.16537192145), 1501.924058);
        double double0 = complex0.abs();
        Assert.assertEquals(1501.924058, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-244.16537192145), complex0.getReal(), 0.01);
        Assert.assertEquals(1521.6414179578342, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex((-244.16537192145), Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-244.16537192145), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex(1930.016, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1930.016, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex((-0.16624882440418567), 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3.141592653589793, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex((-2002.146749), (-2002.146749));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals((-2002.146749), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2002.146749), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex(117.428065447474, (-4340.33));
        double double0 = complex0.getImaginary();
        Assert.assertEquals(117.428065447474, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-4340.33), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex(117.428065447474, (-4340.33));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(234.856130894948, complex1.getReal(), 0.01);
        Assert.assertEquals((-8680.66), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-4340.33), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(117.428065447474, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(3362.225, (-73.76));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3362.225, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-73.76), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
        complex0.nthRoot(1312145731);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
        Complex complex2 = complex1.cos();
        List<Complex> list0 = complex2.nthRoot(5);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(466.79473470918, complex1.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(0.7685319114506848, 0.7685319114506848);
        try {
            complex0.nthRoot((-2912));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -2,912
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.tanh();
        Assert.assertTrue(complex2.isNaN());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(1059.46, 1059.46);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(1059.46, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1059.46, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.tan();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals((-1479.3435846704072), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1479.34375366425, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(0.7685319114506848, 0.7685319114506848);
        Complex complex1 = complex0.multiply(0.0);
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.sqrt1z();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex1))));
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.sinh();
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
        Complex complex2 = complex1.sin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(466.79473470918, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.exp();
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(466.79473470918, complex1.getReal(), 0.01);
        Assert.assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
        Complex complex2 = complex1.atan();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(466.79473470918, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.asin();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.acos();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.sqrt1z();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.subtract(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.negate();
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.createComplex(1.5707963267948966, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply((-0.040448696321584876));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex(1059.46, 1059.46);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.multiply(1025.2519);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1059.46, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1479.34375366425), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.multiply(6.283185307179586);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.createComplex(1.5707963267948966, Double.POSITIVE_INFINITY);
        complex1.pow(complex2);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex((-1463.942583486), (-1463.942583486));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex0.multiply(complex2);
        Assert.assertEquals((-1463.9424127142854), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1463.942583486), complex0.getReal(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.createComplex(1.5707963267948966, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex(1059.46, 1059.46);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex1.multiply(complex2);
        Assert.assertEquals(1059.46, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        complex2.hashCode();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        complex0.hashCode();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-2246.022), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(3362.225, (-73.76));
        boolean boolean0 = complex0.equals("(3362.225, -73.76)");
        Assert.assertEquals((-73.76), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(3362.225, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex(2268.2777592243538, 2268.2777592243538);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2268.2777592243538, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(2268.2777592243538, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
        Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
        Assert.assertEquals(466.79473470918, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.acos();
        Complex complex3 = complex2.conjugate();
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(16.505496289797946, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(16.505496289797946, complex0.getImaginary(), 0.01);
        Assert.assertEquals(16.505496289797946, complex1.getReal(), 0.01);
        Assert.assertEquals((-16.505496289797946), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
        Complex complex1 = complex0.multiply(16.505496289797946);
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex2.asin();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-6.529563616124844E117), complex2.getReal(), 0.01);
        Assert.assertEquals(8.014636705007629E117, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.acos();
        double double0 = complex2.abs();
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex1.acos();
        boolean boolean0 = complex3.equals(complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        List<Complex> list0 = complex0.nthRoot(6);
        Assert.assertEquals((-2246.022), complex0.getImaginary(), 0.01);
        Assert.assertEquals(6, list0.size());
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
        complex0.getField();
        Assert.assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
        String string0 = complex0.toString();
        Assert.assertEquals("(16.505496289797946, 16.505496289797946)", string0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        Complex complex1 = complex0.acos();
        complex0.equals(complex1);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2246.022), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2246.022));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-2246.022), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex((-244.16537192145), 1501.924058);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.add(complex1);
        // AssertFixer: old assertion Assert.assertEquals((-244.16537192145), complex0.getReal(), 0.01)
        Assert.assertEquals(-244.16537192145, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-244.16537192145), complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1501.924058, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(complex2.isNaN())
        Assert.assertTrue(complex2.isNaN());
    }
}

