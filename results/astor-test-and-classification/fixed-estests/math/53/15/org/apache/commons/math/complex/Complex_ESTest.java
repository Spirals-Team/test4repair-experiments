/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 21:55:33 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex((-3642.71735795258), (-1615.5240936594));
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.sqrt();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-2148.4099116628), (-1482.7538));
        complex0.hashCode();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2148.4099116628), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1482.7538), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(3393.4708047914205, 3393.4708047914205);
        Complex complex1 = complex0.conjugate();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(3393.4708047914205, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(3393.4708047914205, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex((-7.44321345601866E-11), (-7.44321345601866E-11));
        Complex complex1 = complex0.tanh();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-7.443212712843206E-11), complex1.getReal(), 0.01);
        Assert.assertEquals((-7.44321345601866E-11), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.sin();
        Complex complex3 = complex2.atan();
        Assert.assertEquals((-5.551115123125783E-17), complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.7852060989154421, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(36.071404402473284, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex((-2148.4099116628), (-1482.7538));
        Complex complex1 = complex0.multiply((-1482.7538));
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2200041.58521444), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-3187711.3703873437), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(1.2113633229846195, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex(1717.918717204, 1717.918717204);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1717.918717204, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1717.918717204, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(1295.5770228966426, 1295.5770228966426);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals((-0.2998642008104964), complex2.getReal(), 0.01);
        Assert.assertEquals((-1.2431848879455445), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex((-736.757960575), (-736.757960575));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.sin();
        Assert.assertEquals((-5.83E-322), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-5.83E-322), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.07E-320), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex((-1111.19), (-1111.19));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex((-71.3), (-71.3));
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals((-1.0190441905739783E-111), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex((-2327.4), 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2327.4, complex1.getReal(), 0.01);
        Assert.assertEquals((-2327.4), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex((-7.44321345601866E-11), (-7.44321345601866E-11));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(1.1080284757210095E-20, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-5.531613540578604E-28), complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex((-486.6981705292), (-1670.6787074276));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(2.6484075515689886E-209, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-6.928464841397778E-209), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2218.26));
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-2218.26), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex((-1524.598), (-1524.598));
        Complex complex1 = complex0.multiply(3394.4770311421926);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1524.598), complex0.getReal(), 0.01);
        Assert.assertEquals((-1524.598), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-5175212.892725324), complex1.getReal(), 0.01);
        Assert.assertEquals((-5175212.892725324), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-1.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex((-2247.4182262362224), (-2247.4182262362224));
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(8.064110971641785, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.00745193919940076), complex2.getReal(), 0.01);
        Assert.assertEquals((-1.0165112982396414), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.isNaN();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex(2144.184, 6.283185307179586);
        Complex complex1 = complex0.exp();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        Complex complex1 = complex0.atan();
        double double0 = complex1.getReal();
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex((-3064.8510249999995), (-3064.8510249999995));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3064.8510249999995), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3064.8510249999995), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3673.802));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3673.802), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex((-7.44321345601866E-11), (-7.44321345601866E-11));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2.356194490192345), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex((-2247.4182262362224), (-2247.4182262362224));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-2247.4182262362224), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
        Complex complex2 = complex0.log();
        Complex complex3 = complex2.divide(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertEquals(6.283185307179586, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2218.26));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals((-0.0037856813969487156), complex2.getReal(), 0.01);
        Assert.assertEquals(7.08120926669956E-4, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.4779120939483494, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-968.76));
        Assert.assertEquals((-968.76), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex((-1524.598), (-1524.598));
        Complex complex1 = complex0.createComplex((-1524.598), (-1524.598));
        Assert.assertEquals((-1524.598), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-1524.598), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex(3065.851025, 3065.851025);
        Complex complex1 = complex0.cosh();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3065.851025, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex((-71.3), (-71.3));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.atan();
        Complex complex3 = complex2.pow(complex1);
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertEquals((-0.007012392801405994), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.5637834741816419), complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.conjugate();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-1548.1250999), (-1548.1250999));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex((-2638.2574192), 753.6);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex(2144.184, 6.283185307179586);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.exp();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex((-2148.4099116628), (-1482.7538));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1482.7538), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2148.4099116628), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex((-1111.19), (-1111.19));
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1111.19), complex0.getReal(), 0.01);
        Assert.assertEquals(1111.19, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1111.19, complex1.getReal(), 0.01);
        Assert.assertEquals((-1111.19), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(1.5707963267948966, 0.0);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
        Complex complex2 = complex1.divide(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex(1295.5770228966426, 1295.5770228966426);
        double double0 = complex0.abs();
        Assert.assertEquals(1295.5770228966426, complex0.getReal(), 0.01);
        Assert.assertEquals(1295.5770228966426, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1832.22259687939, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex(0.0, (-1.0));
        Complex complex1 = complex0.atan();
        double double0 = complex1.abs();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, (-2038.98256));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2038.98256), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex(3189.5226487728905, Double.NaN);
        Assert.assertEquals(3189.5226487728905, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex((-2247.4182262362224), (-2247.4182262362224));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2247.4182262362224), complex0.getReal(), 0.01);
        Assert.assertEquals((-2247.4182262362224), complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex((-1548.1250999), (-1548.1250999));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-3096.2501998), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1548.1250999), complex0.getReal(), 0.01);
        Assert.assertEquals((-1548.1250999), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3096.2501998), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        double double0 = complex0.getReal();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        List<Complex> list0 = complex1.nthRoot(19);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        List<Complex> list0 = complex1.nthRoot(126);
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex((-486.6981705292), (-1670.6787074276));
        try {
            complex0.nthRoot((-1290));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -1,290
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex((-1548.1250999), (-1548.1250999));
        List<Complex> list0 = complex0.nthRoot(1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals((-1548.1250999), complex0.getReal(), 0.01);
        Assert.assertEquals((-1548.1250999), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.tanh();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex((-736.757960575), (-736.757960575));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.tanh();
        Complex complex4 = complex3.sqrt();
        Assert.assertEquals((-6.131089734566143E-81), complex4.getImaginary(), 0.01);
        Assert.assertEquals((-7.518052266660468E-161), complex3.getImaginary(), 0.01);
        Assert.assertEquals(7.117177102092034E-161, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex((-1524.598), (-1524.598));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1524.598), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-1524.598), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex((-1524.598), (-1524.598));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals((-1524.598), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-1524.598), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        Complex complex1 = complex0.createComplex(0.7853981633974483, Double.NaN);
        Complex complex2 = complex1.sin();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.pow(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.cosh();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.negate();
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.cos();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex((-1548.1250999), (-1548.1250999));
        Complex complex1 = complex0.cos();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1548.1250999), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex((-1524.598), (-1524.598));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.asin();
        Assert.assertEquals((-1524.598), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-1524.598), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex((-486.6981705292), (-1670.6787074276));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.2834723674647304), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex((-1548.1250999), (-1548.1250999));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-1548.1250999), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1548.1250999), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex((-1548.1250999), (-1548.1250999));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1548.1250999), complex0.getReal(), 0.01);
        Assert.assertEquals((-1548.1250999), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.subtract(complex1);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex((-1524.598), (-1524.598));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1524.598), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals((-1524.598), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex((-1548.1250999), (-1548.1250999));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply(0.0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1548.1250999), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1548.1250999), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply((-968.76));
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(complex0);
        Complex complex3 = complex2.multiply((-135.64051725936));
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex((-1548.1250999), (-1548.1250999));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1548.1250999), complex0.getReal(), 0.01);
        Assert.assertEquals((-1548.1250999), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        complex1.hashCode();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex((-2385.92880032), (-2385.92880032));
        Complex complex1 = complex0.conjugate();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-2385.92880032), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-2385.92880032), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex((-2385.92880032), (-2385.92880032));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.isNaN());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(complex0);
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex((-3642.71735795258), (-1615.5240936594));
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1615.5240936594), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3642.71735795258), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex((-2385.92880032), (-2385.92880032));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-2385.92880032), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2385.92880032), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex1.divide(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex(3059.0924277839, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(3059.0924277839, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex((-2385.92880032), (-2385.92880032));
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-1.5705867647934775), complex1.getReal(), 0.01);
        Assert.assertEquals((-2.095619891482722E-4), complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(2144.184, 6.283185307179586);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.conjugate();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex((-486.6981705292), (-1670.6787074276));
        double double0 = complex0.abs();
        Assert.assertEquals((-486.6981705292), complex0.getReal(), 0.01);
        Assert.assertEquals((-1670.6787074276), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1740.1271369208707, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        complex0.getArgument();
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        complex0.getField();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
        String string0 = complex0.toString();
        Assert.assertEquals("(0.0, Infinity)", string0);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = new Complex((-71.3), (-71.3));
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-71.3), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-71.3), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2218.26));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.add(complex0);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex2.isInfinite())
        Assert.assertFalse(complex2.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals((-2218.26), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-2218.26, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }
}

