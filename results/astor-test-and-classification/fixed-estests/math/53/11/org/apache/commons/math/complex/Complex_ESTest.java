/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 19:46:20 GMT 2017
 */


package org.apache.commons.math.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = new Complex((-0.5), (-0.5));
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex((-1333.17564), (-1333.17564));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(0.3230612888830892, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.2295969465154055), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-1333.17564), (-1333.17564));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals((-0.7853980930683137), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.4926260514839543), complex2.getReal(), 0.01);
        Assert.assertEquals(0.8063624998137486, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex((-3179.01638), 283.27857916);
        complex0.hashCode();
        Assert.assertEquals(283.27857916, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3179.01638), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex(1500.70815, 737.4);
        Complex complex1 = complex0.sin();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1500.70815, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(737.4, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2096.929660675915));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.tan();
        Complex complex3 = complex2.tanh();
        Assert.assertEquals(1.392557480936934E-23, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertEquals(1.557408114173941, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex((-0.5), (-0.5));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-0.40389645531602575), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.5), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.5640831412674985), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.5), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.tan();
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-32.8941112429266), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3.550804697660044E-29), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = new Complex((-0.5), (-0.5));
        Complex complex1 = complex0.asin();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(0.030637530952517866, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.04772155284880936), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-3561.14), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex((-1284.412132), 0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1284.4117427167914, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex((-2424.428), (-2424.428));
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals((-2424.4278968828958), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2424.428), complex0.getImaginary(), 0.01);
        Assert.assertEquals(2424.4281031171085, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = new Complex(4053.28506, 1264.255701448);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.pow(complex1);
        Assert.assertEquals((-2.1502015578225105E252), complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(4053.28506, 1264.255701448);
        Complex complex1 = complex0.pow(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex(2621.7594264076, 3293.514619285);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(2621.7594264076, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = new Complex((-1284.412132), 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(1284.412132, complex1.getReal(), 0.01);
        Assert.assertEquals((-1284.412132), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = new Complex(0.0, 1449.78165106152);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(1449.78165106152, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2101866.835754667), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply(3.834E-20);
        Assert.assertEquals(3.834E-20, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex((-0.5), (-0.5));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.5), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.3465735902799726), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(2380.073493, 2380.073493);
        Complex complex1 = complex0.tanh();
        boolean boolean0 = complex1.isNaN();
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = new Complex((-3179.01638), 283.27857916);
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3179.01638), complex0.getReal(), 0.01);
        Assert.assertEquals(283.27857916, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
        complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex((-0.5), (-0.5));
        Complex complex1 = complex0.cos();
        double double0 = complex1.getReal();
        Assert.assertEquals(0.9895848833999199, double0, 0.01);
        Assert.assertEquals((-0.5), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.24982639750046154), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = new Complex(1859.8607, 0.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1859.8607, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex((-635.97008), 2014.254278335702);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(2014.254278335702, double0, 0.01);
        Assert.assertEquals((-635.97008), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = new Complex((-1333.17564), (-1333.17564));
        double double0 = complex0.getArgument();
        Assert.assertEquals((-2.356194490192345), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = new Complex(1243.54, 487.6613714487742);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.divide(complex1);
        Complex complex3 = complex2.cos();
        Complex complex4 = complex3.log();
        Assert.assertEquals((-0.0), complex4.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(487.6613714487742, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex4.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.exp();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
        Complex complex1 = complex0.createComplex(0.0, 11);
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.exp();
        Assert.assertEquals((-7.2974580838740115), complex3.getReal(), 0.01);
        Assert.assertEquals(7.459594594186299, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(168.04744706711, 168.04744706711);
        Complex complex1 = complex0.createComplex(778.7363845, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = new Complex(0.0, (-2096.929660675915));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(7.49093475213934E-4, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.003977900108516477), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
        Complex complex1 = complex0.createComplex(0.0, 11);
        Complex complex2 = complex1.sqrt();
        Complex complex3 = complex2.divide(complex1);
        Assert.assertEquals(0.21320071635561044, complex3.getReal(), 0.01);
        Assert.assertEquals((-0.21320071635561044), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-1284.412132), 0.0);
        Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
        Assert.assertEquals((-1284.412132), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = new Complex((-5677.017907286383), (-5677.017907286383));
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-5677.017907286383), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(3.940510424527919E-20, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex((-1284.412132), 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-1284.412132), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1284.412132), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex((-254.9876443586), (-254.9876443586));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.asin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2.3848657497884143E110, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-254.9876443586), complex0.getReal(), 0.01);
        Assert.assertEquals(1.3611779088202522E110, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = new Complex((-5768.833905021544), (-5768.833905021544));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.add(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.acos();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex(0.0, 856.035191307);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        Complex complex2 = complex1.acos();
        Complex complex3 = complex2.acos();
        Assert.assertEquals(1.0232274785475506, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex(1115.62200970879, 1115.62200970879);
        Complex complex1 = complex0.acos();
        Assert.assertEquals(1115.62200970879, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.7853982638303165, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = new Complex(2226.243, 0.0);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex(1.2393345855018391E-8, 1.2393345855018391E-8);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex(0.0, 856.035191307);
        complex0.nthRoot(3790);
        // Undeclared exception!
        complex0.nthRoot(3790);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex((-1977.4198652711677), (-1977.4198652711677));
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex((-1224.07817785796), (-1224.07817785796));
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex(1687.174044, 1687.174044);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1687.174044, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1687.174044, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(2380.073493, 2380.073493);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.log();
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(2380.073493, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(2380.073493, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Complex complex1 = complex0.exp();
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex((-0.5), (-0.5));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex((-5677.017907286383), (-5677.017907286383));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-5677.017907286383), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-5677.017907286383), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex((-1224.07817785796), (-1224.07817785796));
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1224.07817785796, complex1.getReal(), 0.01);
        Assert.assertEquals(1224.07817785796, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1224.07817785796), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1224.07817785796), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(1362.3206855090502, 1362.3206855090502);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1362.3206855090502, complex0.getReal(), 0.01);
        Assert.assertEquals(1362.3206855090502, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-1.8268770466636286E47), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.8268770466636286E47, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex(1687.174044, 1687.174044);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertEquals(1687.174044, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1687.174044, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex(4178.1063, 3128.463211989);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(4178.1063, complex0.getReal(), 0.01);
        Assert.assertEquals(3128.463211989, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
        Complex complex1 = complex0.sin();
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex((-1333.17564), (-1333.17564));
        Complex complex1 = complex0.asin();
        double double0 = complex1.abs();
        Assert.assertEquals(8.272407836774892, double0, 0.01);
        Assert.assertEquals((-0.7853980930683137), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex(2621.7594264076, 3293.514619285);
        Complex complex1 = complex0.sin();
        double double0 = complex1.abs();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(2621.7594264076, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3293.514619285, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = new Complex((-1333.17564), (-1333.17564));
        double double0 = complex0.abs();
        Assert.assertEquals((-1333.17564), complex0.getReal(), 0.01);
        Assert.assertEquals((-1333.17564), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1885.395071113431, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = new Complex((-2492.01091466755), Double.POSITIVE_INFINITY);
        Assert.assertEquals((-2492.01091466755), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = new Complex((-1990.62), Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1990.62), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex((-1284.412132), 0.0);
        double double0 = complex0.getArgument();
        Assert.assertEquals(3.141592653589793, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = new Complex((-3179.01638), 283.27857916);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals(283.27857916, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-3179.01638), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex((-1333.17564), (-1333.17564));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1333.17564), double0, 0.01);
        Assert.assertEquals((-1333.17564), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = new Complex((-0.5), (-0.5));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.5), double0, 0.01);
        Assert.assertEquals((-0.5), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.sinh();
        List<Complex> list0 = complex1.nthRoot(1930);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        List<Complex> list0 = complex0.nthRoot(2450);
        Assert.assertEquals(1, list0.size());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        try {
            complex0.nthRoot((-2596));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -2,596
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(2380.073493, 2380.073493);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.tanh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getReal(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = new Complex(2380.073493, 2380.073493);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.tan();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(2380.073493, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-1.403657797422135E-10), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.403657797422135E-10, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = new Complex(1362.3206855090502, 1362.3206855090502);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1362.3206855090502, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1362.3206855090502, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
        Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex(1115.62200970879, 1115.62200970879);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex((-3179.01638), 283.27857916);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.tan();
        Complex complex3 = complex2.cos();
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(283.27857916, complex0.getImaginary(), 0.01);
        Assert.assertEquals(283.2785930647566, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(3179.01622395768, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = new Complex(1687.174044, 1687.174044);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1687.174044, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(1687.174044, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(2380.073493, 2380.073493);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.asin();
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = new Complex(1687.174044, 1687.174044);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.subtract(complex1);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1687.174044, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1687.174044, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = new Complex(2380.073493, 2380.073493);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.negate();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getReal(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(1687.174044, 1687.174044);
        Complex complex1 = complex0.multiply(Double.NEGATIVE_INFINITY);
        Assert.assertEquals(1687.174044, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1687.174044, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        Complex complex1 = complex0.createComplex(2.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(((double) (3064)));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(2.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex((-1333.17564), (-1333.17564));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply((-2.356194490192345));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-1333.17564), complex0.getReal(), 0.01);
        Assert.assertEquals((-1333.17564), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex((-1284.412132), 0.0);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals((-1284.412132), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.multiply(1221.568480067);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-5.5014553516372849E18), complex1.getReal(), 0.01);
        Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
        Assert.assertEquals((-5.5014553516372849E18), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = new Complex(2380.073493, 2380.073493);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.multiply((-1872.5473));
        Assert.assertEquals(2380.073493, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = new Complex(1687.174044, 1687.174044);
        Complex complex1 = complex0.createComplex((-8.235039845279395), Double.NEGATIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-8.235039845279395), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.atan();
        Complex complex3 = complex0.pow(complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = new Complex((-5768.833905021544), (-5768.833905021544));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        complex2.hashCode();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-5768.833905021544), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex(0.0, (-3.940510424527919E-20));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.sqrt1z();
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = new Complex((-5768.833905021544), (-5768.833905021544));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-5768.833905021544), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1780.57), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-349.4986547), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex((-5768.833905021544), (-5768.833905021544));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-5768.833905021544), complex0.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-5768.833905021544), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(1500.70815, 737.4);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertEquals(1500.70815, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(737.4, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex(1362.3206855090502, 1362.3206855090502);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(1362.3206855090502, complex0.getReal(), 0.01);
        Assert.assertEquals(1362.3206855090502, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-5.407828462098852E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5706901793727208), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = new Complex(2380.073493, 2380.073493);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2380.073493, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(2380.073493, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.conjugate();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals((-4.503599627370496E15), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        double double0 = complex0.abs();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        complex0.getField();
        Assert.assertEquals((-1780.57), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-349.4986547), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        complex0.pow(complex0);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex((-5768.833905021544), (-5768.833905021544));
        String string0 = complex0.toString();
        Assert.assertEquals("(-5768.833905021544, -5768.833905021544)", string0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = new Complex((-349.4986547), (-1780.57));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-349.4986547), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-1780.57), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.add(complex1);
        boolean boolean0 = complex2.equals(complex0);
        // AssertFixer: old assertion Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01)
        Assert.assertEquals(-4.503599627370496E15, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(boolean0)
        Assert.assertFalse(boolean0);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertEquals((-4.503599627370496E15), complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-4.503599627370496E15, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(complex2.equals(((Object) (complex1))))
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex((-4.503599627370496E15), (-4.503599627370496E15));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex0.add(complex1);
        Complex complex3 = complex2.sin();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-4.503599627370496E15, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-4.503599627370496E15), complex2.getReal(), 0.01)
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-4.503599627370496E15), complex0.getReal(), 0.01)
        Assert.assertEquals(-4.503599627370496E15, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertTrue(complex3.equals(((Object) (complex1))))
        Assert.assertTrue(complex3.equals(((Object) (complex1))));
    }
}

