/**
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 23:07:11 GMT 2017
 */


package org.apache.commons.math.analysis.solvers;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.MonitoredFunction;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;

public class UnivariateRealSolverUtils_ESTest extends UnivariateRealSolverUtils_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (sinFunction0)), (-0.5056769644274757), (-0.5056769644274757), (-0.5056769644274757));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // invalid bracketing parameters:  lower bound=-0.506,  initial=-0.506, upper bound=-0.506
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (sinFunction0)), 0.0, 0.0, 0.0, 0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // bad value for maximum iterations number: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(((UnivariateRealFunction) (sinFunction0)));
        double double0 = UnivariateRealSolverUtils.solve(((UnivariateRealFunction) (monitoredFunction0)), (-2408.8908), 0.0, 0.0);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        double double0 = UnivariateRealSolverUtils.solve(((UnivariateRealFunction) (expm1Function0)), (-1.0), 1408.332, 0.5);
        Assert.assertEquals(0.056483580990032256, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(((UnivariateRealFunction) (sinFunction0)));
        double double0 = UnivariateRealSolverUtils.solve(((UnivariateRealFunction) (monitoredFunction0)), 1232.5320603251, 5388.9);
        Assert.assertEquals(3634.8227002040135, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        double double0 = UnivariateRealSolverUtils.solve(((UnivariateRealFunction) (sinFunction0)), (-2790.327374099025), (-399.0408862357));
        Assert.assertEquals((-1061.858317098745), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        double double0 = UnivariateRealSolverUtils.midpoint(0.5, 1612.6);
        Assert.assertEquals(806.55, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        double double0 = UnivariateRealSolverUtils.midpoint((-2758.175166), (-2758.175166));
        Assert.assertEquals((-2758.175166), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        QuinticFunction quinticFunction0 = new QuinticFunction();
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.solve(((UnivariateRealFunction) (quinticFunction0)), 469.9, (-3595.06393), (-830.74409));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // endpoints do not specify an interval: [469.9, -3,595.064]
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(((UnivariateRealFunction) (null)));
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (monitoredFunction0)), 0.5, (-1217.76), 0.5, 7);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.MonitoredFunction", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (expm1Function0)), 794.4257126975923, 794.4257126975923, 2357.27376957);
            Assert.fail("Expecting exception: Exception");
        } catch (Exception e) {
            // 
            // number of iterations=1,563, maximum iterations=2,147,483,647, initial=794.426, lower bound=794.426, upper bound=2,357.274, final a value=794.426, final b value=2,357.274, f(a)=\u221E, f(b)=\u221E
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(((UnivariateRealFunction) (null)));
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (monitoredFunction0)), (-4.5), (-4.5), 929.164853124);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.MonitoredFunction", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        double[] doubleArray0 = UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (expm1Function0)), 0.25, (-1591.3863499), 1.0, 1);
        Assert.assertArrayEquals(new double[]{ -0.75 , 1.0 }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (null)), 0.0, 0.5, 2621.0, (-4311));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // function is null
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.solve(((UnivariateRealFunction) (null)), 0.0, 0.0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // function is null
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        QuinticFunction quinticFunction0 = new QuinticFunction();
        UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
        try {
            UnivariateRealSolverUtils.bracket(univariateRealFunction0, (-1.0), (-1.0), 1.0, 7);
            Assert.fail("Expecting exception: Exception");
        } catch (Exception e) {
            // 
            // number of iterations=2, maximum iterations=7, initial=-1, lower bound=-1, upper bound=1, final a value=-1, final b value=1, f(a)=1.5, f(b)=1.5
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(univariateRealFunction0);
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (monitoredFunction0)), 0.5, (-1260.1870548918864), 0.5, 7);
            Assert.fail("Expecting exception: Exception");
        } catch (Exception e) {
            // 
            // number of iterations=7, maximum iterations=7, initial=0.5, lower bound=-1,260.187, upper bound=0.5, final a value=-6.5, final b value=0.5, f(a)=0.002, f(b)=1.649
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        QuinticFunction quinticFunction0 = new QuinticFunction();
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(((UnivariateRealFunction) (quinticFunction0)));
        double[] doubleArray0 = UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (monitoredFunction0)), Double.NaN, Double.NaN, Double.NaN);
        Assert.assertArrayEquals(new double[]{ Double.NaN , Double.NaN }, doubleArray0, 0.01);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (expm1Function0)), Double.NaN, 2657.65279910174, 624.8, 1);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // invalid bracketing parameters:  lower bound=2,657.653,  initial=\uFFFD, upper bound=624.8
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (sinFunction0)), 1735.2088445712, 0.0, 0.0, 1754);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // invalid bracketing parameters:  lower bound=0,  initial=1,735.209, upper bound=0
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(((UnivariateRealFunction) (expm1Function0)));
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (monitoredFunction0)), (-650.0573666670906), 0.5, 0.5, 1042);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // invalid bracketing parameters:  lower bound=0.5,  initial=-650.057, upper bound=0.5
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        QuinticFunction quinticFunction0 = new QuinticFunction();
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(((UnivariateRealFunction) (quinticFunction0)));
        // Undeclared exception!
        try {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (monitoredFunction0)), Double.NaN, 1774.6506100000001, 473.0, (-1802));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // bad value for maximum iterations number: -1,802
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        double double0 = UnivariateRealSolverUtils.solve(((UnivariateRealFunction) (expm1Function0)), (-143.70540167023), 1315.00928349, (-143.70540167023));
        Assert.assertEquals((-1.7089909939978398E-17), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        double double0 = UnivariateRealSolverUtils.midpoint(0.0, 0.0);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        MonitoredFunction monitoredFunction0 = new MonitoredFunction(((UnivariateRealFunction) (expm1Function0)));
        double double0 = UnivariateRealSolverUtils.solve(((UnivariateRealFunction) (monitoredFunction0)), 0.0, 816.0);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        QuinticFunction quinticFunction0 = new QuinticFunction();
        {
            UnivariateRealSolverUtils.bracket(((UnivariateRealFunction) (quinticFunction0)), 924.5, (-687.2813787117125), 924.5);
        }
    }
}

