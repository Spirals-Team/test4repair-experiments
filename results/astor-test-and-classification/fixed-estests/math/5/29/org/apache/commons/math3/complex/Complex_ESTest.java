/**
 * This file was automatically generated by EvoSuite
 * Sun Jan 29 22:45:24 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf((-266.075), (-266.075));
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-6.331009331992412E-18), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(20.0, 20.0);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertEquals(6.331009331992412E-18, complex1.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.multiply((-1032));
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals((-1.0785034805115288E102), complex1.getImaginary(), 0.01);
        Assert.assertEquals(7.343376200738761E50, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-7.343376200738761E50), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf(1.5707963267948966);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.sinh();
        Assert.assertEquals(1.2113633229846195, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.8094669919922886, complex3.getReal(), 0.01);
        Assert.assertEquals((-2.348832969376198), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf(1.5707963267948966);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.sin();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1.5301343179632096, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = new Complex(61.56683, 61.56683);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.cos();
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertEquals(2.6090197780661024E26, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2.6090197780661024E26), complex1.getImaginary(), 0.01);
        Assert.assertEquals(8.23597958162973E25, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(8.23597958162973E25, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(boolean0);
        Assert.assertEquals(61.56683, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.tanh();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-105.89879081), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf((-298.54690602), (-2637.675705524373));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-2637.675705524373), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-298.54690602), complex0.getReal(), 0.01);
        Assert.assertEquals((-4.236833285146794E-5), complex1.getReal(), 0.01);
        Assert.assertEquals(3.743261778716964E-4, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf((-298.54690602), (-2637.675705524373));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-3.743261946833041E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707539584561339), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf((-6959.6161847));
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-5.7527952879961), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf((-2349.286006557602));
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2349.286006557602), complex0.getReal(), 0.01);
        Assert.assertEquals(0.7219381575949315, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = new Complex((-3360.338), (-3360.338));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-8.9064764856495E-10));
        Complex complex1 = complex0.add(77.74607209776);
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-77.74607209776), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-8.9064764856495E-10), complex1.getImaginary(), 0.01);
        Assert.assertEquals(77.74607209776, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.subtract((-1721.8543110387313));
        Assert.assertEquals((-1.923150446264062E8), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertTrue(complex3.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0340244451557199E-241);
        Complex complex1 = complex0.subtract(1.0340244451557199E-241);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1.0340244451557199E-241, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.subtract((-1721.8543110387313));
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1.923150446264062E8), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.923150446264062E8), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.4785719290492314E8, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0340244451557199E-241);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0340244451557199E-241, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(3.1621908337667235, complex2.getReal(), 0.01);
        Assert.assertEquals((-8.132662427480213), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.valueOf((-266.075), (-266.075));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-17.92152160962374), complex1.getImaginary(), 0.01);
        Assert.assertEquals(7.4233373090686525, complex1.getReal(), 0.01);
        Assert.assertEquals((-266.075), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.sin();
        Assert.assertEquals((-0.5327290591603833), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3590.278581), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-0.009117766533883423), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0017219774586930288), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-105.89879081), complex0.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(1.5707963267948966);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.pow(1.2113633229846195);
        Assert.assertEquals((-1.6378542252522648), complex3.getImaginary(), 0.01);
        Assert.assertEquals(1.6042393796703018, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.pow(950.1524487897293);
        Complex complex2 = complex1.negate();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(3.141592653589793, complex1.getImaginary(), 0.01);
        Assert.assertEquals(8.18598507763601, complex1.getReal(), 0.01);
        Assert.assertEquals((-8.18598507763601), complex2.getReal(), 0.01);
        Assert.assertEquals((-3.141592653589793), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf((-2443.0), 1054.8566366195064);
        Complex complex1 = complex0.multiply((-2443.0));
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(1.2591294133295465E10, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.1862051181307209E10), complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals((-2.4978190957789105E8), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(452);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = Complex.valueOf((-2456.5553633105), (-2456.5553633105));
        Complex complex1 = complex0.multiply(253);
        Assert.assertEquals((-621508.5069175565), complex1.getReal(), 0.01);
        Assert.assertEquals((-2456.5553633105), complex0.getReal(), 0.01);
        Assert.assertEquals((-2456.5553633105), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-621508.5069175565), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-5.029141902923584E-8));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.log();
        Assert.assertEquals((-8.546230561500243E-25), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-3.141592653589793), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.divide(Double.NaN);
        boolean boolean0 = complex1.isNaN();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        double double0 = complex0.getReal();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf((-2456.5553633105), (-2456.5553633105));
        Complex complex1 = complex0.cos();
        double double0 = complex1.getReal();
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2456.5553633105), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.tanh();
        double double0 = complex1.getImaginary();
        Assert.assertEquals((-105.89879081), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf((-2136.980772221), (-803.225491));
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2136.980772221), complex0.getReal(), 0.01);
        Assert.assertEquals((-803.225491), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf(4.856678149580005E-9);
        double double0 = complex0.getArgument();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(4.856678149580005E-9, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = Complex.valueOf((-2443.0), 1054.8566366195064);
        Complex complex1 = complex0.multiply((-2443.0));
        double double0 = complex1.getArgument();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2443.0), complex0.getReal(), 0.01);
        Assert.assertEquals(1054.8566366195064, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.40760556742087123), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf((-2443.0), 1054.8566366195064);
        Complex complex1 = complex0.multiply((-2443.0));
        Complex complex2 = complex1.exp();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-2577014.763261454), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.2670927171658583E7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-266.075), (-266.075));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.pow((-266.075));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2.2834701758923925E-116), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-1.5973909661297668E-116), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = Complex.valueOf(5.920972420778763E47, (-1.2670927171658583E7));
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals((-1.2670927171658583E7), complex0.getImaginary(), 0.01);
        Assert.assertEquals(2.336440080731569E40, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2.336440080731569E40), complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(5.920972420778763E47, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.divide((-1.0));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 1047.5073);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1047.5073, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.createComplex(0.0, 0.0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf((-2456.5553633105), (-2456.5553633105));
        Complex complex1 = complex0.createComplex((-2456.5553633105), 0.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2456.5553633105), complex1.getReal(), 0.01);
        Assert.assertEquals((-2456.5553633105), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-2456.5553633105), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf((-266.075), (-266.075));
        Complex complex1 = complex0.createComplex(327.917207379, (-266.075));
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-266.075), complex1.getImaginary(), 0.01);
        Assert.assertEquals(327.917207379, complex1.getReal(), 0.01);
        Assert.assertEquals((-266.075), complex0.getReal(), 0.01);
        Assert.assertEquals((-266.075), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals(3.141592653589793, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2.1984114155840883E-13, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1795.1394297649583), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf(4.856678149580005E-9);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf((-2456.5553633105), (-2456.5553633105));
        Complex complex1 = complex0.cosh();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2456.5553633105), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(1612.52);
        Complex complex1 = complex0.cos();
        Assert.assertEquals((-0.6348602408700664), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.0450615121235744E99), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = new Complex((-1853.70453));
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1853.70453), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1853.70453), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.7853981633974483), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf(3.2671863888979078E277);
        Complex complex1 = complex0.asin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3.2671863888979078E277, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = Complex.valueOf((-2456.5553633105), (-2456.5553633105));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-8.846236159670944), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.7853981426837856), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf((-2456.5553633105), (-2456.5553633105));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.add(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.pow(950.1524487897293);
        Complex complex2 = complex1.add(20.0);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.add(0.0);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf((-2349.286006557602));
        Complex complex1 = complex0.multiply((-3162.320797458317));
        Complex complex2 = complex0.add(complex1);
        Complex complex3 = complex2.acos();
        Assert.assertEquals(16.517749297782306, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex3.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf((-2883.58401362));
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-8465789.520000001), 500.22167895139);
        // Undeclared exception!
        complex0.nthRoot(260915);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf(1973.676082);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf((-485.4), 6.283185307179586);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.sqrt();
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf(3.804034213613942E-130, Double.NaN);
        Complex complex1 = complex0.log();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf((-2349.286006557602));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2349.286006557602), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3590.278581), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-105.89879081), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(105.89879081, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = complex0.multiply(9.981610314154237);
        Assert.assertEquals((-1.2670927171658583E7), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.2647625734652448E8), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.2670927171658583E7), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.2647625734652448E8), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.pow(950.1524487897293);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = Complex.valueOf((-3590.278581));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3590.278581), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf((-2349.286006557602));
        Complex complex1 = complex0.add(Double.NaN);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals((-2349.286006557602), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-8.9064764856495E-10));
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals((-2.5341854343317166E7), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2.5341854343317166E7), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.2670927171658583E7), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.2670927171658583E7), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex(20.0, 20.0);
        Complex complex1 = complex0.pow((-916.026295005));
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf((-298.54690602), (-2637.675705524373));
        double double0 = complex0.abs();
        Assert.assertEquals((-298.54690602), complex0.getReal(), 0.01);
        Assert.assertEquals(2654.517542343168, double0, 0.01);
        Assert.assertEquals((-2637.675705524373), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        double double0 = complex0.abs();
        Assert.assertEquals((-1.2670927171658583E7), complex0.getReal(), 0.01);
        Assert.assertEquals(1.791939705400133E7, double0, 0.01);
        Assert.assertEquals((-1.2670927171658583E7), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1.747018414872141E-8);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(1.747018414872141E-8, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = new Complex((-237.9226787699), Double.NaN);
        Assert.assertEquals((-237.9226787699), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        double double0 = complex0.getArgument();
        Assert.assertEquals(2.9549316326581097, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-105.89879081), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = Complex.valueOf((-2456.5553633105), (-2456.5553633105));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2456.5553633105), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2456.5553633105), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals((-105.89879081), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(20.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = Complex.valueOf((-3559.624629));
        Complex complex1 = complex0.cosh();
        List<Complex> list0 = complex1.nthRoot(2901);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3559.624629), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        try {
            complex0.nthRoot((-1));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -1
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf(1985.96);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1985.96, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf(3.2671863888979078E277);
        Complex complex1 = new Complex(576.4424729284995, 1.494655405262451E154);
        Complex complex2 = complex1.pow(complex0);
        Complex complex3 = complex2.tanh();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.494655405262451E154, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tanh();
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1.2670927171658583E7), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.2670927171658583E7), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf(364.7692148475, 364.7692148475);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(364.7692148475, complex0.getImaginary(), 0.01);
        Assert.assertEquals(364.7692148475, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = new Complex((-3360.338), (-3360.338));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-3360.338), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3360.338), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.tan();
        Assert.assertTrue(complex2.isNaN());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(2.285893164742804E49, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2.285893164742804E49, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf((-2349.286006557602));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(3.141592653589793, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = Complex.valueOf(1985.96);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sin();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1985.96, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = Complex.valueOf(3.804034213613942E-130, Double.NaN);
        Complex complex1 = complex0.cosh();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf(3860.655653437, 0.0);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.cos();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3860.655653437, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.atan();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.asin();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.acos();
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(3.2671863888979078E277);
        Complex complex1 = complex0.pow(3.2671863888979078E277);
        Complex complex2 = complex1.subtract((-766.2));
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf((-3559.624629));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.subtract(complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-3559.624629), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = ((Complex) (complex1.readResolve()));
        Complex complex3 = complex2.negate();
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex1);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf(3.2671863888979078E277);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3.2671863888979078E277, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(2045222521);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.multiply(877);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply((-1032));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf((-2456.5553633105), (-2456.5553633105));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.multiply(complex1);
        boolean boolean0 = complex2.isInfinite();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-2456.5553633105), complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf(3.2671863888979078E277);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.conjugate();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3.2671863888979078E277, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        complex1.hashCode();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        complex0.hashCode();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf(4.856678149580005E-9);
        Complex complex1 = complex0.createComplex(4.856678149580005E-9, 4.856678149580005E-9);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(4.856678149580005E-9, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.tanh();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-105.89879081), complex0.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf(3860.655653437, 0.0);
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3860.655653437, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.multiply(1);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(20.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-105.89879081), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-8.9064764856495E-10));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(1.1227784653237936E9, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-8.9064764856495E-10), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-0.25), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.25, complex1.getReal(), 0.01);
        Assert.assertEquals(2.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(6.283185307179586, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(6.283185307179586, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.divide(0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        Complex complex1 = complex0.divide(Double.NaN);
        Complex complex2 = complex1.exp();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        Complex complex1 = complex0.divide(2.5263051986694336);
        Complex complex2 = complex1.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-5015596.365131247), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-5015596.365131247), complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf((-3559.624629));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.divide((-3559.624629));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3559.624629), complex0.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex0.divide(complex2);
        Assert.assertEquals((-1.923150446264062E8), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = Complex.valueOf((-105.89879081), 20.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        complex2.divide(complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-1.923150446264062E8), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = Complex.valueOf((-3559.624629));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3559.624629), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = Complex.valueOf((-3559.624629));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3559.624629), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = Complex.valueOf((-2349.286006557602));
        Complex complex1 = complex0.add(Double.NaN);
        Complex complex2 = complex1.multiply((-3162.320797458317));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2349.286006557602), complex0.getReal(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = Complex.valueOf(3.2671863888979078E277);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.add(1744.174196);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.add(complex1);
        Assert.assertEquals((-159.767533), complex0.getReal(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        Complex complex0 = Complex.valueOf(3.804034213613942E-130, Double.NaN);
        Complex complex1 = complex0.add(complex0);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test165() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.atan();
        complex3.nthRoot(403);
        Assert.assertEquals((-1.0), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test166() throws Throwable {
        Complex complex0 = Complex.valueOf(3.804034213613942E-130, Double.NaN);
        double double0 = complex0.abs();
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test167() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1.0450615121235744E99);
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.0450615121235744E99, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test168() throws Throwable {
        Complex complex0 = new Complex((-159.767533), Double.POSITIVE_INFINITY);
        String string0 = complex0.toString();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals("(-159.767533, Infinity)", string0);
    }

    @Test(timeout = 4000)
    public void test169() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        complex0.getField();
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test170() throws Throwable {
        Complex complex0 = Complex.valueOf((-1.2670927171658583E7), (-1.2670927171658583E7));
        List<Complex> list0 = complex0.nthRoot(363);
        Assert.assertEquals((-1.2670927171658583E7), complex0.getReal(), 0.01);
        Assert.assertEquals((-1.2670927171658583E7), complex0.getImaginary(), 0.01);
        Assert.assertEquals(363, list0.size());
    }

    @Test(timeout = 4000)
    public void test171() throws Throwable {
        Complex complex0 = Complex.valueOf(3.2671863888979078E277);
        Complex complex1 = complex0.pow(3.2671863888979078E277);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test172() throws Throwable {
        Complex complex0 = new Complex(2.0, 2.0);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-1.7343245214879666), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.8165471820968504, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertTrue(complex1.isNaN())
        Assert.assertFalse(complex1.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
    }
}

