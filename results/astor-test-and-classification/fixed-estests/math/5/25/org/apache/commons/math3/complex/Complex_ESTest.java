/**
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 03:44:56 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf(1340.25515626);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 3.4529452510568104E-8);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertEquals(5.867733860246429E-25, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        Complex complex1 = complex0.createComplex(954.52, 20.0);
        Complex complex2 = complex1.tan();
        Assert.assertEquals(1.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1580.0), complex0.getReal(), 0.01);
        Assert.assertEquals(20.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(954.52, complex1.getReal(), 0.01);
        Assert.assertEquals((-7.363186085269948E-18), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1803.693431);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(1803.693431, complex0.getImaginary(), 0.01);
        Assert.assertEquals(30.0307628191493, complex1.getImaginary(), 0.01);
        Assert.assertEquals(30.0307628191493, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-751.800272));
        Complex complex1 = complex0.sinh();
        Assert.assertEquals(1.391999241866681E8, complex1.getReal(), 0.01);
        Assert.assertEquals((-751.800272), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.9866982109943333E8, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = Complex.valueOf(1558.9784409, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.pow(complex0);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(1558.9784409, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf(459.0, 459.0);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.015101439325492752, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.9590868144971708), (-328.45581177138257));
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.9590868144971708), complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1135.7277328);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.042013220471561086, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = Complex.valueOf(0.0, (-676.38731108));
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = new Complex(3393.9752871, 3393.9752871);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(3393.9752871, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        Complex complex1 = complex0.createComplex(954.52, 20.0);
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals((-20.0), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-2534.52), complex2.getReal(), 0.01);
        Assert.assertEquals(20.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(954.52, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.subtract(0.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf((-30.0));
        Complex complex1 = complex0.subtract(6.283185307179586);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-36.283185307179586), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.9590868144971708), (-328.45581177138257));
        Complex complex1 = complex0.subtract((-328.45581177138257));
        Assert.assertEquals((-328.45581177138257), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-328.45581177138257), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(327.4967249568854, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex(0.0, 486.89428469345);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(1.4271549130419629E211, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf((-2927.475), 2152.6);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2152.6, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sqrt();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf((-2927.475), 2152.6);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf(3278.27514340374);
        Complex complex1 = complex0.pow((-553.3845363485979));
        Complex complex2 = complex1.sin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        Complex complex1 = complex0.createComplex(954.52, 20.0);
        Complex complex2 = complex1.negate();
        Complex complex3 = complex2.sin();
        Assert.assertEquals(1.2141058854501934E8, complex3.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1580.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-2.100137750206091E8), complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex((-2762.4420166));
        Complex complex1 = complex0.pow(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf(459.0, 459.0);
        Complex complex1 = complex0.pow(((double) (1076)));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(459.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-30.0));
        Complex complex1 = complex0.createComplex(764, (-30.0));
        Complex complex2 = complex1.pow(6.283185307179586);
        Assert.assertEquals(1.26990533794120474E18, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-3.1965843300423923E17), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-30.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-30.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.negate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf((-4.7208848667217906E221));
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-4.7208848667217906E221), complex0.getReal(), 0.01);
        Assert.assertEquals(4.7208848667217906E221, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf((-30.0));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(900.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals((-0.49999990234385905), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-800.0001562499237), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf((-309.38214986));
        Complex complex1 = complex0.multiply(0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-309.38214986), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf(5.007377227358579, 5.007377227358579);
        Complex complex1 = complex0.multiply((-982));
        Assert.assertEquals((-4917.244437266125), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(5.007377227358579, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-4917.244437266125), complex1.getImaginary(), 0.01);
        Assert.assertEquals(5.007377227358579, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf((-309.38214986));
        Complex complex1 = complex0.multiply(218.38622129);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-67564.7986425019), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-309.38214986), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-1598.4494977430732));
        Complex complex1 = complex0.multiply(3.7622440218540407E-138);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1598.4494977430732), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-6.013757067119471E-135), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf(1082.63318276342, 1082.63318276342);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.log();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2.356194490192345, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.9590868144971708), (-328.45581177138257));
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.log();
        Assert.assertEquals((-5.794406576865962), complex3.getReal(), 0.01);
        Assert.assertEquals((-8.889970419254071E-6), complex2.getReal(), 0.01);
        Assert.assertEquals(1.5737163058432493, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.log();
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.divide(0.0);
        boolean boolean0 = complex1.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(boolean0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1135.7277328);
        double double0 = complex0.getReal();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(1135.7277328, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf(1340.25515626);
        Complex complex1 = complex0.sqrt1z();
        double double0 = complex1.getImaginary();
        Assert.assertEquals(1340.2547831966565, double0, 0.01);
        Assert.assertEquals(1340.25515626, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex((-20.0), 0.0);
        Complex complex1 = complex0.createComplex(0.0, 1.2424707839848734E210);
        Complex complex2 = complex1.reciprocal();
        double double0 = complex2.getImaginary();
        Assert.assertEquals((-8.048478989524269E-211), double0, 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1.2424707839848734E210, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = new Complex(0.0);
        double double0 = complex0.getArgument();
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        Complex complex1 = complex0.createComplex(954.52, 20.0);
        Complex complex2 = complex1.negate();
        double double0 = complex2.getArgument();
        Assert.assertEquals(954.52, complex1.getReal(), 0.01);
        Assert.assertEquals((-3.120642779377778), double0, 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(20.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1580.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf(1558.9784409, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(1558.9784409, 1558.9784409);
        Complex complex2 = complex0.tan();
        Complex complex3 = complex2.add(complex1);
        Complex complex4 = complex3.exp();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
        Assert.assertEquals(1559.9784409, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1558.9784409, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex3.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = Complex.valueOf(2139.0, (-2029.87164371));
        Complex complex1 = complex0.exp();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2029.87164371), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = Complex.valueOf(14.406148814312244, 1157.87);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(1157.87, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(14.406148814312244, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf((-1812.400372023598));
        Complex complex1 = complex0.divide(complex0);
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals((-5.517544663067304E-4), complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-866.81247699));
        Complex complex1 = complex0.multiply((-866.81247699));
        Complex complex2 = complex1.divide((-866.81247699));
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(751363.8702655394, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-866.81247699), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex(395.0, 395.0);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.divide(0.23117504129070993);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.createComplex(Double.NaN, 0.0);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
        Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-2292.74802), (-2292.74802));
        Complex complex1 = complex0.createComplex((-0.9997306743654872), (-1252.380395));
        Assert.assertEquals((-2292.74802), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1252.380395), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-0.9997306743654872), complex1.getReal(), 0.01);
        Assert.assertEquals((-2292.74802), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf((-2927.475), 2152.6);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.atan();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf((-2292.74802), (-2292.74802));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-2.1807890783704878E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5705782478732309), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = Complex.valueOf((-1611.45138128719), (-1611.45138128719));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.add(complex1);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.add((-1977.1986881311236));
        Complex complex2 = complex1.sin();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-3954.3973762622472), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1977.1986881311236), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf((-4.7208848667217906E221));
        Complex complex1 = complex0.acos();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-4.7208848667217906E221), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 1135.7277328);
        Complex complex1 = complex0.acos();
        Assert.assertEquals((-7.728176273100974), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf(3202.95022754);
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf(452.46087731, 452.46087731);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf(1.3961255018698695E-220);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex((-837.674), 0.010169003920808009);
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 3.4529452510568104E-8);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-751.800272));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-751.800272), complex0.getImaginary(), 0.01);
        Assert.assertEquals(19.131992225742376, complex1.getReal(), 0.01);
        Assert.assertEquals((-19.64772573418783), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.sqrt();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.9590868144971708), (-328.45581177138257));
        Complex complex1 = complex0.log();
        Assert.assertEquals((-328.45581177138257), complex0.getImaginary(), 0.01);
        Assert.assertEquals(5.794406576865961, complex1.getReal(), 0.01);
        Assert.assertEquals((-1.5737163058432493), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf(988.6978159308007, 988.6978159308007);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.log();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(988.6978159308007, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertNotSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.9590868144971708), (-328.45581177138257));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.sinh();
        Complex complex3 = complex2.sqrt();
        Complex complex4 = complex3.exp();
        Assert.assertEquals((-1.8139451625956566E142), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals(1.2724217580768096E142, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex4.equals(((Object) (complex3))));
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1580.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals((-1580.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.9590868144971708), (-328.45581177138257));
        Complex complex1 = complex0.negate();
        Complex complex2 = complex0.add(complex1);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(328.45581177138257, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.9590868144971708, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-363.4160983991112));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf(988.6978159308007, 988.6978159308007);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(988.6978159308007, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-20.0));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(800.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-363.4160983991112));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertSame(complex1, complex0);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = new Complex(3393.9752871, 3393.9752871);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.subtract(3393.9752871);
        Complex complex3 = complex2.asin();
        Complex complex4 = complex2.multiply(complex3);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex4.isNaN());
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-751.800272));
        Complex complex1 = Complex.valueOf((-20.0));
        Complex complex2 = complex1.divide(complex0);
        double double0 = complex2.abs();
        Assert.assertEquals((-0.02658399652678157), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.026593401736674162, double0, 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(7.072090159281446E-4, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sinh();
        double double0 = complex1.abs();
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        double double0 = complex0.abs();
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals(2796.1812002613265, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex((-1358.24494464), (-1358.24494464));
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.asin();
        Assert.assertEquals((-1.243786229580917E22), complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertEquals(2.275687285785136E22, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex(4.725191397657393E289, Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(4.725191397657393E289, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, (-1155.358));
        Assert.assertTrue(complex0.isNaN());
        Assert.assertEquals((-1155.358), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3.141592653589793, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        boolean boolean0 = complex0.isInfinite();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1580.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf((-866.81247699));
        double double0 = complex0.getReal();
        Assert.assertEquals((-866.81247699), double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf(1.2261246749706581E-104, 0.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(1.2261246749706581E-104, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf(4.0891054447206644E61, Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf(1558.9784409, Double.POSITIVE_INFINITY);
        List<Complex> list0 = complex0.nthRoot(815);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1558.9784409, complex0.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        List<Complex> list0 = complex0.nthRoot(897);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1, list0.size());
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf(74.3007409716986, 74.3007409716986);
        try {
            complex0.nthRoot((-2660));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -2,660
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf((-1580.0));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.cosh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-751.800272));
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-7.986055606494021E-18), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-751.800272), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
        Complex complex1 = complex0.multiply((-1073741824));
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2.2371609442247427), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.tan();
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf(74.3007409716986, 74.3007409716986);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(74.3007409716986, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-1598.4494977430732));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(28.27056329243435, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-28.270563292434353), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1598.4494977430732), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf((-866.81247699));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sin();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-866.81247699), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
        Complex complex1 = complex0.atan();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.asin();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = Complex.valueOf((-2292.74802), (-2292.74802));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.pow(complex1);
        Complex complex3 = complex2.acos();
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2292.74802), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf((-4056.311842372305), (-4056.311842372305));
        Complex complex1 = complex0.subtract(Double.NaN);
        Complex complex2 = complex1.tan();
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals((-4056.311842372305), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-4056.311842372305), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = new Complex(3278.27514340374);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.subtract((-923.37973411));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(3278.27514340374, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf((-1543.0));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals((-1543.0), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf((-2292.74802), (-2292.74802));
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.pow((-20.0));
        Complex complex3 = complex2.subtract(complex1);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-2292.74802), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-363.4160983991112));
        Complex complex1 = complex0.negate();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = Complex.valueOf(74.3007409716986, 74.3007409716986);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals(74.3007409716986, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(74.3007409716986, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf((-1543.0));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.pow(676.38731108);
        Complex complex3 = complex2.cos();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1543.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = Complex.valueOf((-1611.45138128719), (-1611.45138128719));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1611.45138128719), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = new Complex((-1977.1986881311236), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf((-866.81247699));
        Complex complex1 = complex0.sinh();
        complex1.hashCode();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-866.81247699), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        complex0.hashCode();
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
        Complex complex1 = complex0.multiply((-1073741824));
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = Complex.valueOf(3.050384596339063E-4);
        Complex complex1 = complex0.conjugate();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(3.050384596339063E-4, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.divide(0.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf((-1812.400372023598));
        Complex complex1 = complex0.divide(complex0);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf((-1543.0));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1543.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-751.800272));
        boolean boolean0 = complex0.equals("");
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-751.800272), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(2.5288303244455775E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals((-2.5288303244455775E-4), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = Complex.valueOf((-2292.74802), (-2292.74802));
        Complex complex1 = complex0.divide((-20.0));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2292.74802), complex0.getImaginary(), 0.01);
        Assert.assertEquals(114.637401, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2292.74802), complex0.getReal(), 0.01);
        Assert.assertEquals(114.637401, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf((-1543.0));
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1543.0), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf(988.6978159308007, 988.6978159308007);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.exp();
        Complex complex3 = complex2.divide(0.0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertEquals(988.6978159308007, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertNotSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(complex0);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = Complex.valueOf((-2927.475), 2152.6);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.divide(complex1);
        Complex complex3 = complex2.sinh();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2152.6, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = Complex.valueOf(1558.9784409, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(1558.9784409, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = new Complex(1479.590138936);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf((-866.81247699));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals((-866.81247699), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = Complex.valueOf((-1977.1986881311236), (-1977.1986881311236));
        Complex complex1 = complex0.conjugate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-1977.1986881311236), complex0.getReal(), 0.01);
        Assert.assertEquals((-1977.1986881311236), complex1.getReal(), 0.01);
        Assert.assertEquals(1977.1986881311236, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.add((-2890.986499327922));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = new Complex(1479.590138936);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.add(0.0);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.divide(0.0);
        Complex complex2 = complex0.add(complex1);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf((-866.81247699));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.add(complex0);
        double double0 = complex2.getReal();
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-866.81247699), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-1598.4494977430732));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), (-751.800272));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-7.3159720444715655), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.divide(0.0);
        double double0 = complex1.abs();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(37);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        String string0 = complex0.toString();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals("(Infinity, 0.0)", string0);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = Complex.valueOf(74.3007409716986, 74.3007409716986);
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals(74.3007409716986, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(74.3007409716986, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-1598.4494977430732));
        complex0.getField();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-1598.4494977430732), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = Complex.valueOf((-0.9590868144971708), (-328.45581177138257));
        List<Complex> list0 = complex0.nthRoot(1089);
        Assert.assertEquals((-0.9590868144971708), complex0.getReal(), 0.01);
        Assert.assertEquals(1089, list0.size());
        Assert.assertEquals((-328.45581177138257), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.reciprocal();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }
}

