/**
 * This file was automatically generated by EvoSuite
 * Thu Jan 19 01:40:49 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex(20.0, 20.0);
        Complex complex1 = complex0.negate();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals((-20.0), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-1.0), complex2.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-6.331009331992412E-18), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(6.331009331992412E-18, complex1.getImaginary(), 0.01);
        Assert.assertEquals(20.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = new Complex(1.446257098752E12, (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.446257098752E12, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(8.496292820538053E-18, complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = Complex.valueOf(3.08072210937242E-8, 3.08072210937242E-8);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-3.0807220966011705E-8), complex2.getImaginary(), 0.01);
        Assert.assertEquals(3.0807221093724196E-8, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = Complex.valueOf((-255.66533085), (-255.66533085));
        complex0.hashCode();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-255.66533085), complex0.getReal(), 0.01);
        Assert.assertEquals((-255.66533085), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex(408.5039182611049, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.sin();
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.equals(((Object) (complex2))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        Complex complex1 = complex0.cos();
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(3281.4004355646, complex0.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf(1886.826163, 1886.826163);
        Complex complex1 = complex0.atan();
        Complex complex2 = complex0.subtract(complex1);
        Complex complex3 = complex2.reciprocal();
        Assert.assertEquals((-2.652159305648825E-4), complex3.getImaginary(), 0.01);
        Assert.assertEquals(2.649952108641155E-4, complex3.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf((-255.66533085), (-255.66533085));
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-7.649381552097327E-6), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = Complex.valueOf((-255.66533085), (-255.66533085));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-0.001955669198729114), complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.568840632663242, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf((-255.66533085), (-255.66533085));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-1.5688406401430195), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.001955676678706802), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = new Complex(0.0, 6.283185307179586);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.1605195575078854, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-3427.85973357709));
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3427.85973357709), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.40190612863586456), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        Complex complex1 = complex0.add(20.0);
        Complex complex2 = complex1.tan();
        Assert.assertEquals(40.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-8.4447821843628E-18), complex2.getReal(), 0.01);
        Assert.assertEquals(20.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.subtract(0.24554696679115295);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.subtract(20.0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-3708.838583997));
        Complex complex1 = complex0.subtract((-3708.838583997));
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(3708.838583997, complex1.getReal(), 0.01);
        Assert.assertEquals((-3708.838583997), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3708.838583997), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-3427.85973357709));
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3427.85973357709), complex0.getImaginary(), 0.01);
        Assert.assertEquals(3427.8598794406985, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-3708.838583997));
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-3708.838583997), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.9822945812644603), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = new Complex(1573.373264883726, 1573.373264883726);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex0.tan();
        Complex complex3 = complex1.subtract(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf((-255.66533085), (-255.66533085));
        Complex complex1 = complex0.divide((-3982.55749148427));
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(7.788614667158088, complex2.getReal(), 0.01);
        Assert.assertEquals(0.06419626870338421, complex1.getReal(), 0.01);
        Assert.assertEquals((-7.788614667158088), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.06419626870338421, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf(1.8378770664093453, 2265.997);
        Complex complex1 = complex0.pow(753.9);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2265.997, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = new Complex((-3923.53802598), 2.0);
        Complex complex1 = complex0.pow(2.0);
        Assert.assertEquals(2.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.5394146641311014E7, complex1.getReal(), 0.01);
        Assert.assertEquals((-15694.152103924529), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf(2422.73, 2422.73);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.negate();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = new Complex((-1.0));
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf((-4450.580615));
        Complex complex1 = complex0.multiply(2147018081);
        Assert.assertEquals((-4450.580615), complex0.getReal(), 0.01);
        Assert.assertEquals((-9.5554770513531E12), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, (-3427.85973357709));
        Complex complex1 = complex0.multiply(497);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-1703646.2875878138), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-3427.85973357709), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf((-255.66533085), (-255.66533085));
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.multiply(361.56537831667447);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(4.726726936735684E7, complex2.getImaginary(), 0.01);
        Assert.assertEquals(130729.52279727993, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        Complex complex1 = complex0.multiply(809.6116831182447);
        Assert.assertEquals((-1116942.6534306088), complex1.getReal(), 0.01);
        Assert.assertEquals((-1116942.6534306088), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1379.602934), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1379.602934), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = Complex.valueOf((-1798.29), 3467.9997116493414);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1798.29), complex0.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.log();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals((-2.356194490192345), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex(1518.4, 0.18411031365394592);
        Complex complex1 = complex0.exp();
        Complex complex2 = complex0.pow(complex1);
        boolean boolean0 = complex2.isNaN();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex(1573.373264883726, 1573.373264883726);
        Complex complex1 = complex0.sinh();
        boolean boolean0 = complex1.isInfinite();
        Assert.assertTrue(boolean0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1573.373264883726, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1573.373264883726, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(593.24078309, double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(3281.4004355646, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf(20.0, 20.0);
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(20.0, complex0.getReal(), 0.01);
        Assert.assertEquals(20.0, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = new Complex((-1319.88713800972));
        Complex complex1 = complex0.acos();
        double double0 = complex1.getImaginary();
        Assert.assertEquals(3.141592653589793, complex1.getReal(), 0.01);
        Assert.assertEquals((-7.878448547472285), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf((-1867.0352627429));
        double double0 = complex0.getArgument();
        Assert.assertEquals(3.141592653589793, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf((-2593.229), (-2593.229));
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2.356194490192345), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = new Complex(361.1257204, (-505.1));
        Complex complex1 = complex0.exp();
        Assert.assertEquals((-5.245480838046071E156), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-505.1), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-4.3861777724404746E156), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.divide((-4774.61666603657));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf(1.8378770664093453, 2265.997);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.divide(2265.997);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals((-8.739164666751631E-4), complex2.getReal(), 0.01);
        Assert.assertEquals((-1.9802920917365194), complex1.getReal(), 0.01);
        Assert.assertEquals((-0.0010657654051989302), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2.41502121088456), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf(2422.73, 2422.73);
        Complex complex1 = complex0.createComplex(0.0, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2422.73, complex0.getReal(), 0.01);
        Assert.assertEquals(2422.73, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-2593.229), (-2593.229));
        Complex complex1 = complex0.createComplex(1.3548774719238281, Double.POSITIVE_INFINITY);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2593.229), complex0.getImaginary(), 0.01);
        Assert.assertEquals(1.3548774719238281, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2593.229), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.createComplex(6.283185307179586, 0.0);
        Assert.assertEquals(6.283185307179586, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = Complex.valueOf((-1867.0352627429));
        Complex complex1 = complex0.createComplex((-2193.258362399771), (-2463.555));
        Assert.assertEquals((-2193.258362399771), complex1.getReal(), 0.01);
        Assert.assertEquals((-2463.555), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1867.0352627429), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf(1.4419788596550465);
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2.232757813242026, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.cos();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex2.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = Complex.valueOf(1.2417128554477803E213);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.conjugate();
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.2417128554477803E213, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf((-1867.0352627429));
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertEquals((-1379.602934), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1379.602934), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = new Complex((-1.0));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-0.7853981633974483), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = Complex.valueOf((-255.66533085), (-255.66533085));
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.asin();
        Assert.assertEquals(12.474031981096044, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-255.66533085), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex(549.7374);
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-7.002587062986239), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf((-138.78430596));
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-277.56861192), complex1.getReal(), 0.01);
        Assert.assertEquals((-138.78430596), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.add(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = Complex.valueOf(2422.73, 2422.73);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.add((-2.9646587857612632E-8));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.add(0.0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf((-138.78430596));
        Complex complex1 = complex0.multiply((-138.78430596));
        Complex complex2 = complex1.acos();
        Assert.assertEquals(10.558989186698714, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = Complex.valueOf((-3517.2928), (-3517.2928));
        Complex complex1 = complex0.conjugate();
        Complex complex2 = complex1.acos();
        Assert.assertEquals(2.3561944800883534, complex2.getReal(), 0.01);
        Assert.assertEquals(3517.2928, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex(361.1257204, (-505.1));
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = new Complex(1.0);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = Complex.valueOf((-3860.9708648));
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 103.2469963295566);
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex((-1319.88713800972));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(36.33025100394601, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf(1139.258954643, (-4473.1));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-4473.1), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-41.693172322476954), complex1.getImaginary(), 0.01);
        Assert.assertEquals(53.64307572235916, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf(3.4042761729010895E29, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(3.4042761729010895E29, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.sinh();
        Complex complex3 = complex2.exp();
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3281.4004355646, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = new Complex(3092.10473);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(3092.10473, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.sinh();
        Complex complex3 = complex2.multiply((-2.356194490192345));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(3281.4004355646, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        Complex complex1 = complex0.multiply((-1379.602934));
        Complex complex2 = complex0.pow(complex1);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1379.602934), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = new Complex((-1744.2198), (-1408.05));
        Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1744.2198));
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-1744.2198), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf((-1798.29), 3467.9997116493414);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals((-8793175.075899914), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.2472938402923789E7), complex1.getImaginary(), 0.01);
        Assert.assertEquals(3467.9997116493414, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = Complex.valueOf((-1867.0352627429));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1867.0352627429), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.divide(complex1);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf((-1387.79));
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1.0000002596107465, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = new Complex(1573.373264883726, 1573.373264883726);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex0.divide(complex1);
        Complex complex3 = complex0.divide(complex2);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1573.373264883726, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(1573.373264883726, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-20.0));
        Complex complex1 = complex0.add(complex0);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = Complex.valueOf(1.2417128554477803E213);
        Complex complex1 = complex0.asin();
        Complex complex2 = complex1.reciprocal();
        double double0 = complex2.abs();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(1.2417128554477803E213, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        Complex complex1 = complex0.cos();
        double double0 = complex1.abs();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(3281.4004355646, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = Complex.valueOf((-1798.29), 3467.9997116493414);
        double double0 = complex0.abs();
        Assert.assertEquals(3906.5162132134965, double0, 0.01);
        Assert.assertEquals(3467.9997116493414, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1798.29), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex(2379961.6208859137, Double.NaN);
        Assert.assertEquals(2379961.6208859137, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(3281.4004355646, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = Complex.valueOf((-138.78430596));
        double double0 = complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-138.78430596), double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf(399.0, Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf(3.08072210937242E-8, 3.08072210937242E-8);
        List<Complex> list0 = complex0.nthRoot(455);
        Assert.assertEquals(3.08072210937242E-8, complex0.getImaginary(), 0.01);
        Assert.assertEquals(455, list0.size());
        Assert.assertEquals(3.08072210937242E-8, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        List<Complex> list0 = complex0.nthRoot(1353);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-20.0));
        complex0.nthRoot(2146896277);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = Complex.valueOf(2085.33151907);
        try {
            complex0.nthRoot((-2146414169));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -2,146,414,169
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = new Complex(1253.4609244464, 181.7229659680149);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(1253.4609244464, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = Complex.valueOf((-1798.29), 3467.9997116493414);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals((-1798.29), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.0), complex1.getReal(), 0.01);
        Assert.assertEquals(3467.9997116493414, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf(1.446257098752E12);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.9901567830446105, complex1.getReal(), 0.01);
        Assert.assertEquals(1.446257098752E12, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.tan();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = new Complex((-1.0));
        Complex complex1 = complex0.asin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = Complex.valueOf((-1798.29), 3467.9997116493414);
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.sqrt();
        double double0 = complex2.abs();
        Assert.assertEquals(1.0, double0, 0.01);
        Assert.assertEquals(0.7071067811865475, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1798.29), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = Complex.valueOf(3.4042761729010895E29, 0.0);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sqrt();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(3.4042761729010895E29, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf((-1867.0352627429));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sinh();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1867.0352627429), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf(2422.73, 2422.73);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.acos();
        Complex complex3 = complex2.sin();
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(2422.73, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = Complex.valueOf(2085.33151907);
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(2.256799240417594, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf(1.446257098752E12);
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.tanh();
        Complex complex3 = complex2.cos();
        Assert.assertTrue(complex3.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(1.446257098752E12, complex0.getReal(), 0.01);
        Assert.assertSame(complex3, complex2);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 408.5039182611049);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.atan();
        Assert.assertEquals(408.5039182611049, complex0.getImaginary(), 0.01);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = Complex.valueOf((-2593.229), (-2593.229));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex2.asin();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2593.229), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = Complex.valueOf(1236.43, 1236.43);
        Complex complex1 = complex0.subtract(Double.NaN);
        Complex complex2 = complex1.cosh();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1236.43, complex0.getReal(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals(1236.43, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = Complex.valueOf(2085.33151907);
        Complex complex1 = complex0.subtract(2085.33151907);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf((-2593.229), (-2593.229));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex2.subtract(0.0);
        Assert.assertEquals((-2593.229), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.sinh();
        Complex complex3 = complex0.subtract(complex2);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(3281.4004355646, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-20.0));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-20.0));
        Complex complex1 = complex0.negate();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = new Complex((-497.57));
        Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-497.57), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf(593.24078309, 3281.4004355646);
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertEquals(3281.4004355646, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(593.24078309, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(1543);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf((-2593.229), (-2593.229));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.multiply(1);
        Assert.assertEquals((-2593.229), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2593.229), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = Complex.valueOf(2085.33151907);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.multiply((-2146414169));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(2085.33151907, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = new Complex((-747.7339563));
        Complex complex1 = Complex.valueOf(2322.1146717932, Double.POSITIVE_INFINITY);
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(2322.1146717932, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf((-3517.2928), (-3517.2928));
        Complex complex1 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.add(complex0);
        Complex complex3 = complex0.reciprocal();
        Complex complex4 = complex2.divide(complex0);
        Complex complex5 = complex3.multiply(complex4);
        Assert.assertEquals((-3537.2928), complex2.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(1.4215478449789565E-4, complex3.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = new Complex((-497.57));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.acos();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = Complex.valueOf((-2593.229), (-2593.229));
        Complex complex1 = complex0.sinh();
        Complex complex2 = complex1.sqrt1z();
        Complex complex3 = complex1.multiply(complex2);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
        Assert.assertEquals((-2593.229), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf((-1867.0352627429));
        Complex complex1 = complex0.sinh();
        complex1.hashCode();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1867.0352627429), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf(1886.826163, 1886.826163);
        Complex complex1 = complex0.conjugate();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(1886.826163, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1886.826163, complex1.getReal(), 0.01);
        Assert.assertEquals(1886.826163, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf(1886.826163, 1886.826163);
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(1.5705313315169995, complex1.getReal(), 0.01);
        Assert.assertEquals(2.649952530854492E-4, complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 408.5039182611049);
        Complex complex1 = complex0.tan();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(408.5039182611049, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf(1.0);
        Complex complex1 = complex0.pow(1.0);
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals(1.0, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf((-1867.0352627429));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-1867.0352627429), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        boolean boolean0 = complex0.equals("(-1379.602934, -1379.602934)");
        Assert.assertEquals((-1379.602934), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
        Assert.assertEquals((-1379.602934), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1379.602934), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = Complex.valueOf((-3517.2928), (-3517.2928));
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.pow(((double) (1543)));
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.4215478449789565E-4), complex1.getReal(), 0.01);
        Assert.assertEquals(1.4215478449789565E-4, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.reciprocal();
        Assert.assertNotSame(complex2, complex1);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf((-1798.29), 3467.9997116493414);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(3467.9997116493414, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1798.29), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf((-2593.229), (-2593.229));
        Complex complex1 = complex0.divide(0.0);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-2593.229), complex0.getReal(), 0.01);
        Assert.assertEquals((-2593.229), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = Complex.valueOf(2085.33151907);
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertEquals(2085.33151907, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-20.0));
        Complex complex1 = complex0.divide((-1090.1346));
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.atan();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals((-1379.602934), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertNotSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = new Complex(408.5039182611049, Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.atan();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(408.5039182611049, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = Complex.valueOf((-255.66533085), (-255.66533085));
        Complex complex1 = complex0.add(Double.NaN);
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-255.66533085), complex0.getReal(), 0.01);
        Assert.assertEquals((-255.66533085), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertSame(complex2, complex1);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-20.0));
        Complex complex1 = complex0.add(231.0);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.cosh();
        double double0 = complex1.abs();
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = new Complex(4.831833881898182E203, 650.3472299779895);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf(2085.33151907);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.add(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2085.33151907, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Assert.assertTrue(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf(1.446257098752E12);
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals(1.446257098752E12, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        String string0 = complex0.toString();
        Assert.assertEquals("(-1379.602934, -1379.602934)", string0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf((-1379.602934), (-1379.602934));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-1379.602934), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1379.602934), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf(2085.33151907);
        complex0.getField();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2085.33151907, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = Complex.valueOf(1.446257098752E12);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(1.446257098752E12, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 0.0);
        Complex complex1 = complex0.reciprocal();
        Complex complex2 = complex1.conjugate();
        // AssertFixer: old assertion Assert.assertFalse(complex0.isNaN())
        Assert.assertFalse(complex0.isNaN());
        // AssertFixer: old assertion Assert.assertFalse(complex0.isInfinite())
        Assert.assertFalse(complex0.isInfinite());
        // AssertFixer: old assertion Assert.assertSame(complex2, complex1)
        Assert.assertNotSame(complex2, complex1);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }
}

