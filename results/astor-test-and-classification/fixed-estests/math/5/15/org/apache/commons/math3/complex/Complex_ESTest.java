/**
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 02:08:57 GMT 2017
 */


package org.apache.commons.math3.complex;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import java.util.List;
import org.junit.Test;

public class Complex_ESTest extends Complex_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        try {
            complex0.nthRoot((-164));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: -164
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test001() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Complex complex1 = complex0.tan();
        Assert.assertEquals((-1.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-6.331009331992412E-18), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test002() throws Throwable {
        Complex complex0 = new Complex(0.0, ((double) (-1851)));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals((-1851.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(30.422031490352513, complex1.getReal(), 0.01);
        Assert.assertEquals((-30.422031490352516), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.sinh();
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertTrue(complex1.isNaN());
    }

    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = Complex.valueOf(0.0, 84.0);
        boolean boolean0 = complex1.equals(complex0);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.equals(((Object) (complex1))));
        Assert.assertFalse(boolean0);
        Assert.assertEquals(84.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Complex complex0 = new Complex((-3650.0), (-3650.0));
        Complex complex1 = complex0.atan();
        boolean boolean0 = complex0.equals(complex1);
        Assert.assertEquals((-1.3698629965615654E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1.570659340491813), complex1.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Complex complex0 = new Complex((-4506.4003), (-4506.4003));
        Complex complex1 = complex0.createComplex(0, (-3102.1208149311));
        Complex complex2 = complex1.reciprocal();
        Assert.assertEquals((-3102.1208149311), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(3.2236010770012854E-4, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals(3.1277367696734646E-4, complex1.getReal(), 0.01);
        Assert.assertEquals(3197.2, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test008() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test009() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2202.2);
        Complex complex1 = complex0.tanh();
        Assert.assertEquals(2202.2, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertEquals((-0.05651020474156689), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test010() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.tan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.19049867902644907, complex1.getReal(), 0.01);
        Assert.assertEquals(4.308816643345461E286, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Complex complex0 = new Complex(1554.3, 1554.3);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test012() throws Throwable {
        Complex complex0 = Complex.valueOf((-1724.3), (-1724.3));
        Complex complex1 = complex0.log();
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertEquals((-1732.099150040286), complex2.getReal(), 0.01);
        Assert.assertEquals((-1721.9438055098076), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Complex complex0 = Complex.valueOf(2454.333, 2454.333);
        Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
        Assert.assertEquals(2454.333, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2454.333, complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2454.333, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), 2.5904487437231458E96);
        Complex complex1 = complex0.subtract(2.5904487437231458E96);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-2.5904487437231458E96), complex1.getReal(), 0.01);
        Assert.assertEquals((-2633.3795), complex0.getReal(), 0.01);
        Assert.assertEquals(2.5904487437231458E96, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2.5904487437231458E96, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Complex complex0 = Complex.valueOf(1079.2776781866135, 1079.2776781866135);
        Complex complex1 = complex0.sqrt1z();
        Assert.assertEquals((-1079.2774465502343), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1079.2776781866135, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test016() throws Throwable {
        Complex complex0 = Complex.valueOf(2454.333, 2454.333);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2454.333, complex0.getReal(), 0.01);
        Assert.assertEquals(2454.333, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Complex complex0 = new Complex(0.0, 32.829350191);
        Complex complex1 = complex0.sinh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.9876424567871879, complex1.getImaginary(), 0.01);
        Assert.assertEquals(32.829350191, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test018() throws Throwable {
        Complex complex0 = new Complex(1285.37309572);
        Complex complex1 = complex0.sqrt();
        Complex complex2 = complex1.sinh();
        Assert.assertEquals(35.85210029719319, complex1.getReal(), 0.01);
        Assert.assertEquals(1.8592565838414082E15, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Complex complex0 = Complex.valueOf(1313.2652840024778);
        Complex complex1 = complex0.subtract(1313.2652840024778);
        Complex complex2 = complex1.sin();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(1313.2652840024778, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test020() throws Throwable {
        Complex complex0 = Complex.valueOf(1313.2652840024778);
        Complex complex1 = complex0.sin();
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(1313.2652840024778, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.07947091188255219, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test021() throws Throwable {
        Complex complex0 = Complex.valueOf((-1724.3), (-1724.3));
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.sin();
        Assert.assertEquals(7.799150040286059, complex1.getReal(), 0.01);
        Assert.assertEquals((-0.28651441424198254), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
        Assert.assertEquals(5.314752717088384, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2202.2);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.pow(complex0);
        Assert.assertEquals((-8.390359371789174), complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-561.1096177889723));
        Complex complex1 = complex0.pow(697.302768533067);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals((-561.1096177889723), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test024() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.negate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test025() throws Throwable {
        Complex complex0 = Complex.valueOf(2454.333, 2454.333);
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-2454.333), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2454.333, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2454.333), complex1.getReal(), 0.01);
        Assert.assertEquals(2454.333, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test026() throws Throwable {
        Complex complex0 = Complex.valueOf((-1338.83200337), 2784.8250238315);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test027() throws Throwable {
        Complex complex0 = Complex.valueOf((-1338.83200337), 2784.8250238315);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals((-5962779.280110387), complex1.getReal(), 0.01);
        Assert.assertEquals((-7456825.73138247), complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(2784.8250238315, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test028() throws Throwable {
        Complex complex0 = Complex.valueOf((-1724.3), (-1724.3));
        Complex complex1 = complex0.multiply(1073359260);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-1724.3), complex0.getReal(), 0.01);
        Assert.assertEquals((-1724.3), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.850793372018E12), complex1.getReal(), 0.01);
        Assert.assertEquals((-1.850793372018E12), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Complex complex0 = new Complex(1.12996721591364E-202, 0.7615941559557649);
        Complex complex1 = complex0.multiply((-1298.584948157));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1.467358418496324E-199), complex1.getReal(), 0.01);
        Assert.assertEquals(1.12996721591364E-202, complex0.getReal(), 0.01);
        Assert.assertEquals(0.7615941559557649, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-988.9947075284912), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Complex complex0 = Complex.valueOf(913.89141466);
        Complex complex1 = complex0.divide(913.89141466);
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test031() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.log();
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test032() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2202.2);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.log();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2202.2002270456696, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        boolean boolean0 = complex0.isNaN();
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Complex complex0 = Complex.valueOf(376.157236, 376.157236);
        Complex complex1 = complex0.pow(376.157236);
        boolean boolean0 = complex1.isInfinite();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(376.157236, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(boolean0);
        Assert.assertEquals(376.157236, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test035() throws Throwable {
        Complex complex0 = new Complex(0.0);
        complex0.getReal();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test036() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        double double0 = complex0.getReal();
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test037() throws Throwable {
        Complex complex0 = new Complex(0.6218148469924927);
        double double0 = complex0.getImaginary();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.6218148469924927, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test038() throws Throwable {
        Complex complex0 = new Complex((-1432.52428843142), (-1432.52428843142));
        double double0 = complex0.getImaginary();
        Assert.assertEquals((-1432.52428843142), complex0.getReal(), 0.01);
        Assert.assertEquals((-1432.52428843142), double0, 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test039() throws Throwable {
        Complex complex0 = Complex.valueOf((-2088.3928123081), (-2088.3928123081));
        Complex complex1 = complex0.sin();
        double double0 = complex1.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2088.3928123081), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2088.3928123081), complex0.getReal(), 0.01);
        Assert.assertEquals(2.356194490192345, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test040() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2202.2);
        Complex complex1 = complex0.acos();
        double double0 = complex1.getArgument();
        Assert.assertEquals((-1.3857242648182269), double0, 0.01);
        Assert.assertEquals(2202.2, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test041() throws Throwable {
        Complex complex0 = Complex.valueOf(2454.333, 2454.333);
        Complex complex1 = complex0.exp();
        Assert.assertEquals(2454.333, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test042() throws Throwable {
        Complex complex0 = Complex.valueOf((-1724.3), (-1724.3));
        Complex complex1 = complex0.log();
        Complex complex2 = complex1.exp();
        Assert.assertEquals((-1724.3000000000006), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1724.3000000000004), complex2.getReal(), 0.01);
        Assert.assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test043() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(0.043007105588912964, 0.043007105588912964);
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(0.043007105588912964, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.043007105588912964, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Complex complex0 = Complex.valueOf(1313.2652840024778);
        Complex complex1 = Complex.valueOf((-3512.5), (-3512.5));
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(0.18694167743807513, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-3512.5), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.18694167743807513), complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1313.2652840024778, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Complex complex0 = Complex.valueOf((-2088.3928123081), (-2088.3928123081));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.divide(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test046() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(((double) (2147483578)));
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-8.256840595035324E-7), complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test047() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.createComplex(Double.NaN, 1871.5329);
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
        Assert.assertEquals(1871.5329, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test048() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test049() throws Throwable {
        Complex complex0 = Complex.valueOf((-1770.9304338329296));
        Complex complex1 = complex0.createComplex((-1770.9304338329296), 0.0);
        Assert.assertFalse(complex1.isNaN());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertEquals((-1770.9304338329296), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test050() throws Throwable {
        Complex complex0 = new Complex((-2550.4), (-2550.4));
        Complex complex1 = complex0.cosh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2550.4), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test051() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-561.1096177889723));
        Complex complex1 = complex0.cosh();
        Assert.assertEquals((-0.3290799793995477), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-561.1096177889723), complex0.getImaginary(), 0.01);
        Assert.assertEquals(3.8784628568803216E-15, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test052() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        Complex complex1 = complex0.cos();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test053() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertEquals((-1773.1429584002105), complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test054() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.conjugate();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Complex complex0 = Complex.valueOf(4.589506477601956E-9, (-213.94971));
        Complex complex1 = complex0.tan();
        Complex complex2 = complex1.atan();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(4.589506477601956E-9, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Complex complex0 = new Complex(0.0, 0.0);
        Complex complex1 = complex0.atan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test057() throws Throwable {
        Complex complex0 = Complex.valueOf((-6.046851543572312E12));
        Complex complex1 = complex0.asin();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test058() throws Throwable {
        Complex complex0 = new Complex((-4506.4003), (-4506.4003));
        Complex complex1 = complex0.multiply(0);
        Complex complex2 = complex1.asin();
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test059() throws Throwable {
        Complex complex0 = new Complex((-4506.4003), (-4506.4003));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.asin();
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test060() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test061() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.add(complex0);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test062() throws Throwable {
        Complex complex0 = Complex.valueOf(2454.333, 2454.333);
        Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(2454.333, complex1.getImaginary(), 0.01);
        Assert.assertEquals(2454.333, complex0.getReal(), 0.01);
        Assert.assertEquals(2454.333, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test063() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Complex complex1 = complex0.add(20.0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test064() throws Throwable {
        Complex complex0 = Complex.valueOf((-6.046851543572312E12));
        Complex complex1 = complex0.add(1.0077883359971829E-8);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-6.046851543572312E12), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-6.046851543572312E12), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test065() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.acos();
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.acos();
        Complex complex2 = complex1.acos();
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(1.0232274785475506, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Complex complex0 = new Complex((-664.561));
        try {
            complex0.subtract(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Complex complex0 = Complex.valueOf(3861.1475746290334);
        try {
            complex0.pow(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test069() throws Throwable {
        Complex complex0 = new Complex(4038.49);
        try {
            complex0.multiply(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test070() throws Throwable {
        Complex complex0 = new Complex(303.8292924292, (-674.20779));
        try {
            complex0.divide(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test071() throws Throwable {
        Complex complex0 = new Complex((-1432.52428843142), (-1432.52428843142));
        try {
            complex0.add(((Complex) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // null is not allowed
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.util.MathUtils", e);
        }
    }

    @Test(timeout = 4000)
    public void test072() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.sqrt();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test073() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(23.3536025462377, complex1.getReal(), 0.01);
        Assert.assertEquals((-2633.3795), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-56.3805839973979), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test074() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sqrt();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(3197.2, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test075() throws Throwable {
        Complex complex0 = Complex.valueOf((-1338.83200337), 2784.8250238315);
        Complex complex1 = complex0.log();
        Assert.assertEquals(2.0189336655258603, complex1.getImaginary(), 0.01);
        Assert.assertEquals(8.035906551242288, complex1.getReal(), 0.01);
        Assert.assertEquals(2784.8250238315, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test076() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.log();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3197.2, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex2.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-8.248332290732976E-35));
        Complex complex1 = complex0.exp();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        Complex complex0 = Complex.valueOf((-1724.3), (-1724.3));
        Complex complex1 = complex0.subtract(complex0);
        Assert.assertEquals((-1724.3), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1724.3), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        Complex complex0 = Complex.valueOf((-6.046851543572312E12));
        Complex complex1 = complex0.negate();
        Assert.assertEquals((-6.046851543572312E12), complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals(6.046851543572312E12, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test080() throws Throwable {
        Complex complex0 = Complex.valueOf((-1770.9304338329296));
        Complex complex1 = complex0.multiply(0.0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1770.9304338329296), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test081() throws Throwable {
        Complex complex0 = Complex.valueOf(2454.333, 2454.333);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.multiply(complex0);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2454.333, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test082() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertTrue(complex1.isNaN());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test083() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex0.add(complex2);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test084() throws Throwable {
        Complex complex0 = new Complex(0.0);
        double double0 = complex0.abs();
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test085() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = complex0.acos();
        double double0 = complex1.abs();
        Assert.assertEquals(2.356194473427032, complex1.getReal(), 0.01);
        Assert.assertEquals((-2633.3795), complex0.getImaginary(), 0.01);
        Assert.assertEquals(9.221829775520467, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test086() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        double double0 = complex0.abs();
        Assert.assertEquals((-2633.3795), complex0.getImaginary(), 0.01);
        Assert.assertEquals(3724.1610037752803, double0, 0.01);
        Assert.assertEquals((-2633.3795), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test087() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        double double0 = complex0.abs();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Complex complex0 = new Complex(375.157, Double.POSITIVE_INFINITY);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(375.157, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.7615941559557649);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
        Assert.assertEquals(0.7615941559557649, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test090() throws Throwable {
        Complex complex0 = new Complex(1252.059255427, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1252.059255427, complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test091() throws Throwable {
        Complex complex0 = new Complex(Double.NaN, Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test092() throws Throwable {
        Complex complex0 = Complex.valueOf((-2094.0), 0.0);
        boolean boolean0 = complex0.isInfinite();
        Assert.assertEquals((-2094.0), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test093() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        complex0.getReal();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test094() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2202.2);
        double double0 = complex0.getImaginary();
        Assert.assertEquals(2202.2, double0, 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test095() throws Throwable {
        Complex complex0 = Complex.valueOf(2970.7100765, Double.NaN);
        Assert.assertEquals(Double.NaN, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test096() throws Throwable {
        Complex complex0 = Complex.valueOf(3442.175468314244, 2808.695205);
        List<Complex> list0 = complex0.nthRoot(1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(2808.695205, complex0.getImaginary(), 0.01);
        Assert.assertEquals(3442.175468314244, complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test097() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        List<Complex> list0 = complex0.nthRoot(3408);
        Assert.assertEquals(1, list0.size());
        Assert.assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test098() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0);
        try {
            complex0.nthRoot(0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // cannot compute nth root for null or negative n: 0
            // 
            EvoAssertions.verifyException("org.apache.commons.math3.complex.Complex", e);
        }
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        complex0.nthRoot(2147483578);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test100() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test101() throws Throwable {
        Complex complex0 = Complex.valueOf(913.89141466);
        Complex complex1 = complex0.tanh();
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
        Assert.assertEquals(913.89141466, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test102() throws Throwable {
        Complex complex0 = Complex.valueOf((-2088.3928123081), (-2088.3928123081));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.tanh();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2088.3928123081), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2088.3928123081), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test103() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.tanh();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3197.2, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test104() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.tan();
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test105() throws Throwable {
        Complex complex0 = Complex.valueOf(2454.333, 2454.333);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.tan();
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
        Assert.assertEquals(2454.333, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test106() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.tan();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test107() throws Throwable {
        Complex complex0 = new Complex(0.0, 2808.695205);
        Complex complex1 = complex0.sqrt();
        Assert.assertEquals(2808.695205, complex0.getImaginary(), 0.01);
        Assert.assertEquals(37.474626115546506, complex1.getReal(), 0.01);
        Assert.assertEquals(37.4746261155465, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test108() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN, (-8.248332290732976E-35));
        Complex complex1 = complex0.sinh();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test109() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.sin();
        Assert.assertEquals(3197.2, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test110() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
    }

    @Test(timeout = 4000)
    public void test111() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = complex0.pow((-2633.3795));
        Complex complex2 = complex1.divide(complex1);
        Complex complex3 = complex2.cosh();
        Assert.assertEquals((-2633.3795), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertSame(complex3, complex2);
    }

    @Test(timeout = 4000)
    public void test112() throws Throwable {
        Complex complex0 = Complex.valueOf((-2088.3928123081), (-2088.3928123081));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        Complex complex3 = complex2.cos();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals((-2088.3928123081), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-2088.3928123081), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test113() throws Throwable {
        Complex complex0 = Complex.valueOf((-2088.3928123081), (-2088.3928123081));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        Complex complex3 = complex2.atan();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2088.3928123081), complex0.getReal(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2088.3928123081), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test114() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        Complex complex1 = complex0.atan();
        Assert.assertEquals((-4.107226967119929E-15), complex1.getReal(), 0.01);
        Assert.assertEquals((-4.052314039881838E-15), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test115() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.asin();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test116() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.acos();
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test117() throws Throwable {
        Complex complex0 = new Complex((-664.561));
        Complex complex1 = complex0.subtract(Double.NaN);
        Complex complex2 = complex0.subtract(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals((-664.561), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test118() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        Complex complex1 = complex0.subtract((-9.865691193993138E-8));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-4.107226967119929E-15), complex1.getImaginary(), 0.01);
        Assert.assertEquals(9.865690783270442E-8, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test119() throws Throwable {
        Complex complex0 = Complex.valueOf(Double.NaN);
        Complex complex1 = complex0.subtract(Double.NaN);
        Assert.assertSame(complex1, complex0);
    }

    @Test(timeout = 4000)
    public void test120() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.pow(complex0);
        Complex complex2 = complex1.subtract(complex0);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test121() throws Throwable {
        Complex complex0 = Complex.valueOf((-2088.3928123081), (-2088.3928123081));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        Complex complex3 = complex2.negate();
        Assert.assertTrue(complex3.isNaN());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-2088.3928123081), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2088.3928123081), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test122() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), (-1773.1429584002105));
        Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
        Assert.assertEquals((-1773.1429584002105), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test123() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(((double) (2147483578)));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test124() throws Throwable {
        Complex complex0 = new Complex((-3650.0), (-3650.0));
        Complex complex1 = complex0.multiply(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-3650.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-3650.0), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test125() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.divide(complex1);
        Complex complex3 = complex2.multiply(3.901467289560222E131);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test126() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.multiply(1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test127() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.multiply(complex0);
        Complex complex2 = complex1.multiply(1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test128() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Complex complex1 = complex0.multiply(0);
        Complex complex2 = complex1.pow(12.376030913250691);
        Complex complex3 = complex2.multiply(0);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex3.isNaN());
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test129() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex2.isInfinite());
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test130() throws Throwable {
        Complex complex0 = Complex.valueOf(2454.333, 2454.333);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.multiply(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(2454.333, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test131() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.multiply(complex0);
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test132() throws Throwable {
        Complex complex0 = Complex.valueOf((-2088.3928123081), (-2088.3928123081));
        Complex complex1 = complex0.sin();
        Complex complex2 = complex1.sin();
        Complex complex3 = complex1.multiply(complex2);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-2088.3928123081), complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals((-2088.3928123081), complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test133() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        Complex complex1 = complex0.cosh();
        complex1.hashCode();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(3197.2, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test134() throws Throwable {
        Complex complex0 = Complex.valueOf(2507.1, 2507.1);
        complex0.hashCode();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(2507.1, complex0.getImaginary(), 0.01);
        Assert.assertEquals(2507.1, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test135() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), 2.5904487437231458E96);
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.multiply(963.65845925);
        boolean boolean0 = complex1.equals(complex2);
        Assert.assertFalse(complex2.equals(((Object) (complex0))));
        Assert.assertTrue(boolean0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(2.5904487437231458E96, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test136() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = complex0.acos();
        Complex complex2 = complex0.cos();
        Complex complex3 = complex1.add(complex0);
        Complex complex4 = complex3.sin();
        boolean boolean0 = complex2.equals(complex4);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
        Assert.assertEquals((-2631.023305526573), complex3.getReal(), 0.01);
        Assert.assertFalse(complex4.equals(((Object) (complex2))));
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test137() throws Throwable {
        Complex complex0 = new Complex((-1.2995096996762734E7), (-1.2995096996762734E7));
        boolean boolean0 = complex0.equals(complex0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertTrue(boolean0);
        Assert.assertEquals((-1.2995096996762734E7), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.2995096996762734E7), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test138() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        Object object0 = new Object();
        boolean boolean0 = complex0.equals(object0);
        Assert.assertFalse(boolean0);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test139() throws Throwable {
        Complex complex0 = Complex.valueOf((-1338.83200337), 2784.8250238315);
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-1338.83200337), complex0.getReal(), 0.01);
        Assert.assertEquals((-2.916743026320755E-4), complex1.getImaginary(), 0.01);
        Assert.assertEquals(2784.8250238315, complex0.getImaginary(), 0.01);
        Assert.assertEquals((-1.4022528797417086E-4), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test141() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        Complex complex1 = complex0.reciprocal();
        Assert.assertEquals((-1.2173663739615788E14), complex1.getReal(), 0.01);
        Assert.assertEquals(1.2173663739615788E14, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test142() throws Throwable {
        Complex complex0 = Complex.valueOf(1313.2652840024778);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.reciprocal();
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1313.2652840024778, complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test143() throws Throwable {
        Complex complex0 = new Complex((-5353.71953328));
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Assert.assertEquals(0.0, complex1.getImaginary(), 0.01);
        Assert.assertEquals((-5353.71953328), complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test144() throws Throwable {
        Complex complex0 = Complex.valueOf((-1773.1429584002105), Double.POSITIVE_INFINITY);
        Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
        Complex complex2 = complex1.sqrt1z();
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
        Assert.assertSame(complex2, complex1);
        Assert.assertEquals((-1773.1429584002105), complex0.getReal(), 0.01);
        Assert.assertTrue(complex0.isInfinite());
    }

    @Test(timeout = 4000)
    public void test145() throws Throwable {
        Complex complex0 = new Complex(0.0);
        Complex complex1 = complex0.divide(0.0);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.equals(((Object) (complex0))));
        Assert.assertEquals(Double.NaN, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test146() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.divide(Double.NaN);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(4.308816643345461E286, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test147() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        Complex complex1 = complex0.divide((-4.107226967119929E-15));
        Assert.assertEquals(1.0, complex1.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(1.0, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test148() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Complex complex1 = complex0.multiply(0);
        Complex complex2 = complex1.pow(12.376030913250691);
        Complex complex3 = complex2.divide((-1.0));
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertTrue(complex3.isNaN());
    }

    @Test(timeout = 4000)
    public void test149() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertEquals(0.0, complex2.getReal(), 0.01);
        Assert.assertEquals((-2633.3795), complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test150() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.reciprocal();
        Complex complex3 = complex1.divide(complex2);
        Assert.assertEquals(0.0, complex2.getImaginary(), 0.01);
        Assert.assertEquals(4.308816643345461E286, complex0.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex3.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test151() throws Throwable {
        Complex complex0 = Complex.valueOf(1313.2652840024778);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex0.divide(complex1);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(1313.2652840024778, complex0.getReal(), 0.01);
        Assert.assertTrue(complex2.equals(((Object) (complex1))));
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test152() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Complex complex1 = complex0.multiply(0);
        Complex complex2 = complex1.pow(12.376030913250691);
        Complex complex3 = complex2.divide(complex1);
        Assert.assertNotSame(complex3, complex2);
        Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertEquals((-0.0), complex1.getReal(), 0.01);
        Assert.assertTrue(complex3.equals(((Object) (complex2))));
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test153() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.conjugate();
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(3197.2, complex0.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
    }

    @Test(timeout = 4000)
    public void test154() throws Throwable {
        Complex complex0 = new Complex((-20.0), (-20.0));
        Complex complex1 = complex0.add(Double.NaN);
        Assert.assertEquals((-20.0), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals((-20.0), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test155() throws Throwable {
        Complex complex0 = Complex.valueOf(3197.2);
        Complex complex1 = complex0.cosh();
        Complex complex2 = complex1.add((-804.109562));
        Assert.assertEquals(3197.2, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, complex0.getImaginary(), 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test156() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = complex0.cos();
        Complex complex2 = complex1.divide(complex0);
        Complex complex3 = complex2.add(complex0);
        Assert.assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
        Assert.assertEquals((-2633.3795), complex0.getReal(), 0.01);
        Assert.assertTrue(complex1.isInfinite());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test157() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = complex0.acos();
        complex1.equals(complex0);
        Assert.assertEquals(2.356194473427032, complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test158() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        Complex complex1 = complex0.sqrt1z();
        Complex complex2 = complex1.divide(complex1);
        double double0 = complex2.abs();
        Assert.assertEquals(4.308816643345461E286, complex0.getReal(), 0.01);
        Assert.assertFalse(complex2.isInfinite());
        Assert.assertEquals(Double.NaN, double0, 0.01);
        Assert.assertEquals(Double.NaN, complex2.getReal(), 0.01);
        Assert.assertEquals(0.0, complex1.getReal(), 0.01);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test159() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = complex0.tanh();
        Complex complex2 = complex1.cosh();
        Complex complex3 = complex2.pow(1806.74300884);
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
        Assert.assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
        Assert.assertFalse(complex3.isInfinite());
        Assert.assertEquals((-0.0), complex2.getImaginary(), 0.01);
        Assert.assertEquals((-2633.3795), complex0.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test160() throws Throwable {
        Complex complex0 = Complex.valueOf(0.0, 2202.2);
        boolean boolean0 = complex0.isNaN();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals(2202.2, complex0.getImaginary(), 0.01);
        Assert.assertEquals(0.0, complex0.getReal(), 0.01);
        Assert.assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test161() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        String string0 = complex0.toString();
        Assert.assertFalse(complex0.isNaN());
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals("(-2633.3795, -2633.3795)", string0);
    }

    @Test(timeout = 4000)
    public void test162() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        Complex complex1 = ((Complex) (complex0.readResolve()));
        Assert.assertEquals((-2633.3795), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex1.isInfinite());
        Assert.assertTrue(complex1.equals(((Object) (complex0))));
        Assert.assertFalse(complex1.isNaN());
        Assert.assertEquals((-2633.3795), complex1.getReal(), 0.01);
    }

    @Test(timeout = 4000)
    public void test163() throws Throwable {
        Complex complex0 = Complex.valueOf((-2633.3795), (-2633.3795));
        complex0.getField();
        Assert.assertEquals((-2633.3795), complex0.getReal(), 0.01);
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertEquals((-2633.3795), complex0.getImaginary(), 0.01);
        Assert.assertFalse(complex0.isNaN());
    }

    @Test(timeout = 4000)
    public void test164() throws Throwable {
        Complex complex0 = Complex.valueOf(4.308816643345461E286);
        double double0 = complex0.getArgument();
        Assert.assertFalse(complex0.isInfinite());
        Assert.assertFalse(complex0.isNaN());
        Assert.assertEquals(4.308816643345461E286, complex0.getReal(), 0.01);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test165() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        Complex complex1 = complex0.pow((-4.107226967119929E-15));
        Complex complex2 = complex1.divide((-4.107226967119929E-15));
        Complex complex3 = complex0.add(complex2);
        Complex complex4 = complex3.acos();
        Assert.assertEquals(35.35050620855721, complex4.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test166() throws Throwable {
        Complex complex0 = new Complex((-4.107226967119929E-15), (-4.107226967119929E-15));
        Complex complex1 = complex0.asin();
        Assert.assertEquals((-4.107226967119929E-15), complex1.getReal(), 0.01);
        Assert.assertEquals((-3.996802888650556E-15), complex1.getImaginary(), 0.01);
    }

    @Test(timeout = 4000)
    public void test140() throws Throwable {
        Complex complex0 = Complex.valueOf((-1724.3), (-1724.3));
        Complex complex1 = complex0.exp();
        Complex complex2 = complex1.reciprocal();
        boolean boolean0 = complex0.equals(complex2);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex1.getImaginary(), 0.01)
        Assert.assertEquals(-0.0, complex1.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(complex1.isInfinite())
        Assert.assertFalse(complex1.isInfinite());
        // AssertFixer: old assertion Assert.assertFalse(complex2.equals(((Object) (complex1))))
        Assert.assertFalse(complex2.equals(((Object) (complex1))));
        // AssertFixer: old assertion Assert.assertEquals(Double.NaN, complex2.getImaginary(), 0.01)
        Assert.assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-0.0), complex1.getReal(), 0.01)
        Assert.assertEquals(-0.0, complex1.getReal(), 0.01);
        // AssertFixer: old assertion Assert.assertEquals((-1724.3), complex0.getImaginary(), 0.01)
        Assert.assertEquals(-1724.3, complex0.getImaginary(), 0.01);
        // AssertFixer: old assertion Assert.assertFalse(boolean0)
        Assert.assertFalse(boolean0);
    }
}

