/**
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 19:21:32 GMT 2017
 */


package org.apache.commons.math.analysis.solvers;

import org.junit.Assert;
import org.evosuite.runtime.EvoAssertions;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;

public class BrentSolver_ESTest extends BrentSolver_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (expm1Function0)));
        brentSolver0.setFunctionValueAccuracy(3.336146802982907E-4);
        SinFunction sinFunction0 = new SinFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (sinFunction0)), 1.0, 1876.9176844224592, 3.75);
        Assert.assertEquals(3, brentSolver0.getIterationCount());
        Assert.assertEquals(3.141357313738196, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        try {
            Expm1Function expm1Function0 = new Expm1Function();
            BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (expm1Function0)));
            double double0 = brentSolver0.solve(3.336146802982907E-4, 1876.9176844224592, 1630.36085);
            Assert.assertEquals(28, brentSolver0.getIterationCount());
            Assert.assertEquals(1794.7320728359762, double0, 0.01);
            org.junit.Assert.fail("Expecting exception: ");
        } catch (IllegalArgumentException expectedException__IllegalArgumentException) {
            org.junit.Assert.assertTrue(true);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (sinFunction0)));
        brentSolver0.solve(((UnivariateRealFunction) (sinFunction0)), 1.0E-15, 5.005818627646397E-7);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (quinticFunction0)), (-1.0000027798591518), 1.0E-15, (-1.0000000000264067));
        Assert.assertEquals(2.5000000000000007E-16, double0, 0.01);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        BrentSolver brentSolver0 = new BrentSolver();
        brentSolver0.functionValueAccuracy = -1671.560807906;
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (sinFunction0)), (-1671.560807906), 2521.9978815265504, 0.0);
        Assert.assertEquals(1, brentSolver0.getIterationCount());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (quinticFunction0)), 1.0E-15, 2900.90493281121, 1255.4136110475781);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
        Assert.assertEquals(2.5000000000000007E-16, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        BrentSolver brentSolver0 = new BrentSolver();
        brentSolver0.setFunctionValueAccuracy(0.0);
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (sinFunction0)), (-1671.560807906), 2521.9978815265504, 0.0);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (quinticFunction0)), (-1728.9019940979315), 1255.4136110475781);
        Assert.assertEquals(32, brentSolver0.getIterationCount());
        Assert.assertEquals((-0.999999992575109), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (expm1Function0)));
        double double0 = brentSolver0.solve((-1551.71), 1087.168296117144, 0.0);
        Assert.assertEquals(0.0, double0, 0.01);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (expm1Function0)));
        double double0 = brentSolver0.solve((-314.1118368334), 1876.9176844224592, 3.336146802982907E-4);
        Assert.assertEquals(4, brentSolver0.getIterationCount());
        Assert.assertEquals((-2.9562980025685075E-9), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        QuinticFunction quinticFunction0 = new QuinticFunction();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (quinticFunction0)));
        double double0 = brentSolver0.solve(0.0, 1907.736343);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (expm1Function0)));
        double double0 = brentSolver0.solve(Double.NaN, Double.NaN);
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        Expm1Function expm1Function0 = new Expm1Function();
        // Undeclared exception!
        try {
            brentSolver0.solve(((UnivariateRealFunction) (expm1Function0)), 1.0, (-1898.839289), (-1898.839289));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // invalid interval, initial value parameters:  lower=1, initial=-1,898.839, upper=-1,898.839
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        // Undeclared exception!
        try {
            brentSolver0.solve(((UnivariateRealFunction) (null)), 1.0, 3213.22512554392, 1781.796135);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        brentSolver0.setMaximalIterationCount((-620));
        try {
            brentSolver0.solve(((UnivariateRealFunction) (quinticFunction0)), (-1713.5233477561337), 1255.4136110475781);
            Assert.fail("Expecting exception: Exception");
        } catch (Exception e) {
            // 
            // Maximal number of iterations (-620) exceeded
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        // Undeclared exception!
        try {
            brentSolver0.solve(((UnivariateRealFunction) (null)), 1972.616, 2467.5239678629);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (expm1Function0)));
        // Undeclared exception!
        try {
            brentSolver0.solve((-320.426421006), (-320.426421006), (-320.426421006));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // invalid interval, initial value parameters:  lower=-320.426, initial=-320.426, upper=-320.426
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (expm1Function0)));
        brentSolver0.setMaximalIterationCount((-1179052));
        try {
            brentSolver0.solve((-314.1118368334), 1876.9176844224592, 1630.36085);
            Assert.fail("Expecting exception: Exception");
        } catch (Exception e) {
            // 
            // Maximal number of iterations (-1,179,052) exceeded
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        // Undeclared exception!
        try {
            brentSolver0.solve((-290.4987350356941), 0.0, (-157.4204534));
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Expm1Function expm1Function0 = new Expm1Function();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (expm1Function0)));
        // Undeclared exception!
        try {
            brentSolver0.solve(1795.57595982, 1902.0);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // function values at endpoints do not have different signs.  Endpoints: [1,795.576, 1,902], Values: [\u221E, \u221E]
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        // Undeclared exception!
        try {
            brentSolver0.solve((-1.0), Double.NaN);
            Assert.fail("Expecting exception: NullPointerException");
        } catch (NullPointerException e) {
            // 
            // no message in exception (getMessage() returned null)
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        BrentSolver brentSolver0 = null;
        try {
            brentSolver0 = new BrentSolver(((UnivariateRealFunction) (null)));
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // function to solve cannot be null
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (quinticFunction0)), (-15.916623132374944), 1255.4136110475781);
        Assert.assertEquals(36, brentSolver0.getIterationCount());
        Assert.assertEquals(0.9999998302499645, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        SinFunction sinFunction0 = new SinFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (sinFunction0)), (-1567.267704), 1.0E-15);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
        Assert.assertEquals(1.0E-15, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        Expm1Function expm1Function0 = new Expm1Function();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (expm1Function0)), Double.NaN, Double.NaN);
        Assert.assertEquals(Double.NaN, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test26() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (quinticFunction0)), 0.0, 1255.4136110475781);
        Assert.assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test27() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (sinFunction0)));
        // Undeclared exception!
        try {
            brentSolver0.solve(((UnivariateRealFunction) (sinFunction0)), (-582.679982), 5.005818627646397E-7);
            Assert.fail("Expecting exception: IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // 
            // function values at endpoints do not have different signs.  Endpoints: [-582.68, 0], Values: [0.996, 0]
            // 
            EvoAssertions.verifyException("org.apache.commons.math.MathRuntimeException", e);
        }
    }

    @Test(timeout = 4000)
    public void test28() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (quinticFunction0)), 1.0E-15, 0.19442313661291902);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
        Assert.assertEquals(1.0E-15, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test29() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (quinticFunction0)), (-0.999999992575109), 1.0E-15);
        Assert.assertEquals(1.0E-15, double0, 0.01);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
    }

    @Test(timeout = 4000)
    public void test30() throws Throwable {
        try {
            BrentSolver brentSolver0 = new BrentSolver();
            QuinticFunction quinticFunction0 = new QuinticFunction();
            UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
            double double0 = brentSolver0.solve(univariateRealFunction0, (-1961.1921), 1.0E-15, (-1.4830193029650036));
            Assert.assertEquals(8, brentSolver0.getIterationCount());
            Assert.assertEquals((-0.8222165327294495), double0, 0.01);
            org.junit.Assert.fail("Expecting exception: ");
        } catch (IllegalArgumentException expectedException__IllegalArgumentException) {
            org.junit.Assert.assertTrue(true);
        }
    }

    @Test(timeout = 4000)
    public void test31() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        SinFunction sinFunction0 = new SinFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (sinFunction0)), (-1961.1921), 1.0E-15, (-1.4830193029650036));
        Assert.assertEquals(0, brentSolver0.getIterationCount());
        Assert.assertEquals(1.0E-15, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test32() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        Expm1Function expm1Function0 = new Expm1Function();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (expm1Function0)), (-1961.1921), 1.0E-15, (-1.4830193029650036));
        Assert.assertEquals(1, brentSolver0.getIterationCount());
        Assert.assertEquals(1.0E-15, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test33() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        SinFunction sinFunction0 = new SinFunction();
        double double0 = brentSolver0.solve(((UnivariateRealFunction) (sinFunction0)), 1.0E-15, 3079.9580345, 4.006951128676661E-7);
        Assert.assertEquals(0, brentSolver0.getIterationCount());
        Assert.assertEquals(1.0E-15, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test34() throws Throwable {
        SinFunction sinFunction0 = new SinFunction();
        BrentSolver brentSolver0 = new BrentSolver(((UnivariateRealFunction) (sinFunction0)));
        double double0 = brentSolver0.solve((-692.6572049), 0.5);
        Assert.assertEquals(15, brentSolver0.getIterationCount());
        Assert.assertEquals((-534.0707511102377), double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        BrentSolver brentSolver0 = new BrentSolver();
        QuinticFunction quinticFunction0 = new QuinticFunction();
        UnivariateRealFunction univariateRealFunction0 = quinticFunction0.derivative();
        brentSolver0.setMaximalIterationCount(2);
        try {
            brentSolver0.solve(univariateRealFunction0, (-1961.1921), 1.0E-15, (-1.4830193029650036));
            Assert.fail("Expecting exception: Exception");
        } catch (Exception e) {
            // 
            // Maximal number of iterations (2) exceeded
            // 
            EvoAssertions.verifyException("org.apache.commons.math.analysis.solvers.BrentSolver", e);
        }
    }
}

