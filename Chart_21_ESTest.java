/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 19 07:55:31 GMT 2016
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 99 covered goals:
   * Goal 1. org.jfree.data.Range.getLength()D: root-Branch
   * Goal 2. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true
   * Goal 6. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true
   * Goal 7. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - false
   * Goal 8. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 9. Branch org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true in context: org.jfree.data.Range:expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 10. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 11. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - false in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 12. [Output]: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:False
   * Goal 13. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 14. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 15. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 16. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Negative
   * Goal 17. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 18. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 19. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 20. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 21. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 330
   * Goal 22. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 333
   * Goal 23. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 334
   * Goal 24. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 335
   * Goal 25. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 255
   * Goal 26. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 258
   * Goal 27. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 259
   * Goal 28. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 260
   * Goal 29. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 261
   * Goal 30. org.jfree.data.Range.getLength()D: Line 119
   * Goal 31. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 32. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 33. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 34. [METHOD] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 35. [METHOD] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 36. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 37. [METHODNOEX] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 38. [METHODNOEX] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 39. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 40. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 41. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 42. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 43. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 44. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 45. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 46. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 47. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 48. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 21: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 22: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 23: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> +
   * Goal 53. Weak Mutation 24: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> %
   * Goal 54. Weak Mutation 25: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> *
   * Goal 55. Weak Mutation 26: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> /
   * Goal 56. Weak Mutation 137: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:255 - ReplaceComparisonOperator != null -> = null
   * Goal 57. Weak Mutation 140: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> upperMargin
   * Goal 58. Weak Mutation 141: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> lowerMargin
   * Goal 59. Weak Mutation 142: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of length
   * Goal 60. Weak Mutation 143: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> length
   * Goal 61. Weak Mutation 144: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> upperMargin
   * Goal 62. Weak Mutation 145: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of lowerMargin
   * Goal 63. Weak Mutation 146: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> +
   * Goal 64. Weak Mutation 147: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> %
   * Goal 65. Weak Mutation 148: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> -
   * Goal 66. Weak Mutation 149: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> /
   * Goal 67. Weak Mutation 150: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> upperMargin
   * Goal 68. Weak Mutation 151: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> lowerMargin
   * Goal 69. Weak Mutation 152: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> lower
   * Goal 70. Weak Mutation 153: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of length
   * Goal 71. Weak Mutation 154: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> length
   * Goal 72. Weak Mutation 155: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> lowerMargin
   * Goal 73. Weak Mutation 156: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> lower
   * Goal 74. Weak Mutation 157: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of upperMargin
   * Goal 75. Weak Mutation 158: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> +
   * Goal 76. Weak Mutation 159: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> %
   * Goal 77. Weak Mutation 160: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> -
   * Goal 78. Weak Mutation 162: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> length
   * Goal 79. Weak Mutation 163: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> upperMargin
   * Goal 80. Weak Mutation 165: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> upper
   * Goal 81. Weak Mutation 166: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of lower
   * Goal 82. Weak Mutation 167: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> +
   * Goal 83. Weak Mutation 168: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> %
   * Goal 84. Weak Mutation 169: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> *
   * Goal 85. Weak Mutation 170: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> /
   * Goal 86. Weak Mutation 171: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> length
   * Goal 87. Weak Mutation 173: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> lowerMargin
   * Goal 88. Weak Mutation 174: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> lower
   * Goal 89. Weak Mutation 175: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of upper
   * Goal 90. Weak Mutation 176: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> %
   * Goal 91. Weak Mutation 177: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> -
   * Goal 92. Weak Mutation 178: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> *
   * Goal 93. Weak Mutation 179: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> /
   * Goal 94. Weak Mutation 238: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:330 - ReplaceComparisonOperator != -> ==
   * Goal 95. Weak Mutation 240: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 96. Weak Mutation 241: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceVariable range -> this
   * Goal 97. Weak Mutation 242: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 98. Weak Mutation 244: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceComparisonOperator == -> >=
   * Goal 99. Weak Mutation 246: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:335 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      Range range1 = Range.expand(range0, 3118.3465926, (-1.0));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(3118.3465926, range1.getLength(), 0.01);
  }

  //Test case number: 1
  /*
   * 82 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 6. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true
   * Goal 7. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - false
   * Goal 8. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true
   * Goal 9. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 10. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 11. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 12. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - false in context: 
   * Goal 13. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true in context: 
   * Goal 14. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 15. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 16. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Positive
   * Goal 17. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 18. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 19. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 20. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Positive
   * Goal 21. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 22. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 23. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 24. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 25. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 26. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 27. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 28. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 274
   * Goal 29. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 30. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 31. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 311
   * Goal 32. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 312
   * Goal 33. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 314
   * Goal 34. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 318
   * Goal 35. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 36. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 37. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 38. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 39. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 40. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 41. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 42. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 43. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 44. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 45. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 46. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 47. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 180: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - InsertUnaryOp Negation of delta
   * Goal 49. Weak Mutation 181: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - ReplaceConstant - 0 -> 1
   * Goal 50. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 51. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 52. Weak Mutation 194: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 53. Weak Mutation 195: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 54. Weak Mutation 196: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceVariable value -> delta
   * Goal 55. Weak Mutation 197: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - InsertUnaryOp Negation of value
   * Goal 56. Weak Mutation 198: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> 1.0
   * Goal 57. Weak Mutation 199: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> -1.0
   * Goal 58. Weak Mutation 200: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> -1
   * Goal 59. Weak Mutation 202: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> <
   * Goal 60. Weak Mutation 203: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - ReplaceVariable value -> delta
   * Goal 61. Weak Mutation 204: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - InsertUnaryOp Negation of value
   * Goal 62. Weak Mutation 205: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - ReplaceVariable delta -> value
   * Goal 63. Weak Mutation 206: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - InsertUnaryOp Negation of delta
   * Goal 64. Weak Mutation 207: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - ReplaceArithmeticOperator + -> %
   * Goal 65. Weak Mutation 208: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - ReplaceArithmeticOperator + -> -
   * Goal 66. Weak Mutation 209: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - ReplaceArithmeticOperator + -> *
   * Goal 67. Weak Mutation 210: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - ReplaceArithmeticOperator + -> /
   * Goal 68. Weak Mutation 211: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - ReplaceConstant - 0.0 -> 1.0
   * Goal 69. Weak Mutation 212: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:312 - ReplaceConstant - 0.0 -> -1.0
   * Goal 70. Weak Mutation 213: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceVariable value -> delta
   * Goal 71. Weak Mutation 214: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - InsertUnaryOp Negation of value
   * Goal 72. Weak Mutation 215: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> 1.0
   * Goal 73. Weak Mutation 216: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> -1.0
   * Goal 74. Weak Mutation 219: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> >
   * Goal 75. Weak Mutation 230: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable value -> delta
   * Goal 76. Weak Mutation 231: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of value
   * Goal 77. Weak Mutation 232: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable delta -> value
   * Goal 78. Weak Mutation 233: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of delta
   * Goal 79. Weak Mutation 234: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> %
   * Goal 80. Weak Mutation 235: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> -
   * Goal 81. Weak Mutation 236: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> *
   * Goal 82. Weak Mutation 237: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 22.49108823578942);
      Range range2 = Range.shift(range1, (-1.0), false);
      assertEquals(21.49108823578942, range2.getLowerBound(), 0.01);
  }

  //Test case number: 2
  /*
   * 51 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true
   * Goal 5. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true
   * Goal 6. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - true
   * Goal 7. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false
   * Goal 8. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 9. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 10. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 11. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 12. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 13. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 14. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 15. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 16. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Zero
   * Goal 17. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 18. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 19. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 20. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 21. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 22. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 231
   * Goal 23. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 234
   * Goal 24. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 235
   * Goal 25. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 238
   * Goal 26. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 27. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 28. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 29. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 30. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 31. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 32. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 33. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 34. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 35. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 36. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 37. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 38. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 39. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 40. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 41. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 42. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 45. Weak Mutation 127: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - InsertUnaryOp Negation of value
   * Goal 46. Weak Mutation 129: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> ==
   * Goal 47. Weak Mutation 130: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> >
   * Goal 48. Weak Mutation 132: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - InsertUnaryOp Negation of value
   * Goal 49. Weak Mutation 133: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - ReplaceComparisonOperator <= -> -1
   * Goal 50. Weak Mutation 134: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - ReplaceComparisonOperator <= -> ==
   * Goal 51. Weak Mutation 136: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:235 - InsertUnaryOp Negation of value
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-0.5957477885826803), (-0.5957477885826803));
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.expandToInclude(range1, (-0.5957477885826803));
      assertEquals((-0.29787389429134015), range2.getCentralValue(), 0.01);
      assertSame(range2, range1);
  }

  //Test case number: 3
  /*
   * 67 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true
   * Goal 5. org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - false
   * Goal 6. org.jfree.data.Range.intersects(DD)Z: I30 Branch 7 IFLT L157 - false
   * Goal 7. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true
   * Goal 8. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true
   * Goal 9. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false
   * Goal 10. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 11. Branch org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 12. Branch org.jfree.data.Range.intersects(DD)Z: I30 Branch 7 IFLT L157 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 13. Branch org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 14. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 15. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 16. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 17. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 18. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 19. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 20. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 21. [Output]: org.jfree.data.Range.intersects(DD)Z:True
   * Goal 22. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 23. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 24. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 25. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 26. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 27. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 231
   * Goal 28. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 234
   * Goal 29. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 235
   * Goal 30. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 31. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 32. org.jfree.data.Range.intersects(DD)Z: Line 153
   * Goal 33. org.jfree.data.Range.intersects(DD)Z: Line 157
   * Goal 34. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 35. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 36. [METHOD] org.jfree.data.Range.intersects(DD)Z
   * Goal 37. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 38. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 39. [METHODNOEX] org.jfree.data.Range.intersects(DD)Z
   * Goal 40. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 41. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 42. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 43. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 44. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 45. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 46. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 47. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 48. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 49. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 50. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 62: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation of b0
   * Goal 53. Weak Mutation 63: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 64: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceComparisonOperator > -> -2
   * Goal 55. Weak Mutation 76: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b0
   * Goal 56. Weak Mutation 77: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 78: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceComparisonOperator >= -> -1
   * Goal 58. Weak Mutation 82: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b1
   * Goal 59. Weak Mutation 84: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b0
   * Goal 60. Weak Mutation 87: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceComparisonOperator < -> <=
   * Goal 61. Weak Mutation 88: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceConstant - 1 -> 0
   * Goal 62. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 63. Weak Mutation 127: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - InsertUnaryOp Negation of value
   * Goal 64. Weak Mutation 129: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> ==
   * Goal 65. Weak Mutation 132: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - InsertUnaryOp Negation of value
   * Goal 66. Weak Mutation 133: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - ReplaceComparisonOperator <= -> -1
   * Goal 67. Weak Mutation 136: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:235 - InsertUnaryOp Negation of value
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-2006.81333769), (-2006.81333769));
      Range range1 = Range.expandToInclude(range0, 1.0);
      boolean boolean0 = range1.intersects((-1533.22471447861), (-1533.22471447861));
      assertTrue(boolean0);
  }

  //Test case number: 4
  /*
   * 33 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true
   * Goal 3. org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - true
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. Branch org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 6. Branch org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 7. [Output]: org.jfree.data.Range.intersects(DD)Z:False
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 12. org.jfree.data.Range.intersects(DD)Z: Line 153
   * Goal 13. org.jfree.data.Range.intersects(DD)Z: Line 157
   * Goal 14. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 15. [METHOD] org.jfree.data.Range.intersects(DD)Z
   * Goal 16. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 17. [METHODNOEX] org.jfree.data.Range.intersects(DD)Z
   * Goal 18. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 19. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 20. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 21. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 22. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 23. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 24. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 25. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 26. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 27. Weak Mutation 62: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation of b0
   * Goal 28. Weak Mutation 63: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation
   * Goal 29. Weak Mutation 64: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceComparisonOperator > -> -2
   * Goal 30. Weak Mutation 76: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b0
   * Goal 31. Weak Mutation 77: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 80: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceComparisonOperator >= -> >
   * Goal 33. Weak Mutation 89: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  //Test case number: 5
  /*
   * 29 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - false
   * Goal 3. org.jfree.data.Range.intersects(DD)Z: I13 Branch 5 IFLE L154 - true
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. Branch org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 6. Branch org.jfree.data.Range.intersects(DD)Z: I13 Branch 5 IFLE L154 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 7. [Output]: org.jfree.data.Range.intersects(DD)Z:False
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 12. org.jfree.data.Range.intersects(DD)Z: Line 153
   * Goal 13. org.jfree.data.Range.intersects(DD)Z: Line 154
   * Goal 14. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 15. [METHOD] org.jfree.data.Range.intersects(DD)Z
   * Goal 16. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 17. [METHODNOEX] org.jfree.data.Range.intersects(DD)Z
   * Goal 18. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 21. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 23. Weak Mutation 62: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation of b0
   * Goal 24. Weak Mutation 63: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 66: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceComparisonOperator > -> >=
   * Goal 26. Weak Mutation 68: org.jfree.data.Range.intersects(DD)Z:154 - InsertUnaryOp Negation of b1
   * Goal 27. Weak Mutation 69: org.jfree.data.Range.intersects(DD)Z:154 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 72: org.jfree.data.Range.intersects(DD)Z:154 - ReplaceComparisonOperator <= -> <
   * Goal 29. Weak Mutation 74: org.jfree.data.Range.intersects(DD)Z:154 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  //Test case number: 6
  /*
   * 100 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true
   * Goal 5. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true
   * Goal 6. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false
   * Goal 7. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 8. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true
   * Goal 9. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true
   * Goal 10. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false
   * Goal 11. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 12. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 13. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 14. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 15. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 16. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true in context: 
   * Goal 17. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false in context: 
   * Goal 18. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true in context: 
   * Goal 19. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 20. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 21. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 22. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Zero
   * Goal 23. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 24. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 25. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 26. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Negative
   * Goal 27. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 28. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 29. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 30. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 31. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 32. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 231
   * Goal 33. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 234
   * Goal 34. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 235
   * Goal 35. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 36. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 37. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 38. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 39. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 311
   * Goal 40. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 314
   * Goal 41. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 315
   * Goal 42. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 318
   * Goal 43. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 44. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 45. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 46. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 47. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 48. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 49. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 50. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 51. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 52. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 53. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 54. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 55. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 56. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 57. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 58. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 59. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 60. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 61. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 62. Weak Mutation 127: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - InsertUnaryOp Negation of value
   * Goal 63. Weak Mutation 129: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> ==
   * Goal 64. Weak Mutation 132: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - InsertUnaryOp Negation of value
   * Goal 65. Weak Mutation 133: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - ReplaceComparisonOperator <= -> -1
   * Goal 66. Weak Mutation 136: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:235 - InsertUnaryOp Negation of value
   * Goal 67. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 68. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 69. Weak Mutation 194: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 70. Weak Mutation 195: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 71. Weak Mutation 196: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceVariable value -> delta
   * Goal 72. Weak Mutation 197: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - InsertUnaryOp Negation of value
   * Goal 73. Weak Mutation 198: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> 1.0
   * Goal 74. Weak Mutation 199: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> -1.0
   * Goal 75. Weak Mutation 201: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> ==
   * Goal 76. Weak Mutation 202: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> <
   * Goal 77. Weak Mutation 213: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceVariable value -> delta
   * Goal 78. Weak Mutation 214: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - InsertUnaryOp Negation of value
   * Goal 79. Weak Mutation 215: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> 1.0
   * Goal 80. Weak Mutation 216: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> -1.0
   * Goal 81. Weak Mutation 217: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> -1
   * Goal 82. Weak Mutation 219: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> >
   * Goal 83. Weak Mutation 220: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceVariable value -> delta
   * Goal 84. Weak Mutation 221: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of value
   * Goal 85. Weak Mutation 222: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceVariable delta -> value
   * Goal 86. Weak Mutation 223: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of delta
   * Goal 87. Weak Mutation 224: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> %
   * Goal 88. Weak Mutation 225: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> -
   * Goal 89. Weak Mutation 226: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> *
   * Goal 90. Weak Mutation 227: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> /
   * Goal 91. Weak Mutation 228: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> 1.0
   * Goal 92. Weak Mutation 229: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> -1.0
   * Goal 93. Weak Mutation 230: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable value -> delta
   * Goal 94. Weak Mutation 231: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of value
   * Goal 95. Weak Mutation 232: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable delta -> value
   * Goal 96. Weak Mutation 233: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of delta
   * Goal 97. Weak Mutation 234: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> %
   * Goal 98. Weak Mutation 235: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> -
   * Goal 99. Weak Mutation 236: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> *
   * Goal 100. Weak Mutation 237: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-0.5957477885826803), (-0.5957477885826803));
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range1, (-1.0), false);
      assertEquals(0.5957477885826803, range2.getLength(), 0.01);
  }

  //Test case number: 7
  /*
   * 37 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - false
   * Goal 5. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 6. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - false in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 7. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Zero
   * Goal 8. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 9. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Zero
   * Goal 10. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Zero
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 14. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 15. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 16. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 17. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 18. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 291
   * Goal 19. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 20. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 21. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 22. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 23. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 24. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 25. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 26. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 27. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 28. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 29. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 31. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 32. Weak Mutation 184: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - InsertUnaryOp Negation of delta
   * Goal 33. Weak Mutation 185: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> %
   * Goal 34. Weak Mutation 188: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> /
   * Goal 35. Weak Mutation 189: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - InsertUnaryOp Negation of delta
   * Goal 36. Weak Mutation 190: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> %
   * Goal 37. Weak Mutation 193: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  //Test case number: 8
  /*
   * 64 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 6. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true
   * Goal 7. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false
   * Goal 8. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 9. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 10. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true in context: 
   * Goal 11. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false in context: 
   * Goal 12. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Zero
   * Goal 13. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 14. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Zero
   * Goal 15. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Zero
   * Goal 16. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 17. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 18. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 19. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 20. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 21. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 22. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 274
   * Goal 23. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 24. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 25. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 311
   * Goal 26. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 314
   * Goal 27. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 315
   * Goal 28. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 29. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 30. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 31. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 32. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 33. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 34. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 35. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 36. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 37. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 180: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - InsertUnaryOp Negation of delta
   * Goal 40. Weak Mutation 181: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - ReplaceConstant - 0 -> 1
   * Goal 41. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 42. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 43. Weak Mutation 194: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 44. Weak Mutation 195: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 45. Weak Mutation 196: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceVariable value -> delta
   * Goal 46. Weak Mutation 197: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - InsertUnaryOp Negation of value
   * Goal 47. Weak Mutation 198: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> 1.0
   * Goal 48. Weak Mutation 199: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> -1.0
   * Goal 49. Weak Mutation 201: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> ==
   * Goal 50. Weak Mutation 213: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceVariable value -> delta
   * Goal 51. Weak Mutation 214: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - InsertUnaryOp Negation of value
   * Goal 52. Weak Mutation 215: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> 1.0
   * Goal 53. Weak Mutation 216: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> -1.0
   * Goal 54. Weak Mutation 217: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> -1
   * Goal 55. Weak Mutation 220: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceVariable value -> delta
   * Goal 56. Weak Mutation 221: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of value
   * Goal 57. Weak Mutation 222: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceVariable delta -> value
   * Goal 58. Weak Mutation 223: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of delta
   * Goal 59. Weak Mutation 224: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> %
   * Goal 60. Weak Mutation 225: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> -
   * Goal 61. Weak Mutation 226: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> *
   * Goal 62. Weak Mutation 227: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> /
   * Goal 63. Weak Mutation 228: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> 1.0
   * Goal 64. Weak Mutation 229: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> -1.0
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-688.0644525722015), (-688.0644525722015));
      Range range1 = Range.shift(range0, 1314.9802682963982);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  //Test case number: 9
  /*
   * 24 covered goals:
   * Goal 1. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getUpperBound()D: root-Branch in context: org.jfree.data.Range:getUpperBound()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getUpperBound()D:Positive
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getUpperBound()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getUpperBound()D
   * Goal 15. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 16. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 17. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 18. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 19. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 20. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 21. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 23. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 24. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(1.0, 1529.756);
      double double0 = range0.getUpperBound();
      assertEquals(765.378, range0.getCentralValue(), 0.01);
      assertEquals(1529.756, double0, 0.01);
  }

  //Test case number: 10
  /*
   * 20 covered goals:
   * Goal 1. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getUpperBound()D: root-Branch in context: org.jfree.data.Range:getUpperBound()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getUpperBound()D:Negative
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getUpperBound()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getUpperBound()D
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-0.5957477885826803), (-0.5957477885826803));
      double double0 = range0.getUpperBound();
      assertEquals((-0.5957477885826803), double0, 0.01);
  }

  //Test case number: 11
  /*
   * 20 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getLowerBound()D: root-Branch in context: org.jfree.data.Range:getLowerBound()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getLowerBound()D:Zero
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getLowerBound()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getLowerBound()D
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  //Test case number: 12
  /*
   * 20 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getLowerBound()D: root-Branch in context: org.jfree.data.Range:getLowerBound()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getLowerBound()D:Positive
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getLowerBound()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getLowerBound()D
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(1336.528, 1336.528);
      double double0 = range0.getLowerBound();
      assertEquals(1336.528, double0, 0.01);
  }

  //Test case number: 13
  /*
   * 29 covered goals:
   * Goal 1. org.jfree.data.Range.getLength()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getLength()D: root-Branch in context: org.jfree.data.Range:getLength()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getLength()D:Positive
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getLength()D: Line 119
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getLength()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getLength()D
   * Goal 15. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 16. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 17. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 18. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 19. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 20. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 21. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 23. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 24. Weak Mutation 21: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 25. Weak Mutation 22: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 23: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> +
   * Goal 27. Weak Mutation 24: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> %
   * Goal 28. Weak Mutation 25: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> *
   * Goal 29. Weak Mutation 26: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      double double0 = range0.getLength();
      assertEquals(1.0, double0, 0.01);
  }

  //Test case number: 14
  /*
   * 90 covered goals:
   * Goal 1. org.jfree.data.Range.getCentralValue()D: root-Branch
   * Goal 2. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch
   * Goal 4. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 5. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 6. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 7. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true
   * Goal 8. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true
   * Goal 9. Branch org.jfree.data.Range.getCentralValue()D: root-Branch in context: org.jfree.data.Range:getCentralValue()D
   * Goal 10. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 11. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 12. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true in context: 
   * Goal 13. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true in context: 
   * Goal 14. [Output]: org.jfree.data.Range.getCentralValue()D:Positive
   * Goal 15. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 16. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 17. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Positive
   * Goal 18. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 19. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 20. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 21. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 22. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 23. org.jfree.data.Range.getCentralValue()D: Line 128
   * Goal 24. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 25. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 26. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 274
   * Goal 27. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 28. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 29. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 311
   * Goal 30. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 314
   * Goal 31. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 318
   * Goal 32. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 33. [METHOD] org.jfree.data.Range.getCentralValue()D
   * Goal 34. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 35. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 36. [METHODNOEX] org.jfree.data.Range.getCentralValue()D
   * Goal 37. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 38. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 39. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 40. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 41. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 42. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 43. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 45. Weak Mutation 27: org.jfree.data.Range.getCentralValue()D:128 - InsertUnaryOp Negation
   * Goal 46. Weak Mutation 28: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 0.0
   * Goal 47. Weak Mutation 29: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 1.0
   * Goal 48. Weak Mutation 30: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> -1.0
   * Goal 49. Weak Mutation 31: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 3.0
   * Goal 50. Weak Mutation 32: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> +
   * Goal 51. Weak Mutation 33: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> %
   * Goal 52. Weak Mutation 34: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> -
   * Goal 53. Weak Mutation 35: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> *
   * Goal 54. Weak Mutation 36: org.jfree.data.Range.getCentralValue()D:128 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 37: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 0.0
   * Goal 56. Weak Mutation 38: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 1.0
   * Goal 57. Weak Mutation 39: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> -1.0
   * Goal 58. Weak Mutation 40: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 3.0
   * Goal 59. Weak Mutation 41: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> +
   * Goal 60. Weak Mutation 42: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> %
   * Goal 61. Weak Mutation 43: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> -
   * Goal 62. Weak Mutation 44: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> *
   * Goal 63. Weak Mutation 45: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> %
   * Goal 64. Weak Mutation 46: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> -
   * Goal 65. Weak Mutation 47: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> *
   * Goal 66. Weak Mutation 48: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> /
   * Goal 67. Weak Mutation 180: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - InsertUnaryOp Negation of delta
   * Goal 68. Weak Mutation 181: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - ReplaceConstant - 0 -> 1
   * Goal 69. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 70. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 71. Weak Mutation 194: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 72. Weak Mutation 195: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 73. Weak Mutation 196: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceVariable value -> delta
   * Goal 74. Weak Mutation 197: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - InsertUnaryOp Negation of value
   * Goal 75. Weak Mutation 198: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> 1.0
   * Goal 76. Weak Mutation 199: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> -1.0
   * Goal 77. Weak Mutation 202: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> <
   * Goal 78. Weak Mutation 213: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceVariable value -> delta
   * Goal 79. Weak Mutation 214: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - InsertUnaryOp Negation of value
   * Goal 80. Weak Mutation 215: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> 1.0
   * Goal 81. Weak Mutation 216: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> -1.0
   * Goal 82. Weak Mutation 219: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> >
   * Goal 83. Weak Mutation 230: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable value -> delta
   * Goal 84. Weak Mutation 231: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of value
   * Goal 85. Weak Mutation 232: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable delta -> value
   * Goal 86. Weak Mutation 233: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of delta
   * Goal 87. Weak Mutation 234: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> %
   * Goal 88. Weak Mutation 235: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> -
   * Goal 89. Weak Mutation 236: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> *
   * Goal 90. Weak Mutation 237: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 22.49108823578942);
      double double0 = range1.getCentralValue();
      assertEquals(22.49108823578942, double0, 0.01);
  }

  //Test case number: 15
  /*
   * 41 covered goals:
   * Goal 1. org.jfree.data.Range.getCentralValue()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getCentralValue()D: root-Branch in context: org.jfree.data.Range:getCentralValue()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getCentralValue()D:Negative
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getCentralValue()D: Line 128
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getCentralValue()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getCentralValue()D
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 27: org.jfree.data.Range.getCentralValue()D:128 - InsertUnaryOp Negation
   * Goal 21. Weak Mutation 28: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 0.0
   * Goal 22. Weak Mutation 29: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 1.0
   * Goal 23. Weak Mutation 30: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> -1.0
   * Goal 24. Weak Mutation 31: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 3.0
   * Goal 25. Weak Mutation 32: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> +
   * Goal 26. Weak Mutation 33: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> %
   * Goal 27. Weak Mutation 34: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> -
   * Goal 28. Weak Mutation 35: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> *
   * Goal 29. Weak Mutation 36: org.jfree.data.Range.getCentralValue()D:128 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 37: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 0.0
   * Goal 31. Weak Mutation 38: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 1.0
   * Goal 32. Weak Mutation 39: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> -1.0
   * Goal 33. Weak Mutation 40: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 3.0
   * Goal 34. Weak Mutation 41: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> +
   * Goal 35. Weak Mutation 42: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> %
   * Goal 36. Weak Mutation 43: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> -
   * Goal 37. Weak Mutation 44: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> *
   * Goal 38. Weak Mutation 45: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> %
   * Goal 39. Weak Mutation 46: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> -
   * Goal 40. Weak Mutation 47: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> *
   * Goal 41. Weak Mutation 48: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-0.5957477885826803), (-0.5957477885826803));
      double double0 = range0.getCentralValue();
      assertEquals((-0.5957477885826803), double0, 0.01);
  }

  //Test case number: 16
  /*
   * 41 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true
   * Goal 5. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - false
   * Goal 6. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 7. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 8. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - false in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 9. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 10. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 11. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 12. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Negative
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 14. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 15. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 16. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 17. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 18. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 231
   * Goal 19. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 232
   * Goal 20. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 21. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 22. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 23. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 24. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 25. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 26. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 27. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 28. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 29. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 30. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 31. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 32. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 33. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 34. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 35. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 36. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 39. Weak Mutation 127: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - InsertUnaryOp Negation of value
   * Goal 40. Weak Mutation 128: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> -1
   * Goal 41. Weak Mutation 131: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:232 - InsertUnaryOp Negation of value
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-0.5957477885826803), (-0.5957477885826803));
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertEquals((-0.7978738942913401), range1.getCentralValue(), 0.01);
  }

  //Test case number: 17
  /*
   * 65 covered goals:
   * Goal 1. org.jfree.data.Range.getLength()D: root-Branch
   * Goal 2. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true
   * Goal 6. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 7. Branch org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true in context: org.jfree.data.Range:expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 8. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 9. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 10. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Positive
   * Goal 11. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 14. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 15. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 16. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 255
   * Goal 17. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 258
   * Goal 18. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 259
   * Goal 19. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 260
   * Goal 20. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 261
   * Goal 21. org.jfree.data.Range.getLength()D: Line 119
   * Goal 22. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 23. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 24. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 25. [METHOD] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 26. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 27. [METHODNOEX] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 28. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 29. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 30. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 31. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 32. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 33. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 21: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 22: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 23: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> +
   * Goal 38. Weak Mutation 25: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> *
   * Goal 39. Weak Mutation 26: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> /
   * Goal 40. Weak Mutation 137: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:255 - ReplaceComparisonOperator != null -> = null
   * Goal 41. Weak Mutation 140: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> upperMargin
   * Goal 42. Weak Mutation 141: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> lowerMargin
   * Goal 43. Weak Mutation 142: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of length
   * Goal 44. Weak Mutation 143: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> length
   * Goal 45. Weak Mutation 145: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of lowerMargin
   * Goal 46. Weak Mutation 146: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> +
   * Goal 47. Weak Mutation 148: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> -
   * Goal 48. Weak Mutation 150: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> upperMargin
   * Goal 49. Weak Mutation 151: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> lowerMargin
   * Goal 50. Weak Mutation 153: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of length
   * Goal 51. Weak Mutation 154: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> length
   * Goal 52. Weak Mutation 156: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> lower
   * Goal 53. Weak Mutation 157: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of upperMargin
   * Goal 54. Weak Mutation 158: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> +
   * Goal 55. Weak Mutation 160: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> -
   * Goal 56. Weak Mutation 163: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> upperMargin
   * Goal 57. Weak Mutation 164: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> lowerMargin
   * Goal 58. Weak Mutation 166: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of lower
   * Goal 59. Weak Mutation 168: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> %
   * Goal 60. Weak Mutation 170: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> /
   * Goal 61. Weak Mutation 172: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> upperMargin
   * Goal 62. Weak Mutation 173: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> lowerMargin
   * Goal 63. Weak Mutation 175: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of upper
   * Goal 64. Weak Mutation 176: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> %
   * Goal 65. Weak Mutation 179: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expand(range0, 1.0, 1.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  //Test case number: 18
  /*
   * 60 covered goals:
   * Goal 1. org.jfree.data.Range.getLength()D: root-Branch
   * Goal 2. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true
   * Goal 6. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 7. Branch org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true in context: org.jfree.data.Range:expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 8. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Zero
   * Goal 9. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 10. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Zero
   * Goal 11. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Zero
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 14. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 15. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 16. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 255
   * Goal 17. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 258
   * Goal 18. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 259
   * Goal 19. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 260
   * Goal 20. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 261
   * Goal 21. org.jfree.data.Range.getLength()D: Line 119
   * Goal 22. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 23. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 24. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 25. [METHOD] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 26. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 27. [METHODNOEX] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 28. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 29. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 30. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 31. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 32. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 33. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 21: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 22: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 24: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> %
   * Goal 38. Weak Mutation 26: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> /
   * Goal 39. Weak Mutation 137: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:255 - ReplaceComparisonOperator != null -> = null
   * Goal 40. Weak Mutation 141: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> lowerMargin
   * Goal 41. Weak Mutation 142: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of length
   * Goal 42. Weak Mutation 143: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> length
   * Goal 43. Weak Mutation 144: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> upperMargin
   * Goal 44. Weak Mutation 145: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of lowerMargin
   * Goal 45. Weak Mutation 146: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> +
   * Goal 46. Weak Mutation 148: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> -
   * Goal 47. Weak Mutation 151: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> lowerMargin
   * Goal 48. Weak Mutation 153: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of length
   * Goal 49. Weak Mutation 155: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> lowerMargin
   * Goal 50. Weak Mutation 157: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of upperMargin
   * Goal 51. Weak Mutation 159: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> %
   * Goal 52. Weak Mutation 161: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> /
   * Goal 53. Weak Mutation 164: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> lowerMargin
   * Goal 54. Weak Mutation 166: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of lower
   * Goal 55. Weak Mutation 168: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> %
   * Goal 56. Weak Mutation 170: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> /
   * Goal 57. Weak Mutation 173: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> lowerMargin
   * Goal 58. Weak Mutation 175: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of upper
   * Goal 59. Weak Mutation 176: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> %
   * Goal 60. Weak Mutation 179: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 2.46515, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  //Test case number: 19
  /*
   * 104 covered goals:
   * Goal 1. org.jfree.data.Range.getLength()D: root-Branch
   * Goal 2. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true
   * Goal 6. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true
   * Goal 7. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - true
   * Goal 8. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I33 Branch 22 IFEQ L337 - false
   * Goal 9. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 10. Branch org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true in context: org.jfree.data.Range:expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 11. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 12. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 13. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I33 Branch 22 IFEQ L337 - false in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 14. [Output]: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:False
   * Goal 15. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 16. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 17. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 18. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 19. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 20. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 21. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 22. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 23. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 330
   * Goal 24. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 333
   * Goal 25. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 334
   * Goal 26. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 337
   * Goal 27. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 338
   * Goal 28. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 255
   * Goal 29. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 258
   * Goal 30. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 259
   * Goal 31. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 260
   * Goal 32. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 261
   * Goal 33. org.jfree.data.Range.getLength()D: Line 119
   * Goal 34. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 35. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 36. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 37. [METHOD] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 38. [METHOD] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 39. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 40. [METHODNOEX] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 41. [METHODNOEX] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 42. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 43. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 44. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 45. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 46. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 47. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 48. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 49. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 50. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 51. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 53. Weak Mutation 21: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 22: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 23: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> +
   * Goal 56. Weak Mutation 24: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> %
   * Goal 57. Weak Mutation 25: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> *
   * Goal 58. Weak Mutation 26: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> /
   * Goal 59. Weak Mutation 137: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:255 - ReplaceComparisonOperator != null -> = null
   * Goal 60. Weak Mutation 140: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> upperMargin
   * Goal 61. Weak Mutation 141: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> lowerMargin
   * Goal 62. Weak Mutation 142: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of length
   * Goal 63. Weak Mutation 143: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> length
   * Goal 64. Weak Mutation 144: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> upperMargin
   * Goal 65. Weak Mutation 145: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of lowerMargin
   * Goal 66. Weak Mutation 147: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> %
   * Goal 67. Weak Mutation 149: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> /
   * Goal 68. Weak Mutation 150: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> upperMargin
   * Goal 69. Weak Mutation 151: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> lowerMargin
   * Goal 70. Weak Mutation 152: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> lower
   * Goal 71. Weak Mutation 153: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of length
   * Goal 72. Weak Mutation 154: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> length
   * Goal 73. Weak Mutation 155: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> lowerMargin
   * Goal 74. Weak Mutation 156: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> lower
   * Goal 75. Weak Mutation 157: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of upperMargin
   * Goal 76. Weak Mutation 158: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> +
   * Goal 77. Weak Mutation 159: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> %
   * Goal 78. Weak Mutation 160: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> -
   * Goal 79. Weak Mutation 161: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> /
   * Goal 80. Weak Mutation 162: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> length
   * Goal 81. Weak Mutation 163: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> upperMargin
   * Goal 82. Weak Mutation 165: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> upper
   * Goal 83. Weak Mutation 166: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of lower
   * Goal 84. Weak Mutation 168: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> %
   * Goal 85. Weak Mutation 170: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> /
   * Goal 86. Weak Mutation 171: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> length
   * Goal 87. Weak Mutation 172: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> upperMargin
   * Goal 88. Weak Mutation 173: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> lowerMargin
   * Goal 89. Weak Mutation 174: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> lower
   * Goal 90. Weak Mutation 175: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of upper
   * Goal 91. Weak Mutation 176: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> %
   * Goal 92. Weak Mutation 177: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> -
   * Goal 93. Weak Mutation 178: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> *
   * Goal 94. Weak Mutation 179: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> /
   * Goal 95. Weak Mutation 238: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:330 - ReplaceComparisonOperator != -> ==
   * Goal 96. Weak Mutation 240: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 97. Weak Mutation 241: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceVariable range -> this
   * Goal 98. Weak Mutation 242: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 99. Weak Mutation 243: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceComparisonOperator == -> -2
   * Goal 100. Weak Mutation 247: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - InsertUnaryOp Negation
   * Goal 101. Weak Mutation 248: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - ReplaceVariable range -> this
   * Goal 102. Weak Mutation 249: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - InsertUnaryOp Negation
   * Goal 103. Weak Mutation 251: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - ReplaceComparisonOperator == -> >=
   * Goal 104. Weak Mutation 253: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:338 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-688.0644525722015), 1314.9802682963982);
      Range range1 = Range.expand(range0, 0.0, 2.0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      assertEquals(6009.134162605799, range1.getLength(), 0.01);
  }

  //Test case number: 20
  /*
   * 92 covered goals:
   * Goal 1. org.jfree.data.Range.getLength()D: root-Branch
   * Goal 2. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - true
   * Goal 6. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I11 Branch 12 IFNONNULL L203 - true
   * Goal 7. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true
   * Goal 8. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 9. Branch org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - true in context: org.jfree.data.Range:combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 10. Branch org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I11 Branch 12 IFNONNULL L203 - true in context: org.jfree.data.Range:combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 11. Branch org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - true in context: org.jfree.data.Range:expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 12. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 13. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 14. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 15. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Negative
   * Goal 16. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 17. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 18. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 19. [Output]: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Negative
   * Goal 20. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 21. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 22. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 23. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 24. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 199
   * Goal 25. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 203
   * Goal 26. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 207
   * Goal 27. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 209
   * Goal 28. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 211
   * Goal 29. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 255
   * Goal 30. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 258
   * Goal 31. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 259
   * Goal 32. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 260
   * Goal 33. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 261
   * Goal 34. org.jfree.data.Range.getLength()D: Line 119
   * Goal 35. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 36. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 37. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 38. [METHOD] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 39. [METHOD] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 40. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 41. [METHODNOEX] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 42. [METHODNOEX] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 43. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 44. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 45. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 46. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 47. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 48. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 21: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 22: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 23: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> +
   * Goal 53. Weak Mutation 25: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> *
   * Goal 54. Weak Mutation 26: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> /
   * Goal 55. Weak Mutation 110: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:199 - ReplaceVariable range1 -> range2
   * Goal 56. Weak Mutation 111: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:199 - ReplaceComparisonOperator != null -> = null
   * Goal 57. Weak Mutation 113: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:203 - ReplaceVariable range2 -> range1
   * Goal 58. Weak Mutation 114: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:203 - ReplaceComparisonOperator != null -> = null
   * Goal 59. Weak Mutation 116: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:207 - ReplaceVariable range1 -> range2
   * Goal 60. Weak Mutation 117: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:207 - ReplaceVariable range2 -> range1
   * Goal 61. Weak Mutation 118: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:209 - ReplaceVariable range1 -> range2
   * Goal 62. Weak Mutation 119: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:209 - ReplaceVariable range2 -> range1
   * Goal 63. Weak Mutation 121: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:211 - InsertUnaryOp Negation of l
   * Goal 64. Weak Mutation 123: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:211 - InsertUnaryOp Negation of u
   * Goal 65. Weak Mutation 137: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:255 - ReplaceComparisonOperator != null -> = null
   * Goal 66. Weak Mutation 140: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> upperMargin
   * Goal 67. Weak Mutation 141: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable length -> lowerMargin
   * Goal 68. Weak Mutation 142: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of length
   * Goal 69. Weak Mutation 143: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> length
   * Goal 70. Weak Mutation 144: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceVariable lowerMargin -> upperMargin
   * Goal 71. Weak Mutation 145: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - InsertUnaryOp Negation of lowerMargin
   * Goal 72. Weak Mutation 146: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> +
   * Goal 73. Weak Mutation 148: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:259 - ReplaceArithmeticOperator * -> -
   * Goal 74. Weak Mutation 150: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> upperMargin
   * Goal 75. Weak Mutation 151: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable length -> lowerMargin
   * Goal 76. Weak Mutation 153: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of length
   * Goal 77. Weak Mutation 154: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> length
   * Goal 78. Weak Mutation 155: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> lowerMargin
   * Goal 79. Weak Mutation 156: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceVariable upperMargin -> lower
   * Goal 80. Weak Mutation 157: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - InsertUnaryOp Negation of upperMargin
   * Goal 81. Weak Mutation 158: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> +
   * Goal 82. Weak Mutation 160: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:260 - ReplaceArithmeticOperator * -> -
   * Goal 83. Weak Mutation 163: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> upperMargin
   * Goal 84. Weak Mutation 164: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable lower -> lowerMargin
   * Goal 85. Weak Mutation 166: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of lower
   * Goal 86. Weak Mutation 168: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> %
   * Goal 87. Weak Mutation 170: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator - -> /
   * Goal 88. Weak Mutation 172: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> upperMargin
   * Goal 89. Weak Mutation 173: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceVariable upper -> lowerMargin
   * Goal 90. Weak Mutation 175: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - InsertUnaryOp Negation of upper
   * Goal 91. Weak Mutation 176: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> %
   * Goal 92. Weak Mutation 179: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:261 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-0.5957477885826803), (-0.5957477885826803));
      Range range1 = Range.expand(range0, (-1.0), (-0.5957477885826803));
      Range range2 = Range.combine(range0, range1);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  //Test case number: 21
  /*
   * 68 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - false
   * Goal 5. org.jfree.data.Range.contains(D)Z: I11 Branch 3 IFGT L140 - false
   * Goal 6. org.jfree.data.Range.constrain(D)D: I9 Branch 8 IFNE L171 - true
   * Goal 7. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true
   * Goal 8. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true
   * Goal 9. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false
   * Goal 10. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 11. Branch org.jfree.data.Range.constrain(D)D: I9 Branch 8 IFNE L171 - true in context: org.jfree.data.Range:constrain(D)D
   * Goal 12. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 13. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 14. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 15. [Output]: org.jfree.data.Range.constrain(D)D:Positive
   * Goal 16. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 17. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 18. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Zero
   * Goal 19. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 20. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 21. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 22. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 23. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 24. org.jfree.data.Range.constrain(D)D: Line 170
   * Goal 25. org.jfree.data.Range.constrain(D)D: Line 171
   * Goal 26. org.jfree.data.Range.constrain(D)D: Line 179
   * Goal 27. org.jfree.data.Range.contains(D)Z: Line 140
   * Goal 28. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 29. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 231
   * Goal 30. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 234
   * Goal 31. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 235
   * Goal 32. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 33. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 34. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 35. [METHOD] org.jfree.data.Range.constrain(D)D
   * Goal 36. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 37. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 38. [METHODNOEX] org.jfree.data.Range.constrain(D)D
   * Goal 39. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 40. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 41. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 42. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 43. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 44. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 45. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 46. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 47. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 48. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 49. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 50. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 49: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 53. Weak Mutation 50: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 52: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator < -> !=
   * Goal 55. Weak Mutation 54: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 56. Weak Mutation 55: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 57: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator > -> !=
   * Goal 58. Weak Mutation 59: org.jfree.data.Range.contains(D)Z:140 - ReplaceConstant - 1 -> 0
   * Goal 59. Weak Mutation 90: org.jfree.data.Range.constrain(D)D:170 - InsertUnaryOp Negation of value
   * Goal 60. Weak Mutation 92: org.jfree.data.Range.constrain(D)D:171 - InsertUnaryOp Negation of value
   * Goal 61. Weak Mutation 93: org.jfree.data.Range.constrain(D)D:171 - ReplaceComparisonOperator != -> ==
   * Goal 62. Weak Mutation 109: org.jfree.data.Range.constrain(D)D:179 - InsertUnaryOp Negation of result
   * Goal 63. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 64. Weak Mutation 127: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - InsertUnaryOp Negation of value
   * Goal 65. Weak Mutation 129: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> ==
   * Goal 66. Weak Mutation 132: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - InsertUnaryOp Negation of value
   * Goal 67. Weak Mutation 133: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - ReplaceComparisonOperator <= -> -1
   * Goal 68. Weak Mutation 136: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:235 - InsertUnaryOp Negation of value
   */

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 22.49108823578942);
      double double0 = range1.constrain(2.0);
      assertEquals(2.0, double0, 0.01);
  }

  //Test case number: 22
  /*
   * 8 covered goals:
   * Goal 1. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - false
   * Goal 2. Branch org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - false in context: org.jfree.data.Range:combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 3. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:Null
   * Goal 4. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 199
   * Goal 5. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 200
   * Goal 6. [METHOD] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 7. [METHODNOEX] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 8. Weak Mutation 111: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:199 - ReplaceComparisonOperator != null -> = null
   */

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  //Test case number: 23
  /*
   * 75 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - false
   * Goal 6. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 7. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true
   * Goal 8. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true
   * Goal 9. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 10. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 11. Branch org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - false in context: org.jfree.data.Range:combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 12. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true in context: 
   * Goal 13. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true in context: 
   * Goal 14. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 15. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 16. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Positive
   * Goal 17. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 18. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 19. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 20. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Positive
   * Goal 21. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 22. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 23. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 24. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 25. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 26. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 199
   * Goal 27. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 200
   * Goal 28. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 29. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 30. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 274
   * Goal 31. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 32. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 33. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 311
   * Goal 34. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 314
   * Goal 35. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 318
   * Goal 36. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 37. [METHOD] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 38. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 39. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 40. [METHODNOEX] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 41. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 42. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 43. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 44. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 45. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 46. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 47. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 110: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:199 - ReplaceVariable range1 -> range2
   * Goal 50. Weak Mutation 111: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:199 - ReplaceComparisonOperator != null -> = null
   * Goal 51. Weak Mutation 112: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:200 - ReplaceVariable range2 -> range1
   * Goal 52. Weak Mutation 180: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - InsertUnaryOp Negation of delta
   * Goal 53. Weak Mutation 181: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 55. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 56. Weak Mutation 194: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 57. Weak Mutation 195: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 58. Weak Mutation 196: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceVariable value -> delta
   * Goal 59. Weak Mutation 197: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - InsertUnaryOp Negation of value
   * Goal 60. Weak Mutation 198: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> 1.0
   * Goal 61. Weak Mutation 199: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> -1.0
   * Goal 62. Weak Mutation 202: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> <
   * Goal 63. Weak Mutation 213: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceVariable value -> delta
   * Goal 64. Weak Mutation 214: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - InsertUnaryOp Negation of value
   * Goal 65. Weak Mutation 215: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> 1.0
   * Goal 66. Weak Mutation 216: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> -1.0
   * Goal 67. Weak Mutation 219: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> >
   * Goal 68. Weak Mutation 230: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable value -> delta
   * Goal 69. Weak Mutation 231: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of value
   * Goal 70. Weak Mutation 232: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable delta -> value
   * Goal 71. Weak Mutation 233: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of delta
   * Goal 72. Weak Mutation 234: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> %
   * Goal 73. Weak Mutation 235: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> -
   * Goal 74. Weak Mutation 236: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> *
   * Goal 75. Weak Mutation 237: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 22.49108823578942);
      Range range2 = Range.combine((Range) null, range1);
      assertNotNull(range2);
      assertEquals(22.49108823578942, range2.getUpperBound(), 0.01);
  }

  //Test case number: 24
  /*
   * 8 covered goals:
   * Goal 1. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 2. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 3. shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;_java.lang.NullPointerException_IMPLICIT
   * Goal 4. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 5. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 6. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 7. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 8. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.jfree.data.Range", e);
      }
  }

  //Test case number: 25
  /*
   * 12 covered goals:
   * Goal 1. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch
   * Goal 2. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 3. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 4. shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;_java.lang.NullPointerException_IMPLICIT
   * Goal 5. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 274
   * Goal 6. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 7. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 8. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 9. Weak Mutation 180: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - InsertUnaryOp Negation of delta
   * Goal 10. Weak Mutation 181: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - ReplaceConstant - 0 -> 1
   * Goal 11. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 12. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1074.983438669575));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.jfree.data.Range", e);
      }
  }

  //Test case number: 26
  /*
   * 20 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - false
   * Goal 2. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - false in context: org.jfree.data.Range:<init>(DD)V
   * Goal 3. <init>(DD)V_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 4. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 5. org.jfree.data.Range.<init>(DD)V: Line 87
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 89
   * Goal 7. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 8. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 9. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 10. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 11. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 12. Weak Mutation 4: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> -1
   * Goal 13. Weak Mutation 7: org.jfree.data.Range.<init>(DD)V:87 - ReplaceConstant - Range(double, double): require lower ( -> 
   * Goal 14. Weak Mutation 8: org.jfree.data.Range.<init>(DD)V:87 - ReplaceVariable lower -> upper
   * Goal 15. Weak Mutation 9: org.jfree.data.Range.<init>(DD)V:87 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 10: org.jfree.data.Range.<init>(DD)V:87 - ReplaceConstant - ) <= upper ( -> 
   * Goal 17. Weak Mutation 11: org.jfree.data.Range.<init>(DD)V:87 - ReplaceVariable upper -> lower
   * Goal 18. Weak Mutation 12: org.jfree.data.Range.<init>(DD)V:87 - InsertUnaryOp Negation of upper
   * Goal 19. Weak Mutation 13: org.jfree.data.Range.<init>(DD)V:87 - ReplaceConstant - ). -> 
   * Goal 20. Weak Mutation 14: org.jfree.data.Range.<init>(DD)V:89 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(0.0, (-493.4280428920599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-493.4280428920599).
         //
         assertThrownBy("org.jfree.data.Range", e);
      }
  }

  //Test case number: 27
  /*
   * 20 covered goals:
   * Goal 1. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getUpperBound()D: root-Branch in context: org.jfree.data.Range:getUpperBound()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getUpperBound()D:Zero
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getUpperBound()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getUpperBound()D
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  //Test case number: 28
  /*
   * 20 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getLowerBound()D: root-Branch in context: org.jfree.data.Range:getLowerBound()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getLowerBound()D:Negative
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getLowerBound()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getLowerBound()D
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-688.0644525722015), (-688.0644525722015));
      double double0 = range0.getLowerBound();
      assertEquals((-688.0644525722015), double0, 0.01);
  }

  //Test case number: 29
  /*
   * 42 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true
   * Goal 3. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - true
   * Goal 4. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I33 Branch 22 IFEQ L337 - false
   * Goal 5. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 6. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 7. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 8. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I33 Branch 22 IFEQ L337 - false in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 9. [Output]: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:False
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 14. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 330
   * Goal 15. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 333
   * Goal 16. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 334
   * Goal 17. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 337
   * Goal 18. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 338
   * Goal 19. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 20. [METHOD] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 21. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 22. [METHODNOEX] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 23. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 24. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 25. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 26. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 27. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 29. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 30. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 31. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 32. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 33. Weak Mutation 238: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:330 - ReplaceComparisonOperator != -> ==
   * Goal 34. Weak Mutation 240: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 241: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceVariable range -> this
   * Goal 36. Weak Mutation 242: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 243: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceComparisonOperator == -> -2
   * Goal 38. Weak Mutation 247: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 248: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - ReplaceVariable range -> this
   * Goal 40. Weak Mutation 249: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 252: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - ReplaceComparisonOperator == -> <=
   * Goal 42. Weak Mutation 253: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:338 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-688.0644525722015), (-688.0644525722015));
      Range range1 = new Range((-688.0644525722015), 1314.9802682963982);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(313.45790786209835, range1.getCentralValue(), 0.01);
  }

  //Test case number: 30
  /*
   * 96 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 6. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true
   * Goal 7. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true
   * Goal 8. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false
   * Goal 9. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true
   * Goal 10. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - false
   * Goal 11. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 12. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 13. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true in context: 
   * Goal 14. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false in context: 
   * Goal 15. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true in context: 
   * Goal 16. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 17. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - false in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 18. [Output]: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:False
   * Goal 19. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 20. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 21. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 22. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Negative
   * Goal 23. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 24. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 25. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 26. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 27. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 330
   * Goal 28. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 333
   * Goal 29. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 334
   * Goal 30. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 335
   * Goal 31. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 32. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 33. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 274
   * Goal 34. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 35. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 36. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 311
   * Goal 37. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 314
   * Goal 38. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 315
   * Goal 39. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 318
   * Goal 40. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 41. [METHOD] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 42. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 43. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 44. [METHODNOEX] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 45. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 46. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 47. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 48. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 49. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 50. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 51. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 52. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 53. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 54. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 55. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 180: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - InsertUnaryOp Negation of delta
   * Goal 58. Weak Mutation 181: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - ReplaceConstant - 0 -> 1
   * Goal 59. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 60. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 61. Weak Mutation 194: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 62. Weak Mutation 195: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 63. Weak Mutation 196: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceVariable value -> delta
   * Goal 64. Weak Mutation 197: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - InsertUnaryOp Negation of value
   * Goal 65. Weak Mutation 198: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> 1.0
   * Goal 66. Weak Mutation 199: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> -1.0
   * Goal 67. Weak Mutation 201: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> ==
   * Goal 68. Weak Mutation 202: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> <
   * Goal 69. Weak Mutation 213: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceVariable value -> delta
   * Goal 70. Weak Mutation 214: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - InsertUnaryOp Negation of value
   * Goal 71. Weak Mutation 215: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> 1.0
   * Goal 72. Weak Mutation 216: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> -1.0
   * Goal 73. Weak Mutation 217: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> -1
   * Goal 74. Weak Mutation 219: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> >
   * Goal 75. Weak Mutation 221: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of value
   * Goal 76. Weak Mutation 223: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of delta
   * Goal 77. Weak Mutation 224: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> %
   * Goal 78. Weak Mutation 225: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> -
   * Goal 79. Weak Mutation 226: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> *
   * Goal 80. Weak Mutation 227: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> /
   * Goal 81. Weak Mutation 228: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> 1.0
   * Goal 82. Weak Mutation 229: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> -1.0
   * Goal 83. Weak Mutation 230: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable value -> delta
   * Goal 84. Weak Mutation 231: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of value
   * Goal 85. Weak Mutation 232: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable delta -> value
   * Goal 86. Weak Mutation 233: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of delta
   * Goal 87. Weak Mutation 234: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> %
   * Goal 88. Weak Mutation 235: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> -
   * Goal 89. Weak Mutation 236: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> *
   * Goal 90. Weak Mutation 237: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> /
   * Goal 91. Weak Mutation 238: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:330 - ReplaceComparisonOperator != -> ==
   * Goal 92. Weak Mutation 240: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 93. Weak Mutation 241: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceVariable range -> this
   * Goal 94. Weak Mutation 242: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 95. Weak Mutation 245: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceComparisonOperator == -> <=
   * Goal 96. Weak Mutation 246: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:335 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      Range range1 = Range.shift(range0, (-1.0));
      boolean boolean0 = range1.equals(range0);
      assertEquals((-1.5), range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  //Test case number: 31
  /*
   * 22 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - false
   * Goal 3. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 4. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - false in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 5. [Output]: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:False
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 330
   * Goal 11. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 331
   * Goal 12. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 13. [METHOD] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 14. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 15. [METHODNOEX] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 16. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 17. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 18. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 19. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 20. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 21. Weak Mutation 238: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:330 - ReplaceComparisonOperator != -> ==
   * Goal 22. Weak Mutation 239: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:331 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-688.0644525722015), (-688.0644525722015));
      boolean boolean0 = range0.equals("Range[-688.0644525722015,1314.9802682963982]");
      assertFalse(boolean0);
  }

  //Test case number: 32
  /*
   * 39 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true
   * Goal 3. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - true
   * Goal 4. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I33 Branch 22 IFEQ L337 - true
   * Goal 5. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 6. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I4 Branch 20 IFNE L330 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 7. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I21 Branch 21 IFEQ L334 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 8. Branch org.jfree.data.Range.equals(Ljava/lang/Object;)Z: I33 Branch 22 IFEQ L337 - true in context: org.jfree.data.Range:equals(Ljava/lang/Object;)Z
   * Goal 9. [Output]: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:True
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 14. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 330
   * Goal 15. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 333
   * Goal 16. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 334
   * Goal 17. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 337
   * Goal 18. org.jfree.data.Range.equals(Ljava/lang/Object;)Z: Line 340
   * Goal 19. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 20. [METHOD] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 21. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 22. [METHODNOEX] org.jfree.data.Range.equals(Ljava/lang/Object;)Z
   * Goal 23. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 24. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 25. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 26. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 27. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 28. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 29. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 30. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 31. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 32. Weak Mutation 238: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:330 - ReplaceComparisonOperator != -> ==
   * Goal 33. Weak Mutation 240: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 242: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 243: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:334 - ReplaceComparisonOperator == -> -2
   * Goal 36. Weak Mutation 247: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 249: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 250: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:337 - ReplaceComparisonOperator == -> -2
   * Goal 39. Weak Mutation 254: org.jfree.data.Range.equals(Ljava/lang/Object;)Z:340 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  //Test case number: 33
  /*
   * 9 covered goals:
   * Goal 1. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - false
   * Goal 2. Branch org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: I3 Branch 16 IFNONNULL L255 - false in context: org.jfree.data.Range:expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 3. expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;_java.lang.IllegalArgumentException_EXPLICIT
   * Goal 4. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 255
   * Goal 5. org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;: Line 256
   * Goal 6. [METHOD] org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;
   * Goal 7. Weak Mutation 137: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:255 - ReplaceComparisonOperator != null -> = null
   * Goal 8. Weak Mutation 138: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:256 - ReplaceConstant - Null 'range' argument. -> 
   * Goal 9. Weak Mutation 139: org.jfree.data.Range.expand(Lorg/jfree/data/Range;DD)Lorg/jfree/data/Range;:256 - ReplaceComparisonOperator == -> !=
   */

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         assertThrownBy("org.jfree.data.Range", e);
      }
  }

  //Test case number: 34
  /*
   * 40 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true
   * Goal 5. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true
   * Goal 6. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - true
   * Goal 7. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 8. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 9. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 10. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 11. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Zero
   * Goal 12. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 13. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Zero
   * Goal 14. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Zero
   * Goal 15. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 16. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 17. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 18. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 19. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 20. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 231
   * Goal 21. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 234
   * Goal 22. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 238
   * Goal 23. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 24. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 25. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 26. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 27. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 28. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 29. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 30. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 31. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 32. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 33. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 34. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 37. Weak Mutation 127: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - InsertUnaryOp Negation of value
   * Goal 38. Weak Mutation 130: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> >
   * Goal 39. Weak Mutation 132: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - InsertUnaryOp Negation of value
   * Goal 40. Weak Mutation 135: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - ReplaceComparisonOperator <= -> <
   */

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  //Test case number: 35
  /*
   * 23 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - false
   * Goal 3. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - false in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 4. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 5. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 6. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Positive
   * Goal 7. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 12. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 13. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 229
   * Goal 14. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 15. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 16. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 17. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 18. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 19. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 20. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 21. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 22. Weak Mutation 125: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:229 - InsertUnaryOp Negation of value
   * Goal 23. Weak Mutation 126: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:229 - InsertUnaryOp Negation of value
   */

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1198.263571125829);
      assertEquals(1198.263571125829, range0.getLowerBound(), 0.01);
  }

  //Test case number: 36
  /*
   * 31 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - true
   * Goal 3. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I11 Branch 12 IFNONNULL L203 - false
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. Branch org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - true in context: org.jfree.data.Range:combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 6. Branch org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I11 Branch 12 IFNONNULL L203 - false in context: org.jfree.data.Range:combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 7. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Zero
   * Goal 8. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 9. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Zero
   * Goal 10. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Zero
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 14. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 15. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 199
   * Goal 16. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 203
   * Goal 17. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 204
   * Goal 18. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 19. [METHOD] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 20. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 21. [METHODNOEX] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 22. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 23. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 24. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 25. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 26. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 27. Weak Mutation 110: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:199 - ReplaceVariable range1 -> range2
   * Goal 28. Weak Mutation 111: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:199 - ReplaceComparisonOperator != null -> = null
   * Goal 29. Weak Mutation 113: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:203 - ReplaceVariable range2 -> range1
   * Goal 30. Weak Mutation 114: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:203 - ReplaceComparisonOperator != null -> = null
   * Goal 31. Weak Mutation 115: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:204 - ReplaceVariable range1 -> range2
   */

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertSame(range1, range0);
  }

  //Test case number: 37
  /*
   * 44 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - true
   * Goal 5. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I11 Branch 12 IFNONNULL L203 - true
   * Goal 6. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 7. Branch org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I3 Branch 11 IFNONNULL L199 - true in context: org.jfree.data.Range:combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 8. Branch org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: I11 Branch 12 IFNONNULL L203 - true in context: org.jfree.data.Range:combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 9. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 10. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 11. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 12. [Output]: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Zero
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 14. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 15. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 16. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 17. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 199
   * Goal 18. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 203
   * Goal 19. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 207
   * Goal 20. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 209
   * Goal 21. org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;: Line 211
   * Goal 22. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 23. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 24. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 25. [METHOD] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 26. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 27. [METHODNOEX] org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;
   * Goal 28. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 29. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 30. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 31. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 32. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 33. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 34. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 35. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 36. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 37. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 111: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:199 - ReplaceComparisonOperator != null -> = null
   * Goal 40. Weak Mutation 114: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:203 - ReplaceComparisonOperator != null -> = null
   * Goal 41. Weak Mutation 120: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:211 - ReplaceVariable l -> u
   * Goal 42. Weak Mutation 121: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:211 - InsertUnaryOp Negation of l
   * Goal 43. Weak Mutation 122: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:211 - ReplaceVariable u -> l
   * Goal 44. Weak Mutation 123: org.jfree.data.Range.combine(Lorg/jfree/data/Range;Lorg/jfree/data/Range;)Lorg/jfree/data/Range;:211 - InsertUnaryOp Negation of u
   */

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertEquals(1.0, range1.getLength(), 0.01);
  }

  //Test case number: 38
  /*
   * 46 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - true
   * Goal 3. org.jfree.data.Range.constrain(D)D: I9 Branch 8 IFNE L171 - false
   * Goal 4. org.jfree.data.Range.constrain(D)D: I16 Branch 9 IFLE L172 - true
   * Goal 5. org.jfree.data.Range.constrain(D)D: I29 Branch 10 IFGE L175 - false
   * Goal 6. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 7. Branch org.jfree.data.Range.constrain(D)D: I9 Branch 8 IFNE L171 - false in context: org.jfree.data.Range:constrain(D)D
   * Goal 8. Branch org.jfree.data.Range.constrain(D)D: I16 Branch 9 IFLE L172 - true in context: org.jfree.data.Range:constrain(D)D
   * Goal 9. Branch org.jfree.data.Range.constrain(D)D: I29 Branch 10 IFGE L175 - false in context: org.jfree.data.Range:constrain(D)D
   * Goal 10. [Output]: org.jfree.data.Range.constrain(D)D:Negative
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 14. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 15. org.jfree.data.Range.constrain(D)D: Line 170
   * Goal 16. org.jfree.data.Range.constrain(D)D: Line 171
   * Goal 17. org.jfree.data.Range.constrain(D)D: Line 172
   * Goal 18. org.jfree.data.Range.constrain(D)D: Line 175
   * Goal 19. org.jfree.data.Range.constrain(D)D: Line 176
   * Goal 20. org.jfree.data.Range.constrain(D)D: Line 179
   * Goal 21. org.jfree.data.Range.contains(D)Z: Line 140
   * Goal 22. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 23. [METHOD] org.jfree.data.Range.constrain(D)D
   * Goal 24. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 25. [METHODNOEX] org.jfree.data.Range.constrain(D)D
   * Goal 26. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 27. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 28. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 29. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 30. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 31. Weak Mutation 49: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 32. Weak Mutation 50: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 51: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator < -> -2
   * Goal 34. Weak Mutation 60: org.jfree.data.Range.contains(D)Z:140 - ReplaceConstant - 0 -> 1
   * Goal 35. Weak Mutation 90: org.jfree.data.Range.constrain(D)D:170 - InsertUnaryOp Negation of value
   * Goal 36. Weak Mutation 92: org.jfree.data.Range.constrain(D)D:171 - InsertUnaryOp Negation of value
   * Goal 37. Weak Mutation 93: org.jfree.data.Range.constrain(D)D:171 - ReplaceComparisonOperator != -> ==
   * Goal 38. Weak Mutation 95: org.jfree.data.Range.constrain(D)D:172 - InsertUnaryOp Negation of value
   * Goal 39. Weak Mutation 96: org.jfree.data.Range.constrain(D)D:172 - InsertUnaryOp Negation
   * Goal 40. Weak Mutation 98: org.jfree.data.Range.constrain(D)D:172 - ReplaceComparisonOperator <= -> ==
   * Goal 41. Weak Mutation 102: org.jfree.data.Range.constrain(D)D:175 - InsertUnaryOp Negation of value
   * Goal 42. Weak Mutation 103: org.jfree.data.Range.constrain(D)D:175 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 104: org.jfree.data.Range.constrain(D)D:175 - ReplaceComparisonOperator >= -> -1
   * Goal 44. Weak Mutation 107: org.jfree.data.Range.constrain(D)D:176 - InsertUnaryOp Negation
   * Goal 45. Weak Mutation 108: org.jfree.data.Range.constrain(D)D:179 - ReplaceVariable result -> value
   * Goal 46. Weak Mutation 109: org.jfree.data.Range.constrain(D)D:179 - InsertUnaryOp Negation of result
   */

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-0.5957477885826803), (-0.5957477885826803));
      double double0 = range0.constrain((-1.0));
      assertEquals((-0.5957477885826803), double0, 0.01);
  }

  //Test case number: 39
  /*
   * 44 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - false
   * Goal 3. org.jfree.data.Range.contains(D)Z: I11 Branch 3 IFGT L140 - true
   * Goal 4. org.jfree.data.Range.constrain(D)D: I9 Branch 8 IFNE L171 - false
   * Goal 5. org.jfree.data.Range.constrain(D)D: I16 Branch 9 IFLE L172 - false
   * Goal 6. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 7. Branch org.jfree.data.Range.constrain(D)D: I9 Branch 8 IFNE L171 - false in context: org.jfree.data.Range:constrain(D)D
   * Goal 8. Branch org.jfree.data.Range.constrain(D)D: I16 Branch 9 IFLE L172 - false in context: org.jfree.data.Range:constrain(D)D
   * Goal 9. [Output]: org.jfree.data.Range.constrain(D)D:Negative
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 14. org.jfree.data.Range.constrain(D)D: Line 170
   * Goal 15. org.jfree.data.Range.constrain(D)D: Line 171
   * Goal 16. org.jfree.data.Range.constrain(D)D: Line 172
   * Goal 17. org.jfree.data.Range.constrain(D)D: Line 173
   * Goal 18. org.jfree.data.Range.constrain(D)D: Line 179
   * Goal 19. org.jfree.data.Range.contains(D)Z: Line 140
   * Goal 20. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 21. [METHOD] org.jfree.data.Range.constrain(D)D
   * Goal 22. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 23. [METHODNOEX] org.jfree.data.Range.constrain(D)D
   * Goal 24. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 25. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 26. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 27. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 28. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 29. Weak Mutation 49: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 30. Weak Mutation 50: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 52: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator < -> !=
   * Goal 32. Weak Mutation 54: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 33. Weak Mutation 55: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 34. Weak Mutation 56: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator > -> -2
   * Goal 35. Weak Mutation 60: org.jfree.data.Range.contains(D)Z:140 - ReplaceConstant - 0 -> 1
   * Goal 36. Weak Mutation 90: org.jfree.data.Range.constrain(D)D:170 - InsertUnaryOp Negation of value
   * Goal 37. Weak Mutation 92: org.jfree.data.Range.constrain(D)D:171 - InsertUnaryOp Negation of value
   * Goal 38. Weak Mutation 93: org.jfree.data.Range.constrain(D)D:171 - ReplaceComparisonOperator != -> ==
   * Goal 39. Weak Mutation 95: org.jfree.data.Range.constrain(D)D:172 - InsertUnaryOp Negation of value
   * Goal 40. Weak Mutation 96: org.jfree.data.Range.constrain(D)D:172 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 97: org.jfree.data.Range.constrain(D)D:172 - ReplaceComparisonOperator <= -> -1
   * Goal 42. Weak Mutation 100: org.jfree.data.Range.constrain(D)D:173 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 108: org.jfree.data.Range.constrain(D)D:179 - ReplaceVariable result -> value
   * Goal 44. Weak Mutation 109: org.jfree.data.Range.constrain(D)D:179 - InsertUnaryOp Negation of result
   */

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-0.5957477885826803), (-0.5957477885826803));
      double double0 = range0.constrain(0.0);
      assertEquals((-0.5957477885826803), double0, 0.01);
  }

  //Test case number: 40
  /*
   * 35 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - false
   * Goal 3. org.jfree.data.Range.contains(D)Z: I11 Branch 3 IFGT L140 - false
   * Goal 4. org.jfree.data.Range.constrain(D)D: I9 Branch 8 IFNE L171 - true
   * Goal 5. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 6. Branch org.jfree.data.Range.constrain(D)D: I9 Branch 8 IFNE L171 - true in context: org.jfree.data.Range:constrain(D)D
   * Goal 7. [Output]: org.jfree.data.Range.constrain(D)D:Zero
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 12. org.jfree.data.Range.constrain(D)D: Line 170
   * Goal 13. org.jfree.data.Range.constrain(D)D: Line 171
   * Goal 14. org.jfree.data.Range.constrain(D)D: Line 179
   * Goal 15. org.jfree.data.Range.contains(D)Z: Line 140
   * Goal 16. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 17. [METHOD] org.jfree.data.Range.constrain(D)D
   * Goal 18. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 19. [METHODNOEX] org.jfree.data.Range.constrain(D)D
   * Goal 20. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 21. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 22. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 23. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 24. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 25. Weak Mutation 49: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 26. Weak Mutation 50: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 53: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator < -> <=
   * Goal 28. Weak Mutation 54: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 29. Weak Mutation 55: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 58: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator > -> >=
   * Goal 31. Weak Mutation 59: org.jfree.data.Range.contains(D)Z:140 - ReplaceConstant - 1 -> 0
   * Goal 32. Weak Mutation 90: org.jfree.data.Range.constrain(D)D:170 - InsertUnaryOp Negation of value
   * Goal 33. Weak Mutation 92: org.jfree.data.Range.constrain(D)D:171 - InsertUnaryOp Negation of value
   * Goal 34. Weak Mutation 93: org.jfree.data.Range.constrain(D)D:171 - ReplaceComparisonOperator != -> ==
   * Goal 35. Weak Mutation 109: org.jfree.data.Range.constrain(D)D:179 - InsertUnaryOp Negation of result
   */

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  //Test case number: 41
  /*
   * 42 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true
   * Goal 3. org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - false
   * Goal 4. org.jfree.data.Range.intersects(DD)Z: I30 Branch 7 IFLT L157 - true
   * Goal 5. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 6. Branch org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 7. Branch org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 8. Branch org.jfree.data.Range.intersects(DD)Z: I30 Branch 7 IFLT L157 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 9. [Output]: org.jfree.data.Range.intersects(DD)Z:False
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 12. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 13. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 14. org.jfree.data.Range.intersects(DD)Z: Line 153
   * Goal 15. org.jfree.data.Range.intersects(DD)Z: Line 157
   * Goal 16. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 17. [METHOD] org.jfree.data.Range.intersects(DD)Z
   * Goal 18. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 19. [METHODNOEX] org.jfree.data.Range.intersects(DD)Z
   * Goal 20. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 21. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 23. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 24. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 25. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 26. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 27. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 28. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 29. Weak Mutation 61: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceVariable b0 -> b1
   * Goal 30. Weak Mutation 62: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation of b0
   * Goal 31. Weak Mutation 63: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 64: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceComparisonOperator > -> -2
   * Goal 33. Weak Mutation 75: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceVariable b0 -> b1
   * Goal 34. Weak Mutation 76: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b0
   * Goal 35. Weak Mutation 77: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 78: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceComparisonOperator >= -> -1
   * Goal 37. Weak Mutation 81: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceVariable b1 -> b0
   * Goal 38. Weak Mutation 82: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b1
   * Goal 39. Weak Mutation 83: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceVariable b0 -> b1
   * Goal 40. Weak Mutation 84: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b0
   * Goal 41. Weak Mutation 85: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceComparisonOperator < -> -2
   * Goal 42. Weak Mutation 89: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-688.0644525722015), 1314.9802682963982);
      boolean boolean0 = range0.intersects(1120.4792737, (-688.0644525722015));
      assertFalse(boolean0);
      assertEquals(2003.0447208685996, range0.getLength(), 0.01);
  }

  //Test case number: 42
  /*
   * 71 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 3. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 4. org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true
   * Goal 5. org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - false
   * Goal 6. org.jfree.data.Range.intersects(DD)Z: I30 Branch 7 IFLT L157 - false
   * Goal 7. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true
   * Goal 8. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true
   * Goal 9. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false
   * Goal 10. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 11. Branch org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 12. Branch org.jfree.data.Range.intersects(DD)Z: I30 Branch 7 IFLT L157 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 13. Branch org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 14. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 15. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 16. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I34 Branch 15 IFLE L234 - false in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 17. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 18. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 19. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 20. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 21. [Output]: org.jfree.data.Range.intersects(DD)Z:True
   * Goal 22. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 23. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 24. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 25. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 26. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 27. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 231
   * Goal 28. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 234
   * Goal 29. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 235
   * Goal 30. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 31. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 32. org.jfree.data.Range.intersects(DD)Z: Line 153
   * Goal 33. org.jfree.data.Range.intersects(DD)Z: Line 157
   * Goal 34. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 35. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 36. [METHOD] org.jfree.data.Range.intersects(DD)Z
   * Goal 37. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 38. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 39. [METHODNOEX] org.jfree.data.Range.intersects(DD)Z
   * Goal 40. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 41. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 42. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 43. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 44. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 45. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 46. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 47. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 48. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 49. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 50. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 52. Weak Mutation 61: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceVariable b0 -> b1
   * Goal 53. Weak Mutation 62: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation of b0
   * Goal 54. Weak Mutation 63: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 64: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceComparisonOperator > -> -2
   * Goal 56. Weak Mutation 75: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceVariable b0 -> b1
   * Goal 57. Weak Mutation 76: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b0
   * Goal 58. Weak Mutation 77: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation
   * Goal 59. Weak Mutation 78: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceComparisonOperator >= -> -1
   * Goal 60. Weak Mutation 81: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceVariable b1 -> b0
   * Goal 61. Weak Mutation 82: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b1
   * Goal 62. Weak Mutation 83: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceVariable b0 -> b1
   * Goal 63. Weak Mutation 84: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b0
   * Goal 64. Weak Mutation 86: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceComparisonOperator < -> !=
   * Goal 65. Weak Mutation 88: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceConstant - 1 -> 0
   * Goal 66. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 67. Weak Mutation 127: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - InsertUnaryOp Negation of value
   * Goal 68. Weak Mutation 129: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> ==
   * Goal 69. Weak Mutation 132: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - InsertUnaryOp Negation of value
   * Goal 70. Weak Mutation 133: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:234 - ReplaceComparisonOperator <= -> -1
   * Goal 71. Weak Mutation 136: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:235 - InsertUnaryOp Negation of value
   */

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-6033.184776555), (-6033.184776555));
      Range range1 = Range.expandToInclude(range0, 4119.990463022);
      boolean boolean0 = range1.intersects(0.0, 4119.990463022);
      assertTrue(boolean0);
  }

  //Test case number: 43
  /*
   * 31 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - false
   * Goal 3. org.jfree.data.Range.intersects(DD)Z: I13 Branch 5 IFLE L154 - true
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. Branch org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 6. Branch org.jfree.data.Range.intersects(DD)Z: I13 Branch 5 IFLE L154 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 7. [Output]: org.jfree.data.Range.intersects(DD)Z:False
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 12. org.jfree.data.Range.intersects(DD)Z: Line 153
   * Goal 13. org.jfree.data.Range.intersects(DD)Z: Line 154
   * Goal 14. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 15. [METHOD] org.jfree.data.Range.intersects(DD)Z
   * Goal 16. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 17. [METHODNOEX] org.jfree.data.Range.intersects(DD)Z
   * Goal 18. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 21. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 23. Weak Mutation 61: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceVariable b0 -> b1
   * Goal 24. Weak Mutation 62: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation of b0
   * Goal 25. Weak Mutation 63: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 65: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceComparisonOperator > -> !=
   * Goal 27. Weak Mutation 67: org.jfree.data.Range.intersects(DD)Z:154 - ReplaceVariable b1 -> b0
   * Goal 28. Weak Mutation 68: org.jfree.data.Range.intersects(DD)Z:154 - InsertUnaryOp Negation of b1
   * Goal 29. Weak Mutation 69: org.jfree.data.Range.intersects(DD)Z:154 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 71: org.jfree.data.Range.intersects(DD)Z:154 - ReplaceComparisonOperator <= -> ==
   * Goal 31. Weak Mutation 74: org.jfree.data.Range.intersects(DD)Z:154 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(1336.528, 1336.528);
      boolean boolean0 = range0.intersects((-1.0), 0.0);
      assertFalse(boolean0);
  }

  //Test case number: 44
  /*
   * 31 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - false
   * Goal 3. org.jfree.data.Range.intersects(DD)Z: I13 Branch 5 IFLE L154 - false
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. Branch org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 6. Branch org.jfree.data.Range.intersects(DD)Z: I13 Branch 5 IFLE L154 - false in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 7. [Output]: org.jfree.data.Range.intersects(DD)Z:True
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 12. org.jfree.data.Range.intersects(DD)Z: Line 153
   * Goal 13. org.jfree.data.Range.intersects(DD)Z: Line 154
   * Goal 14. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 15. [METHOD] org.jfree.data.Range.intersects(DD)Z
   * Goal 16. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 17. [METHODNOEX] org.jfree.data.Range.intersects(DD)Z
   * Goal 18. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 21. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 23. Weak Mutation 61: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceVariable b0 -> b1
   * Goal 24. Weak Mutation 62: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation of b0
   * Goal 25. Weak Mutation 63: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 65: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceComparisonOperator > -> !=
   * Goal 27. Weak Mutation 67: org.jfree.data.Range.intersects(DD)Z:154 - ReplaceVariable b1 -> b0
   * Goal 28. Weak Mutation 68: org.jfree.data.Range.intersects(DD)Z:154 - InsertUnaryOp Negation of b1
   * Goal 29. Weak Mutation 69: org.jfree.data.Range.intersects(DD)Z:154 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 70: org.jfree.data.Range.intersects(DD)Z:154 - ReplaceComparisonOperator <= -> -1
   * Goal 31. Weak Mutation 73: org.jfree.data.Range.intersects(DD)Z:154 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-688.0644525722015), (-688.0644525722015));
      boolean boolean0 = range0.intersects((-2712.34795015007), 3366.843029390147);
      assertTrue(boolean0);
  }

  //Test case number: 45
  /*
   * 31 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true
   * Goal 3. org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - true
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. Branch org.jfree.data.Range.intersects(DD)Z: I6 Branch 4 IFGT L153 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 6. Branch org.jfree.data.Range.intersects(DD)Z: I26 Branch 6 IFGE L157 - true in context: org.jfree.data.Range:intersects(DD)Z
   * Goal 7. [Output]: org.jfree.data.Range.intersects(DD)Z:False
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 12. org.jfree.data.Range.intersects(DD)Z: Line 153
   * Goal 13. org.jfree.data.Range.intersects(DD)Z: Line 157
   * Goal 14. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 15. [METHOD] org.jfree.data.Range.intersects(DD)Z
   * Goal 16. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 17. [METHODNOEX] org.jfree.data.Range.intersects(DD)Z
   * Goal 18. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 21. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 23. Weak Mutation 61: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceVariable b0 -> b1
   * Goal 24. Weak Mutation 62: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation of b0
   * Goal 25. Weak Mutation 63: org.jfree.data.Range.intersects(DD)Z:153 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 64: org.jfree.data.Range.intersects(DD)Z:153 - ReplaceComparisonOperator > -> -2
   * Goal 27. Weak Mutation 75: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceVariable b0 -> b1
   * Goal 28. Weak Mutation 76: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation of b0
   * Goal 29. Weak Mutation 77: org.jfree.data.Range.intersects(DD)Z:157 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 79: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceComparisonOperator >= -> ==
   * Goal 31. Weak Mutation 89: org.jfree.data.Range.intersects(DD)Z:157 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-6033.184776555), (-6033.184776555));
      boolean boolean0 = range0.intersects(0.0, 4119.990463022);
      assertFalse(boolean0);
  }

  //Test case number: 46
  /*
   * 96 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - false
   * Goal 6. org.jfree.data.Range.contains(D)Z: I11 Branch 3 IFGT L140 - true
   * Goal 7. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 8. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true
   * Goal 9. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true
   * Goal 10. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false
   * Goal 11. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 12. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 13. Branch org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - false in context: org.jfree.data.Range:contains(D)Z
   * Goal 14. Branch org.jfree.data.Range.contains(D)Z: I11 Branch 3 IFGT L140 - true in context: org.jfree.data.Range:contains(D)Z
   * Goal 15. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true in context: 
   * Goal 16. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false in context: 
   * Goal 17. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - true in context: 
   * Goal 18. [Output]: org.jfree.data.Range.contains(D)Z:False
   * Goal 19. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 20. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 21. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 22. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Negative
   * Goal 23. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 24. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 25. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 26. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 27. org.jfree.data.Range.contains(D)Z: Line 140
   * Goal 28. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 29. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 30. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 274
   * Goal 31. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 32. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 33. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 311
   * Goal 34. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 314
   * Goal 35. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 315
   * Goal 36. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 318
   * Goal 37. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 38. [METHOD] org.jfree.data.Range.contains(D)Z
   * Goal 39. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 40. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 41. [METHODNOEX] org.jfree.data.Range.contains(D)Z
   * Goal 42. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 43. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 44. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 45. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 46. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 47. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 48. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 49. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 50. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 51. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 52. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 53. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 54. Weak Mutation 49: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 55. Weak Mutation 50: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 52: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator < -> !=
   * Goal 57. Weak Mutation 54: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 58. Weak Mutation 55: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 59. Weak Mutation 56: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator > -> -2
   * Goal 60. Weak Mutation 60: org.jfree.data.Range.contains(D)Z:140 - ReplaceConstant - 0 -> 1
   * Goal 61. Weak Mutation 180: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - InsertUnaryOp Negation of delta
   * Goal 62. Weak Mutation 181: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - ReplaceConstant - 0 -> 1
   * Goal 63. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 64. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 65. Weak Mutation 194: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 66. Weak Mutation 195: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 67. Weak Mutation 196: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceVariable value -> delta
   * Goal 68. Weak Mutation 197: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - InsertUnaryOp Negation of value
   * Goal 69. Weak Mutation 198: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> 1.0
   * Goal 70. Weak Mutation 199: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> -1.0
   * Goal 71. Weak Mutation 201: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> ==
   * Goal 72. Weak Mutation 202: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> <
   * Goal 73. Weak Mutation 213: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceVariable value -> delta
   * Goal 74. Weak Mutation 214: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - InsertUnaryOp Negation of value
   * Goal 75. Weak Mutation 215: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> 1.0
   * Goal 76. Weak Mutation 216: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> -1.0
   * Goal 77. Weak Mutation 217: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> -1
   * Goal 78. Weak Mutation 219: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> >
   * Goal 79. Weak Mutation 220: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceVariable value -> delta
   * Goal 80. Weak Mutation 221: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of value
   * Goal 81. Weak Mutation 222: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceVariable delta -> value
   * Goal 82. Weak Mutation 223: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of delta
   * Goal 83. Weak Mutation 224: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> %
   * Goal 84. Weak Mutation 225: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> -
   * Goal 85. Weak Mutation 226: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> *
   * Goal 86. Weak Mutation 227: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> /
   * Goal 87. Weak Mutation 228: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> 1.0
   * Goal 88. Weak Mutation 229: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> -1.0
   * Goal 89. Weak Mutation 230: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable value -> delta
   * Goal 90. Weak Mutation 231: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of value
   * Goal 91. Weak Mutation 232: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceVariable delta -> value
   * Goal 92. Weak Mutation 233: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - InsertUnaryOp Negation of delta
   * Goal 93. Weak Mutation 234: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> %
   * Goal 94. Weak Mutation 235: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> -
   * Goal 95. Weak Mutation 236: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> *
   * Goal 96. Weak Mutation 237: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:318 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      Range range1 = Range.shift(range0, (-1075.2166877294));
      boolean boolean0 = range1.contains(0.0);
      assertFalse(boolean0);
      assertEquals(1.0, range1.getLength(), 0.01);
  }

  //Test case number: 47
  /*
   * 32 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - false
   * Goal 3. org.jfree.data.Range.contains(D)Z: I11 Branch 3 IFGT L140 - false
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. Branch org.jfree.data.Range.contains(D)Z: I11 Branch 3 IFGT L140 - false in context: org.jfree.data.Range:contains(D)Z
   * Goal 6. Branch org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - false in context: org.jfree.data.Range:contains(D)Z
   * Goal 7. [Output]: org.jfree.data.Range.contains(D)Z:True
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 10. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 11. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 12. org.jfree.data.Range.contains(D)Z: Line 140
   * Goal 13. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHOD] org.jfree.data.Range.contains(D)Z
   * Goal 15. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 16. [METHODNOEX] org.jfree.data.Range.contains(D)Z
   * Goal 17. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 18. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 20. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 21. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 22. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 23. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 24. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 25. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 26. Weak Mutation 49: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 27. Weak Mutation 50: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 52: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator < -> !=
   * Goal 29. Weak Mutation 54: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 30. Weak Mutation 55: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 58: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator > -> >=
   * Goal 32. Weak Mutation 59: org.jfree.data.Range.contains(D)Z:140 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
  }

  //Test case number: 48
  /*
   * 23 covered goals:
   * Goal 1. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 2. org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - true
   * Goal 3. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 4. Branch org.jfree.data.Range.contains(D)Z: I6 Branch 2 IFLT L140 - true in context: org.jfree.data.Range:contains(D)Z
   * Goal 5. [Output]: org.jfree.data.Range.contains(D)Z:False
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.contains(D)Z: Line 140
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.contains(D)Z
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.contains(D)Z
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 49: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation of value
   * Goal 21. Weak Mutation 50: org.jfree.data.Range.contains(D)Z:140 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 51: org.jfree.data.Range.contains(D)Z:140 - ReplaceComparisonOperator < -> -2
   * Goal 23. Weak Mutation 60: org.jfree.data.Range.contains(D)Z:140 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(1204.58055367, 1204.58055367);
      boolean boolean0 = range0.contains(0.0);
      assertFalse(boolean0);
  }

  //Test case number: 49
  /*
   * 28 covered goals:
   * Goal 1. org.jfree.data.Range.toString()Ljava/lang/String;: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.toString()Ljava/lang/String;: root-Branch in context: org.jfree.data.Range:toString()Ljava/lang/String;
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.toString()Ljava/lang/String;:NonEmptyString
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.toString()Ljava/lang/String;: Line 365
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.toString()Ljava/lang/String;
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.toString()Ljava/lang/String;
   * Goal 15. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 16. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 17. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 18. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 19. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 20. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 21. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 23. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 24. Weak Mutation 298: org.jfree.data.Range.toString()Ljava/lang/String;:365 - ReplaceConstant - Range[ -> 
   * Goal 25. Weak Mutation 299: org.jfree.data.Range.toString()Ljava/lang/String;:365 - InsertUnaryOp Negation
   * Goal 26. Weak Mutation 300: org.jfree.data.Range.toString()Ljava/lang/String;:365 - ReplaceConstant - , -> 
   * Goal 27. Weak Mutation 301: org.jfree.data.Range.toString()Ljava/lang/String;:365 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 302: org.jfree.data.Range.toString()Ljava/lang/String;:365 - ReplaceConstant - ] -> 
   */

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      String string0 = range0.toString();
      assertEquals("Range[-1.0,0.0]", string0);
  }

  //Test case number: 50
  /*
   * 104 covered goals:
   * Goal 1. org.jfree.data.Range.getLowerBound()D: root-Branch
   * Goal 2. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch
   * Goal 3. org.jfree.data.Range.getUpperBound()D: root-Branch
   * Goal 4. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 5. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true
   * Goal 6. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - false
   * Goal 7. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - true
   * Goal 8. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - false
   * Goal 9. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true
   * Goal 10. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false
   * Goal 11. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: root-Branch in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 12. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 13. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I3 Branch 13 IFNONNULL L228 - true in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 14. Branch org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: I18 Branch 14 IFGE L231 - false in context: org.jfree.data.Range:expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 15. Branch org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: I3 Branch 17 IFEQ L290 - false in context: org.jfree.data.Range:shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 16. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I5 Branch 18 IFLE L311 - true in context: 
   * Goal 17. Branch org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: I19 Branch 19 IFGE L314 - false in context: 
   * Goal 18. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 19. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Positive
   * Goal 20. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Zero
   * Goal 21. [Output]: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 22. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Negative
   * Goal 23. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 24. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Negative
   * Goal 25. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Negative
   * Goal 26. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getCentralValue()D:Positive
   * Goal 27. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLength()D:Zero
   * Goal 28. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getLowerBound()D:Positive
   * Goal 29. [Output]: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:NonNull:org.jfree.data.Range:getUpperBound()D:Positive
   * Goal 30. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 31. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 32. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 33. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 34. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 228
   * Goal 35. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 231
   * Goal 36. org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 232
   * Goal 37. org.jfree.data.Range.getLowerBound()D: Line 101
   * Goal 38. org.jfree.data.Range.getUpperBound()D: Line 110
   * Goal 39. org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;: Line 274
   * Goal 40. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 290
   * Goal 41. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 291
   * Goal 42. org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;: Line 295
   * Goal 43. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 311
   * Goal 44. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 314
   * Goal 45. org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D: Line 315
   * Goal 46. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 47. [METHOD] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 48. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 49. [METHOD] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 50. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 51. [METHODNOEX] org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 52. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;
   * Goal 53. [METHODNOEX] org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;
   * Goal 54. Weak Mutation 0: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable lower -> upper
   * Goal 55. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 56. Weak Mutation 2: org.jfree.data.Range.<init>(DD)V:86 - ReplaceVariable upper -> lower
   * Goal 57. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 58. Weak Mutation 5: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> ==
   * Goal 59. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 60. Weak Mutation 15: org.jfree.data.Range.<init>(DD)V:91 - ReplaceVariable lower -> upper
   * Goal 61. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 62. Weak Mutation 17: org.jfree.data.Range.<init>(DD)V:92 - ReplaceVariable upper -> lower
   * Goal 63. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 64. Weak Mutation 19: org.jfree.data.Range.getLowerBound()D:101 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 20: org.jfree.data.Range.getUpperBound()D:110 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 124: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:228 - ReplaceComparisonOperator != null -> = null
   * Goal 67. Weak Mutation 127: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - InsertUnaryOp Negation of value
   * Goal 68. Weak Mutation 128: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:231 - ReplaceComparisonOperator >= -> -1
   * Goal 69. Weak Mutation 131: org.jfree.data.Range.expandToInclude(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:232 - InsertUnaryOp Negation of value
   * Goal 70. Weak Mutation 180: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - InsertUnaryOp Negation of delta
   * Goal 71. Weak Mutation 181: org.jfree.data.Range.shift(Lorg/jfree/data/Range;D)Lorg/jfree/data/Range;:274 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 182: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - InsertUnaryOp Negation of allowZeroCrossing
   * Goal 73. Weak Mutation 183: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:290 - ReplaceComparisonOperator == -> !=
   * Goal 74. Weak Mutation 184: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - InsertUnaryOp Negation of delta
   * Goal 75. Weak Mutation 185: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> %
   * Goal 76. Weak Mutation 186: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> -
   * Goal 77. Weak Mutation 187: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> *
   * Goal 78. Weak Mutation 188: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> /
   * Goal 79. Weak Mutation 189: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - InsertUnaryOp Negation of delta
   * Goal 80. Weak Mutation 190: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> %
   * Goal 81. Weak Mutation 191: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> -
   * Goal 82. Weak Mutation 192: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> *
   * Goal 83. Weak Mutation 193: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:291 - ReplaceArithmeticOperator + -> /
   * Goal 84. Weak Mutation 194: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 85. Weak Mutation 195: org.jfree.data.Range.shift(Lorg/jfree/data/Range;DZ)Lorg/jfree/data/Range;:295 - InsertUnaryOp Negation of delta
   * Goal 86. Weak Mutation 196: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceVariable value -> delta
   * Goal 87. Weak Mutation 197: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - InsertUnaryOp Negation of value
   * Goal 88. Weak Mutation 198: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> 1.0
   * Goal 89. Weak Mutation 199: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceConstant - 0.0 -> -1.0
   * Goal 90. Weak Mutation 201: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:311 - ReplaceComparisonOperator <= -> ==
   * Goal 91. Weak Mutation 213: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceVariable value -> delta
   * Goal 92. Weak Mutation 214: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - InsertUnaryOp Negation of value
   * Goal 93. Weak Mutation 215: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> 1.0
   * Goal 94. Weak Mutation 216: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceConstant - 0.0 -> -1.0
   * Goal 95. Weak Mutation 217: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:314 - ReplaceComparisonOperator >= -> -1
   * Goal 96. Weak Mutation 220: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceVariable value -> delta
   * Goal 97. Weak Mutation 221: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of value
   * Goal 98. Weak Mutation 222: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceVariable delta -> value
   * Goal 99. Weak Mutation 223: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - InsertUnaryOp Negation of delta
   * Goal 100. Weak Mutation 225: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> -
   * Goal 101. Weak Mutation 226: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> *
   * Goal 102. Weak Mutation 227: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceArithmeticOperator + -> /
   * Goal 103. Weak Mutation 228: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> 1.0
   * Goal 104. Weak Mutation 229: org.jfree.data.Range.shiftWithNoZeroCrossing(DD)D:315 - ReplaceConstant - 0.0 -> -1.0
   */

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-6033.184776555), (-6033.184776555));
      assertEquals((-6033.184776555), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, 4119.990463022);
      Range range2 = Range.shift(range1, 4119.990463022, true);
      Range range3 = Range.expandToInclude(range2, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2206.7961494889996, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
  }

  //Test case number: 51
  /*
   * 65 covered goals:
   * Goal 1. org.jfree.data.Range.hashCode()I: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.hashCode()I: root-Branch in context: org.jfree.data.Range:hashCode()I
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 9. org.jfree.data.Range.hashCode()I: Line 351
   * Goal 10. org.jfree.data.Range.hashCode()I: Line 352
   * Goal 11. org.jfree.data.Range.hashCode()I: Line 353
   * Goal 12. org.jfree.data.Range.hashCode()I: Line 354
   * Goal 13. org.jfree.data.Range.hashCode()I: Line 355
   * Goal 14. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 15. [METHOD] org.jfree.data.Range.hashCode()I
   * Goal 16. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 17. [METHODNOEX] org.jfree.data.Range.hashCode()I
   * Goal 18. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 21. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 22. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 23. Weak Mutation 255: org.jfree.data.Range.hashCode()I:351 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 256: org.jfree.data.Range.hashCode()I:352 - InsertUnaryOp Negation of temp
   * Goal 25. Weak Mutation 257: org.jfree.data.Range.hashCode()I:352 - InsertUnaryOp Negation of temp
   * Goal 26. Weak Mutation 258: org.jfree.data.Range.hashCode()I:352 - ReplaceConstant - 32 -> 0
   * Goal 27. Weak Mutation 259: org.jfree.data.Range.hashCode()I:352 - ReplaceConstant - 32 -> 1
   * Goal 28. Weak Mutation 260: org.jfree.data.Range.hashCode()I:352 - ReplaceConstant - 32 -> -1
   * Goal 29. Weak Mutation 261: org.jfree.data.Range.hashCode()I:352 - ReplaceConstant - 32 -> 31
   * Goal 30. Weak Mutation 262: org.jfree.data.Range.hashCode()I:352 - ReplaceConstant - 32 -> 33
   * Goal 31. Weak Mutation 263: org.jfree.data.Range.hashCode()I:352 - ReplaceBitwiseOperator >>> L -> << L
   * Goal 32. Weak Mutation 264: org.jfree.data.Range.hashCode()I:352 - ReplaceBitwiseOperator >>> L -> >> L
   * Goal 33. Weak Mutation 265: org.jfree.data.Range.hashCode()I:352 - ReplaceBitwiseOperator ^ -> |
   * Goal 34. Weak Mutation 266: org.jfree.data.Range.hashCode()I:352 - ReplaceBitwiseOperator ^ -> &
   * Goal 35. Weak Mutation 267: org.jfree.data.Range.hashCode()I:353 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 268: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 29 -> 0
   * Goal 37. Weak Mutation 269: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 29 -> 1
   * Goal 38. Weak Mutation 270: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 29 -> -1
   * Goal 39. Weak Mutation 271: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 29 -> 28
   * Goal 40. Weak Mutation 272: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 29 -> 30
   * Goal 41. Weak Mutation 273: org.jfree.data.Range.hashCode()I:354 - InsertUnaryOp Negation of result
   * Goal 42. Weak Mutation 274: org.jfree.data.Range.hashCode()I:354 - InsertUnaryOp IINC 1 result
   * Goal 43. Weak Mutation 275: org.jfree.data.Range.hashCode()I:354 - InsertUnaryOp IINC -1 result
   * Goal 44. Weak Mutation 276: org.jfree.data.Range.hashCode()I:354 - ReplaceArithmeticOperator * -> +
   * Goal 45. Weak Mutation 277: org.jfree.data.Range.hashCode()I:354 - ReplaceArithmeticOperator * -> %
   * Goal 46. Weak Mutation 278: org.jfree.data.Range.hashCode()I:354 - ReplaceArithmeticOperator * -> -
   * Goal 47. Weak Mutation 279: org.jfree.data.Range.hashCode()I:354 - ReplaceArithmeticOperator * -> /
   * Goal 48. Weak Mutation 280: org.jfree.data.Range.hashCode()I:354 - InsertUnaryOp Negation of temp
   * Goal 49. Weak Mutation 281: org.jfree.data.Range.hashCode()I:354 - InsertUnaryOp Negation of temp
   * Goal 50. Weak Mutation 282: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 32 -> 0
   * Goal 51. Weak Mutation 283: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 32 -> 1
   * Goal 52. Weak Mutation 284: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 32 -> -1
   * Goal 53. Weak Mutation 285: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 32 -> 31
   * Goal 54. Weak Mutation 286: org.jfree.data.Range.hashCode()I:354 - ReplaceConstant - 32 -> 33
   * Goal 55. Weak Mutation 287: org.jfree.data.Range.hashCode()I:354 - ReplaceBitwiseOperator >>> L -> << L
   * Goal 56. Weak Mutation 288: org.jfree.data.Range.hashCode()I:354 - ReplaceBitwiseOperator >>> L -> >> L
   * Goal 57. Weak Mutation 289: org.jfree.data.Range.hashCode()I:354 - ReplaceBitwiseOperator ^ -> |
   * Goal 58. Weak Mutation 290: org.jfree.data.Range.hashCode()I:354 - ReplaceBitwiseOperator ^ -> &
   * Goal 59. Weak Mutation 291: org.jfree.data.Range.hashCode()I:354 - ReplaceArithmeticOperator + -> %
   * Goal 60. Weak Mutation 292: org.jfree.data.Range.hashCode()I:354 - ReplaceArithmeticOperator + -> -
   * Goal 61. Weak Mutation 293: org.jfree.data.Range.hashCode()I:354 - ReplaceArithmeticOperator + -> *
   * Goal 62. Weak Mutation 294: org.jfree.data.Range.hashCode()I:354 - ReplaceArithmeticOperator + -> /
   * Goal 63. Weak Mutation 295: org.jfree.data.Range.hashCode()I:355 - InsertUnaryOp Negation of result
   * Goal 64. Weak Mutation 296: org.jfree.data.Range.hashCode()I:355 - InsertUnaryOp IINC 1 result
   * Goal 65. Weak Mutation 297: org.jfree.data.Range.hashCode()I:355 - InsertUnaryOp IINC -1 result
   */

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-2006.81333769), (-2006.81333769));
      range0.hashCode();
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  //Test case number: 52
  /*
   * 35 covered goals:
   * Goal 1. org.jfree.data.Range.getCentralValue()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getCentralValue()D: root-Branch in context: org.jfree.data.Range:getCentralValue()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getCentralValue()D:Zero
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getCentralValue()D: Line 128
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getCentralValue()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getCentralValue()D
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 27: org.jfree.data.Range.getCentralValue()D:128 - InsertUnaryOp Negation
   * Goal 21. Weak Mutation 28: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 0.0
   * Goal 22. Weak Mutation 29: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 1.0
   * Goal 23. Weak Mutation 30: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> -1.0
   * Goal 24. Weak Mutation 31: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 3.0
   * Goal 25. Weak Mutation 32: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> +
   * Goal 26. Weak Mutation 34: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> -
   * Goal 27. Weak Mutation 36: org.jfree.data.Range.getCentralValue()D:128 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 37: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 0.0
   * Goal 29. Weak Mutation 38: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 1.0
   * Goal 30. Weak Mutation 39: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> -1.0
   * Goal 31. Weak Mutation 40: org.jfree.data.Range.getCentralValue()D:128 - ReplaceConstant - 2.0 -> 3.0
   * Goal 32. Weak Mutation 41: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> +
   * Goal 33. Weak Mutation 43: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator / -> -
   * Goal 34. Weak Mutation 45: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> %
   * Goal 35. Weak Mutation 48: org.jfree.data.Range.getCentralValue()D:128 - ReplaceArithmeticOperator + -> /
   */

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  //Test case number: 53
  /*
   * 24 covered goals:
   * Goal 1. org.jfree.data.Range.getLength()D: root-Branch
   * Goal 2. org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true
   * Goal 3. Branch org.jfree.data.Range.getLength()D: root-Branch in context: org.jfree.data.Range:getLength()D
   * Goal 4. Branch org.jfree.data.Range.<init>(DD)V: I9 Branch 1 IFLE L86 - true in context: org.jfree.data.Range:<init>(DD)V
   * Goal 5. [Output]: org.jfree.data.Range.getLength()D:Zero
   * Goal 6. org.jfree.data.Range.<init>(DD)V: Line 86
   * Goal 7. org.jfree.data.Range.<init>(DD)V: Line 91
   * Goal 8. org.jfree.data.Range.<init>(DD)V: Line 92
   * Goal 9. org.jfree.data.Range.<init>(DD)V: Line 93
   * Goal 10. org.jfree.data.Range.getLength()D: Line 119
   * Goal 11. [METHOD] org.jfree.data.Range.<init>(DD)V
   * Goal 12. [METHOD] org.jfree.data.Range.getLength()D
   * Goal 13. [METHODNOEX] org.jfree.data.Range.<init>(DD)V
   * Goal 14. [METHODNOEX] org.jfree.data.Range.getLength()D
   * Goal 15. Weak Mutation 1: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of lower
   * Goal 16. Weak Mutation 3: org.jfree.data.Range.<init>(DD)V:86 - InsertUnaryOp Negation of upper
   * Goal 17. Weak Mutation 6: org.jfree.data.Range.<init>(DD)V:86 - ReplaceComparisonOperator <= -> <
   * Goal 18. Weak Mutation 16: org.jfree.data.Range.<init>(DD)V:91 - InsertUnaryOp Negation of lower
   * Goal 19. Weak Mutation 18: org.jfree.data.Range.<init>(DD)V:92 - InsertUnaryOp Negation of upper
   * Goal 20. Weak Mutation 21: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 21. Weak Mutation 22: org.jfree.data.Range.getLength()D:119 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 23: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> +
   * Goal 23. Weak Mutation 25: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> *
   * Goal 24. Weak Mutation 26: org.jfree.data.Range.getLength()D:119 - ReplaceArithmeticOperator - -> /
   */

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range((-6033.184776555), (-6033.184776555));
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }
}
